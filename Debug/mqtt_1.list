
mqtt_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08006168  08006168  00016168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800625c  0800625c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800625c  0800625c  0001625c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006264  08006264  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006264  08006264  00016264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006268  08006268  00016268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800626c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a8c  2000006c  080062d8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000af8  080062d8  00020af8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f1c2  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000257c  00000000  00000000  0002f2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c00  00000000  00000000  00031820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091a  00000000  00000000  00032420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000290a9  00000000  00000000  00032d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f979  00000000  00000000  0005bde3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f58db  00000000  00000000  0006b75c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003754  00000000  00000000  00161038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0016478c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006150 	.word	0x08006150

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006150 	.word	0x08006150

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	4b2f      	ldr	r3, [pc, #188]	; (8000640 <MX_GPIO_Init+0xd4>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	4a2e      	ldr	r2, [pc, #184]	; (8000640 <MX_GPIO_Init+0xd4>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058e:	4b2c      	ldr	r3, [pc, #176]	; (8000640 <MX_GPIO_Init+0xd4>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059a:	4b29      	ldr	r3, [pc, #164]	; (8000640 <MX_GPIO_Init+0xd4>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a28      	ldr	r2, [pc, #160]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b26      	ldr	r3, [pc, #152]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	4b23      	ldr	r3, [pc, #140]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a22      	ldr	r2, [pc, #136]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005be:	4b20      	ldr	r3, [pc, #128]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ca:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	4a1c      	ldr	r2, [pc, #112]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005d0:	f043 0302 	orr.w	r3, r3, #2
 80005d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <MX_GPIO_Init+0xd4>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	f003 0302 	and.w	r3, r3, #2
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2120      	movs	r1, #32
 80005e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ea:	f001 fdf7 	bl	80021dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	4619      	mov	r1, r3
 8000604:	480f      	ldr	r0, [pc, #60]	; (8000644 <MX_GPIO_Init+0xd8>)
 8000606:	f001 fc3f 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800060a:	2320      	movs	r3, #32
 800060c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	2301      	movs	r3, #1
 8000610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	2300      	movs	r3, #0
 8000618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000624:	f001 fc30 	bl	8001e88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000628:	2200      	movs	r2, #0
 800062a:	2100      	movs	r1, #0
 800062c:	2028      	movs	r0, #40	; 0x28
 800062e:	f001 fb76 	bl	8001d1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000632:	2028      	movs	r0, #40	; 0x28
 8000634:	f001 fb8f 	bl	8001d56 <HAL_NVIC_EnableIRQ>

}
 8000638:	bf00      	nop
 800063a:	3728      	adds	r7, #40	; 0x28
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40021000 	.word	0x40021000
 8000644:	48000800 	.word	0x48000800

08000648 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <LL_TIM_IC_SetPolarity>:
  *         @arg @ref LL_TIM_IC_POLARITY_FALLING
  *         @arg @ref LL_TIM_IC_POLARITY_BOTHEDGE
  * @retval None
  */
__STATIC_INLINE void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
 8000664:	b480      	push	{r7}
 8000666:	b087      	sub	sp, #28
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d028      	beq.n	80006c8 <LL_TIM_IC_SetPolarity+0x64>
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	2b04      	cmp	r3, #4
 800067a:	d023      	beq.n	80006c4 <LL_TIM_IC_SetPolarity+0x60>
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	2b10      	cmp	r3, #16
 8000680:	d01e      	beq.n	80006c0 <LL_TIM_IC_SetPolarity+0x5c>
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	2b40      	cmp	r3, #64	; 0x40
 8000686:	d019      	beq.n	80006bc <LL_TIM_IC_SetPolarity+0x58>
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800068e:	d013      	beq.n	80006b8 <LL_TIM_IC_SetPolarity+0x54>
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000696:	d00d      	beq.n	80006b4 <LL_TIM_IC_SetPolarity+0x50>
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800069e:	d007      	beq.n	80006b0 <LL_TIM_IC_SetPolarity+0x4c>
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006a6:	d101      	bne.n	80006ac <LL_TIM_IC_SetPolarity+0x48>
 80006a8:	2307      	movs	r3, #7
 80006aa:	e00e      	b.n	80006ca <LL_TIM_IC_SetPolarity+0x66>
 80006ac:	2308      	movs	r3, #8
 80006ae:	e00c      	b.n	80006ca <LL_TIM_IC_SetPolarity+0x66>
 80006b0:	2306      	movs	r3, #6
 80006b2:	e00a      	b.n	80006ca <LL_TIM_IC_SetPolarity+0x66>
 80006b4:	2305      	movs	r3, #5
 80006b6:	e008      	b.n	80006ca <LL_TIM_IC_SetPolarity+0x66>
 80006b8:	2304      	movs	r3, #4
 80006ba:	e006      	b.n	80006ca <LL_TIM_IC_SetPolarity+0x66>
 80006bc:	2303      	movs	r3, #3
 80006be:	e004      	b.n	80006ca <LL_TIM_IC_SetPolarity+0x66>
 80006c0:	2302      	movs	r3, #2
 80006c2:	e002      	b.n	80006ca <LL_TIM_IC_SetPolarity+0x66>
 80006c4:	2301      	movs	r3, #1
 80006c6:	e000      	b.n	80006ca <LL_TIM_IC_SetPolarity+0x66>
 80006c8:	2300      	movs	r3, #0
 80006ca:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	6a1a      	ldr	r2, [r3, #32]
 80006d0:	7dfb      	ldrb	r3, [r7, #23]
 80006d2:	490b      	ldr	r1, [pc, #44]	; (8000700 <LL_TIM_IC_SetPolarity+0x9c>)
 80006d4:	5ccb      	ldrb	r3, [r1, r3]
 80006d6:	4619      	mov	r1, r3
 80006d8:	230a      	movs	r3, #10
 80006da:	408b      	lsls	r3, r1
 80006dc:	43db      	mvns	r3, r3
 80006de:	401a      	ands	r2, r3
 80006e0:	7dfb      	ldrb	r3, [r7, #23]
 80006e2:	4907      	ldr	r1, [pc, #28]	; (8000700 <LL_TIM_IC_SetPolarity+0x9c>)
 80006e4:	5ccb      	ldrb	r3, [r1, r3]
 80006e6:	4619      	mov	r1, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	408b      	lsls	r3, r1
 80006ec:	431a      	orrs	r2, r3
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	621a      	str	r2, [r3, #32]
             ICPolarity << SHIFT_TAB_CCxP[iChannel]);
}
 80006f2:	bf00      	nop
 80006f4:	371c      	adds	r7, #28
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	080061a8 	.word	0x080061a8

08000704 <LL_TIM_IC_GetCaptureCH1>:
  * @rmtoll CCR1         CCR1          LL_TIM_IC_GetCaptureCH1
  * @param  TIMx Timer instance
  * @retval CapturedValue (between Min_Data=0 and Max_Data=65535)
  */
__STATIC_INLINE uint32_t LL_TIM_IC_GetCaptureCH1(const TIM_TypeDef *TIMx)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CCR1));
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8000710:	4618      	mov	r0, r3
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000720:	f001 f982 	bl	8001a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000724:	f000 f862 	bl	80007ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000728:	f7ff ff20 	bl	800056c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800072c:	f001 f840 	bl	80017b0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000730:	f001 f86e 	bl	8001810 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  wifiConnFlag = false;
 8000734:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <main+0xb8>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
  mqttConnFlag = false;
 800073a:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <main+0xbc>)
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]

  /* Clear pins PA.0 and PA.8 that leads to Trig and Echo of sensor */
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0 | LL_GPIO_PIN_8);
 8000740:	f240 1101 	movw	r1, #257	; 0x101
 8000744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000748:	f7ff ff7e 	bl	8000648 <LL_GPIO_ResetOutputPin>
  /* Configure TIM1 in input capture mode */
  Configure_TIMInputCapture();
 800074c:	f000 ff6a 	bl	8001624 <Configure_TIMInputCapture>
  /* Configure TIM2 in PWM output mode */
  Configure_TIMPWMOutput();
 8000750:	f000 ffb8 	bl	80016c4 <Configure_TIMPWMOutput>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2120      	movs	r1, #32
 8000758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075c:	f001 fd3e 	bl	80021dc <HAL_GPIO_WritePin>

  /* Prepare for receiving in IT after an IDLE event */
  if(HAL_OK != HAL_UARTEx_ReceiveToIdle_IT(&huart2, aRXBuffer2, RX_BUFFER_SIZE))
 8000760:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000764:	491d      	ldr	r1, [pc, #116]	; (80007dc <main+0xc0>)
 8000766:	481e      	ldr	r0, [pc, #120]	; (80007e0 <main+0xc4>)
 8000768:	f004 fd42 	bl	80051f0 <HAL_UARTEx_ReceiveToIdle_IT>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <main+0x5a>
  {
	  Error_Handler();
 8000772:	f000 f9ab 	bl	8000acc <Error_Handler>
  }
  if(HAL_OK != HAL_UARTEx_ReceiveToIdle_IT(&huart3, aRXBuffer3, RX_BUFFER_SIZE))
 8000776:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800077a:	491a      	ldr	r1, [pc, #104]	; (80007e4 <main+0xc8>)
 800077c:	481a      	ldr	r0, [pc, #104]	; (80007e8 <main+0xcc>)
 800077e:	f004 fd37 	bl	80051f0 <HAL_UARTEx_ReceiveToIdle_IT>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <main+0x70>
  {
	  Error_Handler();
 8000788:	f000 f9a0 	bl	8000acc <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Wait for wifiFlag to be set */
	  if(!wifiConnFlag)
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <main+0xb8>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	f083 0301 	eor.w	r3, r3, #1
 8000794:	b2db      	uxtb	r3, r3
 8000796:	2b00      	cmp	r3, #0
 8000798:	d006      	beq.n	80007a8 <main+0x8c>
	  {
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	2120      	movs	r1, #32
 800079e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a2:	f001 fd1b 	bl	80021dc <HAL_GPIO_WritePin>
		  continue;
 80007a6:	e013      	b.n	80007d0 <main+0xb4>
	  }

	  if(!mqttConnFlag)
 80007a8:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <main+0xbc>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	f083 0301 	eor.w	r3, r3, #1
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d006      	beq.n	80007c4 <main+0xa8>
	  {
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	2120      	movs	r1, #32
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007be:	f001 fd0d 	bl	80021dc <HAL_GPIO_WritePin>
		  continue;
 80007c2:	e005      	b.n	80007d0 <main+0xb4>
	  }

	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2120      	movs	r1, #32
 80007c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007cc:	f001 fd06 	bl	80021dc <HAL_GPIO_WritePin>
	  if(!wifiConnFlag)
 80007d0:	e7dc      	b.n	800078c <main+0x70>
 80007d2:	bf00      	nop
 80007d4:	20000888 	.word	0x20000888
 80007d8:	20000889 	.word	0x20000889
 80007dc:	20000088 	.word	0x20000088
 80007e0:	20000898 	.word	0x20000898
 80007e4:	20000488 	.word	0x20000488
 80007e8:	20000920 	.word	0x20000920

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b096      	sub	sp, #88	; 0x58
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2244      	movs	r2, #68	; 0x44
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f004 ffb6 	bl	800576c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	463b      	mov	r3, r7
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800080e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000812:	f001 fd47 	bl	80022a4 <HAL_PWREx_ControlVoltageScaling>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800081c:	f000 f956 	bl	8000acc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000820:	2302      	movs	r3, #2
 8000822:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000824:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000828:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082a:	2310      	movs	r3, #16
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082e:	2302      	movs	r3, #2
 8000830:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000832:	2302      	movs	r3, #2
 8000834:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000836:	2301      	movs	r3, #1
 8000838:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800083a:	230a      	movs	r3, #10
 800083c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800083e:	2307      	movs	r3, #7
 8000840:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000842:	2302      	movs	r3, #2
 8000844:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000846:	2302      	movs	r3, #2
 8000848:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4618      	mov	r0, r3
 8000850:	f001 fd7e 	bl	8002350 <HAL_RCC_OscConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800085a:	f000 f937 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085e:	230f      	movs	r3, #15
 8000860:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000862:	2303      	movs	r3, #3
 8000864:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000872:	463b      	mov	r3, r7
 8000874:	2104      	movs	r1, #4
 8000876:	4618      	mov	r0, r3
 8000878:	f002 f946 	bl	8002b08 <HAL_RCC_ClockConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000882:	f000 f923 	bl	8000acc <Error_Handler>
  }
}
 8000886:	bf00      	nop
 8000888:	3758      	adds	r7, #88	; 0x58
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)(&ch), 1, 10);
 8000898:	1d39      	adds	r1, r7, #4
 800089a:	230a      	movs	r3, #10
 800089c:	2201      	movs	r2, #1
 800089e:	4804      	ldr	r0, [pc, #16]	; (80008b0 <__io_putchar+0x20>)
 80008a0:	f003 f860 	bl	8003964 <HAL_UART_Transmit>
	return ch;
 80008a4:	687b      	ldr	r3, [r7, #4]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000898 	.word	0x20000898

080008b4 <LED_Blinking>:

static void LED_Blinking(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008b8:	2120      	movs	r1, #32
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008be:	f001 fca5 	bl	800220c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80008c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c6:	f001 f92b 	bl	8001b20 <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008ca:	e7f5      	b.n	80008b8 <LED_Blinking+0x4>

080008cc <check_wifi_status>:
	}
}

void check_wifi_status(const char* buffer, bool* wifiConnFlag)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	6039      	str	r1, [r7, #0]
	char* wifiStatus;

	wifiStatus = strstr(buffer, WIFI_CONN);
 80008d6:	490d      	ldr	r1, [pc, #52]	; (800090c <check_wifi_status+0x40>)
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f004 ff4f 	bl	800577c <strstr>
 80008de:	60f8      	str	r0, [r7, #12]
	if(wifiStatus != NULL)
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d002      	beq.n	80008ec <check_wifi_status+0x20>
		*wifiConnFlag = true;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	2201      	movs	r2, #1
 80008ea:	701a      	strb	r2, [r3, #0]

	wifiStatus = strstr(buffer, WIFI_DISCONN);
 80008ec:	4908      	ldr	r1, [pc, #32]	; (8000910 <check_wifi_status+0x44>)
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f004 ff44 	bl	800577c <strstr>
 80008f4:	60f8      	str	r0, [r7, #12]
	if(wifiStatus != NULL)
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d002      	beq.n	8000902 <check_wifi_status+0x36>
		*wifiConnFlag = false;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	2200      	movs	r2, #0
 8000900:	701a      	strb	r2, [r3, #0]
}
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	08006168 	.word	0x08006168
 8000910:	08006178 	.word	0x08006178

08000914 <check_mqtt_status>:

void check_mqtt_status(const char* buffer, bool* mqttConnFlag)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
	char* mqttStatus;

	mqttStatus = strstr(buffer, MQTT_CONN);
 800091e:	4911      	ldr	r1, [pc, #68]	; (8000964 <check_mqtt_status+0x50>)
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f004 ff2b 	bl	800577c <strstr>
 8000926:	60f8      	str	r0, [r7, #12]
	if(mqttStatus != NULL)
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d016      	beq.n	800095c <check_mqtt_status+0x48>
	{
		mqttStatus = strstr(buffer, MQTT_OK);
 800092e:	490e      	ldr	r1, [pc, #56]	; (8000968 <check_mqtt_status+0x54>)
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f004 ff23 	bl	800577c <strstr>
 8000936:	60f8      	str	r0, [r7, #12]
		if(mqttStatus != NULL)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d003      	beq.n	8000946 <check_mqtt_status+0x32>
		{
			*mqttConnFlag = true;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
				*mqttConnFlag = false;
			}
		}
	}

}
 8000944:	e00a      	b.n	800095c <check_mqtt_status+0x48>
			mqttStatus = strstr(buffer, MQTT_ERROR);
 8000946:	4909      	ldr	r1, [pc, #36]	; (800096c <check_mqtt_status+0x58>)
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f004 ff17 	bl	800577c <strstr>
 800094e:	60f8      	str	r0, [r7, #12]
			if(mqttStatus != NULL)
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d002      	beq.n	800095c <check_mqtt_status+0x48>
				*mqttConnFlag = false;
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	08006188 	.word	0x08006188
 8000968:	08006194 	.word	0x08006194
 800096c:	08006198 	.word	0x08006198

08000970 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART2)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a1b      	ldr	r2, [pc, #108]	; (80009f0 <HAL_UARTEx_RxEventCallback+0x80>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d111      	bne.n	80009aa <HAL_UARTEx_RxEventCallback+0x3a>
	{
		/* Ensure next IT receiving */
		if(HAL_OK != HAL_UARTEx_ReceiveToIdle_IT(&huart2, aRXBuffer2, RX_BUFFER_SIZE))
 8000986:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800098a:	491a      	ldr	r1, [pc, #104]	; (80009f4 <HAL_UARTEx_RxEventCallback+0x84>)
 800098c:	481a      	ldr	r0, [pc, #104]	; (80009f8 <HAL_UARTEx_RxEventCallback+0x88>)
 800098e:	f004 fc2f 	bl	80051f0 <HAL_UARTEx_ReceiveToIdle_IT>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <HAL_UARTEx_RxEventCallback+0x2c>
		{
			Error_Handler();
 8000998:	f000 f898 	bl	8000acc <Error_Handler>
		}
		/* Transmit received data to WIFI module via UART3 */
		HAL_UART_Transmit_IT(&huart3, aRXBuffer2, Size);
 800099c:	887b      	ldrh	r3, [r7, #2]
 800099e:	461a      	mov	r2, r3
 80009a0:	4914      	ldr	r1, [pc, #80]	; (80009f4 <HAL_UARTEx_RxEventCallback+0x84>)
 80009a2:	4816      	ldr	r0, [pc, #88]	; (80009fc <HAL_UARTEx_RxEventCallback+0x8c>)
 80009a4:	f003 f868 	bl	8003a78 <HAL_UART_Transmit_IT>

		/* Check if received message is confirmation of WIFI connection */
		check_wifi_status((char *)aRXBuffer3, &wifiConnFlag);
		check_mqtt_status((char *)aRXBuffer3, &mqttConnFlag);
	}
}
 80009a8:	e01d      	b.n	80009e6 <HAL_UARTEx_RxEventCallback+0x76>
	else if(huart->Instance == USART3)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <HAL_UARTEx_RxEventCallback+0x90>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d118      	bne.n	80009e6 <HAL_UARTEx_RxEventCallback+0x76>
		if(HAL_OK != HAL_UARTEx_ReceiveToIdle_IT(&huart3, aRXBuffer3, RX_BUFFER_SIZE))
 80009b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009b8:	4912      	ldr	r1, [pc, #72]	; (8000a04 <HAL_UARTEx_RxEventCallback+0x94>)
 80009ba:	4810      	ldr	r0, [pc, #64]	; (80009fc <HAL_UARTEx_RxEventCallback+0x8c>)
 80009bc:	f004 fc18 	bl	80051f0 <HAL_UARTEx_ReceiveToIdle_IT>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <HAL_UARTEx_RxEventCallback+0x5a>
			Error_Handler();
 80009c6:	f000 f881 	bl	8000acc <Error_Handler>
		HAL_UART_Transmit_IT(&huart2, aRXBuffer3, Size);
 80009ca:	887b      	ldrh	r3, [r7, #2]
 80009cc:	461a      	mov	r2, r3
 80009ce:	490d      	ldr	r1, [pc, #52]	; (8000a04 <HAL_UARTEx_RxEventCallback+0x94>)
 80009d0:	4809      	ldr	r0, [pc, #36]	; (80009f8 <HAL_UARTEx_RxEventCallback+0x88>)
 80009d2:	f003 f851 	bl	8003a78 <HAL_UART_Transmit_IT>
		check_wifi_status((char *)aRXBuffer3, &wifiConnFlag);
 80009d6:	490c      	ldr	r1, [pc, #48]	; (8000a08 <HAL_UARTEx_RxEventCallback+0x98>)
 80009d8:	480a      	ldr	r0, [pc, #40]	; (8000a04 <HAL_UARTEx_RxEventCallback+0x94>)
 80009da:	f7ff ff77 	bl	80008cc <check_wifi_status>
		check_mqtt_status((char *)aRXBuffer3, &mqttConnFlag);
 80009de:	490b      	ldr	r1, [pc, #44]	; (8000a0c <HAL_UARTEx_RxEventCallback+0x9c>)
 80009e0:	4808      	ldr	r0, [pc, #32]	; (8000a04 <HAL_UARTEx_RxEventCallback+0x94>)
 80009e2:	f7ff ff97 	bl	8000914 <check_mqtt_status>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40004400 	.word	0x40004400
 80009f4:	20000088 	.word	0x20000088
 80009f8:	20000898 	.word	0x20000898
 80009fc:	20000920 	.word	0x20000920
 8000a00:	40004800 	.word	0x40004800
 8000a04:	20000488 	.word	0x20000488
 8000a08:	20000888 	.word	0x20000888
 8000a0c:	20000889 	.word	0x20000889

08000a10 <TimerCaptureCompare_Callback>:

void TimerCaptureCompare_Callback(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
	static uint8_t uhCaptureIndex = 0;

	/* Captured Values */
	static uint32_t uwValue1 = 0;
	static uint32_t uwValue2 = 0;
	uint32_t uwDiffVal = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]

	if(uhCaptureIndex == 0)
 8000a1a:	4b26      	ldr	r3, [pc, #152]	; (8000ab4 <TimerCaptureCompare_Callback+0xa4>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d10e      	bne.n	8000a40 <TimerCaptureCompare_Callback+0x30>
	{
		/* Select the edge of the active transition on the TI1 channel: rising and falling edge */
		LL_TIM_IC_SetPolarity(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_FALLING);
 8000a22:	2202      	movs	r2, #2
 8000a24:	2101      	movs	r1, #1
 8000a26:	4824      	ldr	r0, [pc, #144]	; (8000ab8 <TimerCaptureCompare_Callback+0xa8>)
 8000a28:	f7ff fe1c 	bl	8000664 <LL_TIM_IC_SetPolarity>

		/* Read captured value from timer */
		uwValue1 = LL_TIM_IC_GetCaptureCH1(TIM1);
 8000a2c:	4822      	ldr	r0, [pc, #136]	; (8000ab8 <TimerCaptureCompare_Callback+0xa8>)
 8000a2e:	f7ff fe69 	bl	8000704 <LL_TIM_IC_GetCaptureCH1>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4a21      	ldr	r2, [pc, #132]	; (8000abc <TimerCaptureCompare_Callback+0xac>)
 8000a36:	6013      	str	r3, [r2, #0]
		uhCaptureIndex = 1;
 8000a38:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <TimerCaptureCompare_Callback+0xa4>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	701a      	strb	r2, [r3, #0]
		uhCaptureIndex = 0;

		printf("%lu\r", uwDiffVal);
		fflush(stdout);
	}
}
 8000a3e:	e035      	b.n	8000aac <TimerCaptureCompare_Callback+0x9c>
		LL_TIM_IC_SetPolarity(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2101      	movs	r1, #1
 8000a44:	481c      	ldr	r0, [pc, #112]	; (8000ab8 <TimerCaptureCompare_Callback+0xa8>)
 8000a46:	f7ff fe0d 	bl	8000664 <LL_TIM_IC_SetPolarity>
		uwValue2 = LL_TIM_IC_GetCaptureCH1(TIM1);
 8000a4a:	481b      	ldr	r0, [pc, #108]	; (8000ab8 <TimerCaptureCompare_Callback+0xa8>)
 8000a4c:	f7ff fe5a 	bl	8000704 <LL_TIM_IC_GetCaptureCH1>
 8000a50:	4603      	mov	r3, r0
 8000a52:	4a1b      	ldr	r2, [pc, #108]	; (8000ac0 <TimerCaptureCompare_Callback+0xb0>)
 8000a54:	6013      	str	r3, [r2, #0]
		if(uwValue2 > uwValue1)
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <TimerCaptureCompare_Callback+0xb0>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <TimerCaptureCompare_Callback+0xac>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d906      	bls.n	8000a70 <TimerCaptureCompare_Callback+0x60>
			uwDiffVal = uwValue2 - uwValue1;
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <TimerCaptureCompare_Callback+0xb0>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <TimerCaptureCompare_Callback+0xac>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	e010      	b.n	8000a92 <TimerCaptureCompare_Callback+0x82>
		else if(uwValue2 < uwValue1)
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <TimerCaptureCompare_Callback+0xb0>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <TimerCaptureCompare_Callback+0xac>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d208      	bcs.n	8000a8e <TimerCaptureCompare_Callback+0x7e>
			uwDiffVal = ((TIM1_ARR_MAX - uwValue1) + uwValue2) + 1;
 8000a7c:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <TimerCaptureCompare_Callback+0xb0>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <TimerCaptureCompare_Callback+0xac>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	e001      	b.n	8000a92 <TimerCaptureCompare_Callback+0x82>
			LED_Blinking();
 8000a8e:	f7ff ff11 	bl	80008b4 <LED_Blinking>
		uhCaptureIndex = 0;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <TimerCaptureCompare_Callback+0xa4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	701a      	strb	r2, [r3, #0]
		printf("%lu\r", uwDiffVal);
 8000a98:	6879      	ldr	r1, [r7, #4]
 8000a9a:	480a      	ldr	r0, [pc, #40]	; (8000ac4 <TimerCaptureCompare_Callback+0xb4>)
 8000a9c:	f004 fd7c 	bl	8005598 <iprintf>
		fflush(stdout);
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <TimerCaptureCompare_Callback+0xb8>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f004 fca0 	bl	80053ec <fflush>
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	2000088a 	.word	0x2000088a
 8000ab8:	40012c00 	.word	0x40012c00
 8000abc:	2000088c 	.word	0x2000088c
 8000ac0:	20000890 	.word	0x20000890
 8000ac4:	080061a0 	.word	0x080061a0
 8000ac8:	20000068 	.word	0x20000068

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <HAL_MspInit+0x44>)
 8000ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <HAL_MspInit+0x44>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6613      	str	r3, [r2, #96]	; 0x60
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <HAL_MspInit+0x44>)
 8000aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_MspInit+0x44>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <HAL_MspInit+0x44>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b00:	6593      	str	r3, [r2, #88]	; 0x58
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_MspInit+0x44>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000

08000b20 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f06f 0202 	mvn.w	r2, #2
 8000b2e:	611a      	str	r2, [r3, #16]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	691b      	ldr	r3, [r3, #16]
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	d101      	bne.n	8000b54 <LL_TIM_IsActiveFlag_CC1+0x18>
 8000b50:	2301      	movs	r3, #1
 8000b52:	e000      	b.n	8000b56 <LL_TIM_IsActiveFlag_CC1+0x1a>
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b66:	e7fe      	b.n	8000b66 <NMI_Handler+0x4>

08000b68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <HardFault_Handler+0x4>

08000b6e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <MemManage_Handler+0x4>

08000b74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <BusFault_Handler+0x4>

08000b7a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <UsageFault_Handler+0x4>

08000b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bae:	f000 ff97 	bl	8001ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <USART2_IRQHandler+0x10>)
 8000bbe:	f002 ffb9 	bl	8003b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000898 	.word	0x20000898

08000bcc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <USART3_IRQHandler+0x10>)
 8000bd2:	f002 ffaf 	bl	8003b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000920 	.word	0x20000920

08000be0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000be4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000be8:	f001 fb2a 	bl	8002240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <TIM1_CC_IRQHandler>:
* @brief  This function handles TIM1 capture/compare interrupt.
* @param  None
* @retval None
*/
void TIM1_CC_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* Check whether CC1 interrupt is pending */
  if(LL_TIM_IsActiveFlag_CC1(TIM1) == 1)
 8000bf4:	4806      	ldr	r0, [pc, #24]	; (8000c10 <TIM1_CC_IRQHandler+0x20>)
 8000bf6:	f7ff ffa1 	bl	8000b3c <LL_TIM_IsActiveFlag_CC1>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d104      	bne.n	8000c0a <TIM1_CC_IRQHandler+0x1a>
  {
    /* Clear the update interrupt flag*/
    LL_TIM_ClearFlag_CC1(TIM1);
 8000c00:	4803      	ldr	r0, [pc, #12]	; (8000c10 <TIM1_CC_IRQHandler+0x20>)
 8000c02:	f7ff ff8d 	bl	8000b20 <LL_TIM_ClearFlag_CC1>

    /* TIM1 capture/compare interrupt processing(function defined in main.c) */
    TimerCaptureCompare_Callback();
 8000c06:	f7ff ff03 	bl	8000a10 <TimerCaptureCompare_Callback>
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40012c00 	.word	0x40012c00

08000c14 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	e00a      	b.n	8000c3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c26:	f3af 8000 	nop.w
 8000c2a:	4601      	mov	r1, r0
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	60ba      	str	r2, [r7, #8]
 8000c32:	b2ca      	uxtb	r2, r1
 8000c34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	dbf0      	blt.n	8000c26 <_read+0x12>
  }

  return len;
 8000c44:	687b      	ldr	r3, [r7, #4]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b086      	sub	sp, #24
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	60f8      	str	r0, [r7, #12]
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	e009      	b.n	8000c74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	1c5a      	adds	r2, r3, #1
 8000c64:	60ba      	str	r2, [r7, #8]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fe11 	bl	8000890 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	3301      	adds	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	dbf1      	blt.n	8000c60 <_write+0x12>
  }
  return len;
 8000c7c:	687b      	ldr	r3, [r7, #4]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <_close>:

int _close(int file)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cae:	605a      	str	r2, [r3, #4]
  return 0;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <_isatty>:

int _isatty(int file)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf8:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <_sbrk+0x5c>)
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <_sbrk+0x60>)
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d102      	bne.n	8000d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <_sbrk+0x64>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <_sbrk+0x68>)
 8000d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d207      	bcs.n	8000d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d20:	f004 fd88 	bl	8005834 <__errno>
 8000d24:	4603      	mov	r3, r0
 8000d26:	220c      	movs	r2, #12
 8000d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	e009      	b.n	8000d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <_sbrk+0x64>)
 8000d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d42:	68fb      	ldr	r3, [r7, #12]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20018000 	.word	0x20018000
 8000d50:	00000400 	.word	0x00000400
 8000d54:	20000894 	.word	0x20000894
 8000d58:	20000af8 	.word	0x20000af8

08000d5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4907      	ldr	r1, [pc, #28]	; (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	; (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e1c:	4907      	ldr	r1, [pc, #28]	; (8000e3c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	40021000 	.word	0x40021000

08000e40 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e4a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e4c:	4907      	ldr	r1, [pc, #28]	; (8000e6c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e56:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	40021000 	.word	0x40021000

08000e70 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e7c:	4907      	ldr	r1, [pc, #28]	; (8000e9c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <LL_GPIO_SetPinMode>:
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b08b      	sub	sp, #44	; 0x2c
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa93 f3a3 	rbit	r3, r3
 8000eba:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000ec6:	2320      	movs	r3, #32
 8000ec8:	e003      	b.n	8000ed2 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	fab3 f383 	clz	r3, r3
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	2103      	movs	r1, #3
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	401a      	ands	r2, r3
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee2:	6a3b      	ldr	r3, [r7, #32]
 8000ee4:	fa93 f3a3 	rbit	r3, r3
 8000ee8:	61fb      	str	r3, [r7, #28]
  return result;
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000ef4:	2320      	movs	r3, #32
 8000ef6:	e003      	b.n	8000f00 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efa:	fab3 f383 	clz	r3, r3
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	fa01 f303 	lsl.w	r3, r1, r3
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	601a      	str	r2, [r3, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	372c      	adds	r7, #44	; 0x2c
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <LL_GPIO_SetPinSpeed>:
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b08b      	sub	sp, #44	; 0x2c
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	60f8      	str	r0, [r7, #12]
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	689a      	ldr	r2, [r3, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	fa93 f3a3 	rbit	r3, r3
 8000f34:	613b      	str	r3, [r7, #16]
  return result;
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d101      	bne.n	8000f44 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8000f40:	2320      	movs	r3, #32
 8000f42:	e003      	b.n	8000f4c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	fab3 f383 	clz	r3, r3
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2103      	movs	r1, #3
 8000f50:	fa01 f303 	lsl.w	r3, r1, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	401a      	ands	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5c:	6a3b      	ldr	r3, [r7, #32]
 8000f5e:	fa93 f3a3 	rbit	r3, r3
 8000f62:	61fb      	str	r3, [r7, #28]
  return result;
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8000f6e:	2320      	movs	r3, #32
 8000f70:	e003      	b.n	8000f7a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	fab3 f383 	clz	r3, r3
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	431a      	orrs	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	609a      	str	r2, [r3, #8]
}
 8000f88:	bf00      	nop
 8000f8a:	372c      	adds	r7, #44	; 0x2c
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <LL_GPIO_SetPinPull>:
{
 8000f94:	b480      	push	{r7}
 8000f96:	b08b      	sub	sp, #44	; 0x2c
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa93 f3a3 	rbit	r3, r3
 8000fae:	613b      	str	r3, [r7, #16]
  return result;
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000fba:	2320      	movs	r3, #32
 8000fbc:	e003      	b.n	8000fc6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	fab3 f383 	clz	r3, r3
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	2103      	movs	r1, #3
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	401a      	ands	r2, r3
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd6:	6a3b      	ldr	r3, [r7, #32]
 8000fd8:	fa93 f3a3 	rbit	r3, r3
 8000fdc:	61fb      	str	r3, [r7, #28]
  return result;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d101      	bne.n	8000fec <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000fe8:	2320      	movs	r3, #32
 8000fea:	e003      	b.n	8000ff4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fee:	fab3 f383 	clz	r3, r3
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	60da      	str	r2, [r3, #12]
}
 8001002:	bf00      	nop
 8001004:	372c      	adds	r7, #44	; 0x2c
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <LL_GPIO_SetAFPin_0_7>:
{
 800100e:	b480      	push	{r7}
 8001010:	b08b      	sub	sp, #44	; 0x2c
 8001012:	af00      	add	r7, sp, #0
 8001014:	60f8      	str	r0, [r7, #12]
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	6a1a      	ldr	r2, [r3, #32]
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	fa93 f3a3 	rbit	r3, r3
 8001028:	613b      	str	r3, [r7, #16]
  return result;
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d101      	bne.n	8001038 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001034:	2320      	movs	r3, #32
 8001036:	e003      	b.n	8001040 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fab3 f383 	clz	r3, r3
 800103e:	b2db      	uxtb	r3, r3
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	210f      	movs	r1, #15
 8001044:	fa01 f303 	lsl.w	r3, r1, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	401a      	ands	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001050:	6a3b      	ldr	r3, [r7, #32]
 8001052:	fa93 f3a3 	rbit	r3, r3
 8001056:	61fb      	str	r3, [r7, #28]
  return result;
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001062:	2320      	movs	r3, #32
 8001064:	e003      	b.n	800106e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	fab3 f383 	clz	r3, r3
 800106c:	b2db      	uxtb	r3, r3
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	431a      	orrs	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	621a      	str	r2, [r3, #32]
}
 800107c:	bf00      	nop
 800107e:	372c      	adds	r7, #44	; 0x2c
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <LL_GPIO_SetAFPin_8_15>:
{
 8001088:	b480      	push	{r7}
 800108a:	b08b      	sub	sp, #44	; 0x2c
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	0a1b      	lsrs	r3, r3, #8
 800109c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	fa93 f3a3 	rbit	r3, r3
 80010a4:	613b      	str	r3, [r7, #16]
  return result;
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d101      	bne.n	80010b4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80010b0:	2320      	movs	r3, #32
 80010b2:	e003      	b.n	80010bc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	fab3 f383 	clz	r3, r3
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	210f      	movs	r1, #15
 80010c0:	fa01 f303 	lsl.w	r3, r1, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	401a      	ands	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	0a1b      	lsrs	r3, r3, #8
 80010cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ce:	6a3b      	ldr	r3, [r7, #32]
 80010d0:	fa93 f3a3 	rbit	r3, r3
 80010d4:	61fb      	str	r3, [r7, #28]
  return result;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80010e0:	2320      	movs	r3, #32
 80010e2:	e003      	b.n	80010ec <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	fab3 f383 	clz	r3, r3
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	fa01 f303 	lsl.w	r3, r1, r3
 80010f4:	431a      	orrs	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80010fa:	bf00      	nop
 80010fc:	372c      	adds	r7, #44	; 0x2c
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <LL_TIM_EnableCounter>:
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f043 0201 	orr.w	r2, r3, #1
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	601a      	str	r2, [r3, #0]
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <LL_TIM_EnableARRPreload>:
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	601a      	str	r2, [r3, #0]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <LL_TIM_GetPrescaler>:
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <LL_TIM_SetAutoReload>:
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <LL_TIM_GetAutoReload>:
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->ARR));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <LL_TIM_CC_EnableChannel>:
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a1a      	ldr	r2, [r3, #32]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	431a      	orrs	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	621a      	str	r2, [r3, #32]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <LL_TIM_OC_SetMode>:
{
 80011b4:	b480      	push	{r7}
 80011b6:	b087      	sub	sp, #28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d028      	beq.n	8001218 <LL_TIM_OC_SetMode+0x64>
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	2b04      	cmp	r3, #4
 80011ca:	d023      	beq.n	8001214 <LL_TIM_OC_SetMode+0x60>
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	2b10      	cmp	r3, #16
 80011d0:	d01e      	beq.n	8001210 <LL_TIM_OC_SetMode+0x5c>
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	2b40      	cmp	r3, #64	; 0x40
 80011d6:	d019      	beq.n	800120c <LL_TIM_OC_SetMode+0x58>
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011de:	d013      	beq.n	8001208 <LL_TIM_OC_SetMode+0x54>
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e6:	d00d      	beq.n	8001204 <LL_TIM_OC_SetMode+0x50>
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011ee:	d007      	beq.n	8001200 <LL_TIM_OC_SetMode+0x4c>
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f6:	d101      	bne.n	80011fc <LL_TIM_OC_SetMode+0x48>
 80011f8:	2307      	movs	r3, #7
 80011fa:	e00e      	b.n	800121a <LL_TIM_OC_SetMode+0x66>
 80011fc:	2308      	movs	r3, #8
 80011fe:	e00c      	b.n	800121a <LL_TIM_OC_SetMode+0x66>
 8001200:	2306      	movs	r3, #6
 8001202:	e00a      	b.n	800121a <LL_TIM_OC_SetMode+0x66>
 8001204:	2305      	movs	r3, #5
 8001206:	e008      	b.n	800121a <LL_TIM_OC_SetMode+0x66>
 8001208:	2304      	movs	r3, #4
 800120a:	e006      	b.n	800121a <LL_TIM_OC_SetMode+0x66>
 800120c:	2303      	movs	r3, #3
 800120e:	e004      	b.n	800121a <LL_TIM_OC_SetMode+0x66>
 8001210:	2302      	movs	r3, #2
 8001212:	e002      	b.n	800121a <LL_TIM_OC_SetMode+0x66>
 8001214:	2301      	movs	r3, #1
 8001216:	e000      	b.n	800121a <LL_TIM_OC_SetMode+0x66>
 8001218:	2300      	movs	r3, #0
 800121a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3318      	adds	r3, #24
 8001220:	4619      	mov	r1, r3
 8001222:	7dfb      	ldrb	r3, [r7, #23]
 8001224:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <LL_TIM_OC_SetMode+0xac>)
 8001226:	5cd3      	ldrb	r3, [r2, r3]
 8001228:	440b      	add	r3, r1
 800122a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	7dfb      	ldrb	r3, [r7, #23]
 8001232:	490c      	ldr	r1, [pc, #48]	; (8001264 <LL_TIM_OC_SetMode+0xb0>)
 8001234:	5ccb      	ldrb	r3, [r1, r3]
 8001236:	4619      	mov	r1, r3
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <LL_TIM_OC_SetMode+0xb4>)
 800123a:	408b      	lsls	r3, r1
 800123c:	43db      	mvns	r3, r3
 800123e:	401a      	ands	r2, r3
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	4908      	ldr	r1, [pc, #32]	; (8001264 <LL_TIM_OC_SetMode+0xb0>)
 8001244:	5ccb      	ldrb	r3, [r1, r3]
 8001246:	4619      	mov	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	408b      	lsls	r3, r1
 800124c:	431a      	orrs	r2, r3
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	601a      	str	r2, [r3, #0]
}
 8001252:	bf00      	nop
 8001254:	371c      	adds	r7, #28
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	080061fc 	.word	0x080061fc
 8001264:	08006208 	.word	0x08006208
 8001268:	00010073 	.word	0x00010073

0800126c <LL_TIM_OC_EnablePreload>:
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d028      	beq.n	80012ce <LL_TIM_OC_EnablePreload+0x62>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	2b04      	cmp	r3, #4
 8001280:	d023      	beq.n	80012ca <LL_TIM_OC_EnablePreload+0x5e>
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	2b10      	cmp	r3, #16
 8001286:	d01e      	beq.n	80012c6 <LL_TIM_OC_EnablePreload+0x5a>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b40      	cmp	r3, #64	; 0x40
 800128c:	d019      	beq.n	80012c2 <LL_TIM_OC_EnablePreload+0x56>
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001294:	d013      	beq.n	80012be <LL_TIM_OC_EnablePreload+0x52>
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800129c:	d00d      	beq.n	80012ba <LL_TIM_OC_EnablePreload+0x4e>
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012a4:	d007      	beq.n	80012b6 <LL_TIM_OC_EnablePreload+0x4a>
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ac:	d101      	bne.n	80012b2 <LL_TIM_OC_EnablePreload+0x46>
 80012ae:	2307      	movs	r3, #7
 80012b0:	e00e      	b.n	80012d0 <LL_TIM_OC_EnablePreload+0x64>
 80012b2:	2308      	movs	r3, #8
 80012b4:	e00c      	b.n	80012d0 <LL_TIM_OC_EnablePreload+0x64>
 80012b6:	2306      	movs	r3, #6
 80012b8:	e00a      	b.n	80012d0 <LL_TIM_OC_EnablePreload+0x64>
 80012ba:	2305      	movs	r3, #5
 80012bc:	e008      	b.n	80012d0 <LL_TIM_OC_EnablePreload+0x64>
 80012be:	2304      	movs	r3, #4
 80012c0:	e006      	b.n	80012d0 <LL_TIM_OC_EnablePreload+0x64>
 80012c2:	2303      	movs	r3, #3
 80012c4:	e004      	b.n	80012d0 <LL_TIM_OC_EnablePreload+0x64>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e002      	b.n	80012d0 <LL_TIM_OC_EnablePreload+0x64>
 80012ca:	2301      	movs	r3, #1
 80012cc:	e000      	b.n	80012d0 <LL_TIM_OC_EnablePreload+0x64>
 80012ce:	2300      	movs	r3, #0
 80012d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3318      	adds	r3, #24
 80012d6:	4619      	mov	r1, r3
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <LL_TIM_OC_EnablePreload+0x98>)
 80012dc:	5cd3      	ldrb	r3, [r2, r3]
 80012de:	440b      	add	r3, r1
 80012e0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	4907      	ldr	r1, [pc, #28]	; (8001308 <LL_TIM_OC_EnablePreload+0x9c>)
 80012ea:	5ccb      	ldrb	r3, [r1, r3]
 80012ec:	4619      	mov	r1, r3
 80012ee:	2308      	movs	r3, #8
 80012f0:	408b      	lsls	r3, r1
 80012f2:	431a      	orrs	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	601a      	str	r2, [r3, #0]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	080061fc 	.word	0x080061fc
 8001308:	08006208 	.word	0x08006208

0800130c <LL_TIM_OC_SetCompareCH1>:
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <LL_TIM_IC_SetActiveInput>:
{
 8001328:	b480      	push	{r7}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d028      	beq.n	800138c <LL_TIM_IC_SetActiveInput+0x64>
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	2b04      	cmp	r3, #4
 800133e:	d023      	beq.n	8001388 <LL_TIM_IC_SetActiveInput+0x60>
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	2b10      	cmp	r3, #16
 8001344:	d01e      	beq.n	8001384 <LL_TIM_IC_SetActiveInput+0x5c>
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	2b40      	cmp	r3, #64	; 0x40
 800134a:	d019      	beq.n	8001380 <LL_TIM_IC_SetActiveInput+0x58>
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001352:	d013      	beq.n	800137c <LL_TIM_IC_SetActiveInput+0x54>
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800135a:	d00d      	beq.n	8001378 <LL_TIM_IC_SetActiveInput+0x50>
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001362:	d007      	beq.n	8001374 <LL_TIM_IC_SetActiveInput+0x4c>
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136a:	d101      	bne.n	8001370 <LL_TIM_IC_SetActiveInput+0x48>
 800136c:	2307      	movs	r3, #7
 800136e:	e00e      	b.n	800138e <LL_TIM_IC_SetActiveInput+0x66>
 8001370:	2308      	movs	r3, #8
 8001372:	e00c      	b.n	800138e <LL_TIM_IC_SetActiveInput+0x66>
 8001374:	2306      	movs	r3, #6
 8001376:	e00a      	b.n	800138e <LL_TIM_IC_SetActiveInput+0x66>
 8001378:	2305      	movs	r3, #5
 800137a:	e008      	b.n	800138e <LL_TIM_IC_SetActiveInput+0x66>
 800137c:	2304      	movs	r3, #4
 800137e:	e006      	b.n	800138e <LL_TIM_IC_SetActiveInput+0x66>
 8001380:	2303      	movs	r3, #3
 8001382:	e004      	b.n	800138e <LL_TIM_IC_SetActiveInput+0x66>
 8001384:	2302      	movs	r3, #2
 8001386:	e002      	b.n	800138e <LL_TIM_IC_SetActiveInput+0x66>
 8001388:	2301      	movs	r3, #1
 800138a:	e000      	b.n	800138e <LL_TIM_IC_SetActiveInput+0x66>
 800138c:	2300      	movs	r3, #0
 800138e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	3318      	adds	r3, #24
 8001394:	4619      	mov	r1, r3
 8001396:	7dfb      	ldrb	r3, [r7, #23]
 8001398:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <LL_TIM_IC_SetActiveInput+0xac>)
 800139a:	5cd3      	ldrb	r3, [r2, r3]
 800139c:	440b      	add	r3, r1
 800139e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_CC1S) << SHIFT_TAB_ICxx[iChannel]), (ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
 80013a6:	490c      	ldr	r1, [pc, #48]	; (80013d8 <LL_TIM_IC_SetActiveInput+0xb0>)
 80013a8:	5ccb      	ldrb	r3, [r1, r3]
 80013aa:	4619      	mov	r1, r3
 80013ac:	2303      	movs	r3, #3
 80013ae:	408b      	lsls	r3, r1
 80013b0:	43db      	mvns	r3, r3
 80013b2:	401a      	ands	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	0c1b      	lsrs	r3, r3, #16
 80013b8:	7df9      	ldrb	r1, [r7, #23]
 80013ba:	4807      	ldr	r0, [pc, #28]	; (80013d8 <LL_TIM_IC_SetActiveInput+0xb0>)
 80013bc:	5c41      	ldrb	r1, [r0, r1]
 80013be:	408b      	lsls	r3, r1
 80013c0:	431a      	orrs	r2, r3
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	601a      	str	r2, [r3, #0]
}
 80013c6:	bf00      	nop
 80013c8:	371c      	adds	r7, #28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	080061fc 	.word	0x080061fc
 80013d8:	08006214 	.word	0x08006214

080013dc <LL_TIM_IC_SetPrescaler>:
{
 80013dc:	b480      	push	{r7}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d028      	beq.n	8001440 <LL_TIM_IC_SetPrescaler+0x64>
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d023      	beq.n	800143c <LL_TIM_IC_SetPrescaler+0x60>
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	2b10      	cmp	r3, #16
 80013f8:	d01e      	beq.n	8001438 <LL_TIM_IC_SetPrescaler+0x5c>
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	2b40      	cmp	r3, #64	; 0x40
 80013fe:	d019      	beq.n	8001434 <LL_TIM_IC_SetPrescaler+0x58>
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001406:	d013      	beq.n	8001430 <LL_TIM_IC_SetPrescaler+0x54>
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800140e:	d00d      	beq.n	800142c <LL_TIM_IC_SetPrescaler+0x50>
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001416:	d007      	beq.n	8001428 <LL_TIM_IC_SetPrescaler+0x4c>
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800141e:	d101      	bne.n	8001424 <LL_TIM_IC_SetPrescaler+0x48>
 8001420:	2307      	movs	r3, #7
 8001422:	e00e      	b.n	8001442 <LL_TIM_IC_SetPrescaler+0x66>
 8001424:	2308      	movs	r3, #8
 8001426:	e00c      	b.n	8001442 <LL_TIM_IC_SetPrescaler+0x66>
 8001428:	2306      	movs	r3, #6
 800142a:	e00a      	b.n	8001442 <LL_TIM_IC_SetPrescaler+0x66>
 800142c:	2305      	movs	r3, #5
 800142e:	e008      	b.n	8001442 <LL_TIM_IC_SetPrescaler+0x66>
 8001430:	2304      	movs	r3, #4
 8001432:	e006      	b.n	8001442 <LL_TIM_IC_SetPrescaler+0x66>
 8001434:	2303      	movs	r3, #3
 8001436:	e004      	b.n	8001442 <LL_TIM_IC_SetPrescaler+0x66>
 8001438:	2302      	movs	r3, #2
 800143a:	e002      	b.n	8001442 <LL_TIM_IC_SetPrescaler+0x66>
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <LL_TIM_IC_SetPrescaler+0x66>
 8001440:	2300      	movs	r3, #0
 8001442:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	3318      	adds	r3, #24
 8001448:	4619      	mov	r1, r3
 800144a:	7dfb      	ldrb	r3, [r7, #23]
 800144c:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <LL_TIM_IC_SetPrescaler+0xac>)
 800144e:	5cd3      	ldrb	r3, [r2, r3]
 8001450:	440b      	add	r3, r1
 8001452:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1PSC) << SHIFT_TAB_ICxx[iChannel]), (ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	7dfb      	ldrb	r3, [r7, #23]
 800145a:	490c      	ldr	r1, [pc, #48]	; (800148c <LL_TIM_IC_SetPrescaler+0xb0>)
 800145c:	5ccb      	ldrb	r3, [r1, r3]
 800145e:	4619      	mov	r1, r3
 8001460:	230c      	movs	r3, #12
 8001462:	408b      	lsls	r3, r1
 8001464:	43db      	mvns	r3, r3
 8001466:	401a      	ands	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	0c1b      	lsrs	r3, r3, #16
 800146c:	7df9      	ldrb	r1, [r7, #23]
 800146e:	4807      	ldr	r0, [pc, #28]	; (800148c <LL_TIM_IC_SetPrescaler+0xb0>)
 8001470:	5c41      	ldrb	r1, [r0, r1]
 8001472:	408b      	lsls	r3, r1
 8001474:	431a      	orrs	r2, r3
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	601a      	str	r2, [r3, #0]
}
 800147a:	bf00      	nop
 800147c:	371c      	adds	r7, #28
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	080061fc 	.word	0x080061fc
 800148c:	08006214 	.word	0x08006214

08001490 <LL_TIM_IC_SetFilter>:
{
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d028      	beq.n	80014f4 <LL_TIM_IC_SetFilter+0x64>
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d023      	beq.n	80014f0 <LL_TIM_IC_SetFilter+0x60>
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	2b10      	cmp	r3, #16
 80014ac:	d01e      	beq.n	80014ec <LL_TIM_IC_SetFilter+0x5c>
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	2b40      	cmp	r3, #64	; 0x40
 80014b2:	d019      	beq.n	80014e8 <LL_TIM_IC_SetFilter+0x58>
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014ba:	d013      	beq.n	80014e4 <LL_TIM_IC_SetFilter+0x54>
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c2:	d00d      	beq.n	80014e0 <LL_TIM_IC_SetFilter+0x50>
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014ca:	d007      	beq.n	80014dc <LL_TIM_IC_SetFilter+0x4c>
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d2:	d101      	bne.n	80014d8 <LL_TIM_IC_SetFilter+0x48>
 80014d4:	2307      	movs	r3, #7
 80014d6:	e00e      	b.n	80014f6 <LL_TIM_IC_SetFilter+0x66>
 80014d8:	2308      	movs	r3, #8
 80014da:	e00c      	b.n	80014f6 <LL_TIM_IC_SetFilter+0x66>
 80014dc:	2306      	movs	r3, #6
 80014de:	e00a      	b.n	80014f6 <LL_TIM_IC_SetFilter+0x66>
 80014e0:	2305      	movs	r3, #5
 80014e2:	e008      	b.n	80014f6 <LL_TIM_IC_SetFilter+0x66>
 80014e4:	2304      	movs	r3, #4
 80014e6:	e006      	b.n	80014f6 <LL_TIM_IC_SetFilter+0x66>
 80014e8:	2303      	movs	r3, #3
 80014ea:	e004      	b.n	80014f6 <LL_TIM_IC_SetFilter+0x66>
 80014ec:	2302      	movs	r3, #2
 80014ee:	e002      	b.n	80014f6 <LL_TIM_IC_SetFilter+0x66>
 80014f0:	2301      	movs	r3, #1
 80014f2:	e000      	b.n	80014f6 <LL_TIM_IC_SetFilter+0x66>
 80014f4:	2300      	movs	r3, #0
 80014f6:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3318      	adds	r3, #24
 80014fc:	4619      	mov	r1, r3
 80014fe:	7dfb      	ldrb	r3, [r7, #23]
 8001500:	4a0e      	ldr	r2, [pc, #56]	; (800153c <LL_TIM_IC_SetFilter+0xac>)
 8001502:	5cd3      	ldrb	r3, [r2, r3]
 8001504:	440b      	add	r3, r1
 8001506:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	7dfb      	ldrb	r3, [r7, #23]
 800150e:	490c      	ldr	r1, [pc, #48]	; (8001540 <LL_TIM_IC_SetFilter+0xb0>)
 8001510:	5ccb      	ldrb	r3, [r1, r3]
 8001512:	4619      	mov	r1, r3
 8001514:	23f0      	movs	r3, #240	; 0xf0
 8001516:	408b      	lsls	r3, r1
 8001518:	43db      	mvns	r3, r3
 800151a:	401a      	ands	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	0c1b      	lsrs	r3, r3, #16
 8001520:	7df9      	ldrb	r1, [r7, #23]
 8001522:	4807      	ldr	r0, [pc, #28]	; (8001540 <LL_TIM_IC_SetFilter+0xb0>)
 8001524:	5c41      	ldrb	r1, [r0, r1]
 8001526:	408b      	lsls	r3, r1
 8001528:	431a      	orrs	r2, r3
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	601a      	str	r2, [r3, #0]
}
 800152e:	bf00      	nop
 8001530:	371c      	adds	r7, #28
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	080061fc 	.word	0x080061fc
 8001540:	08006214 	.word	0x08006214

08001544 <LL_TIM_IC_SetPolarity>:
{
 8001544:	b480      	push	{r7}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d028      	beq.n	80015a8 <LL_TIM_IC_SetPolarity+0x64>
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	2b04      	cmp	r3, #4
 800155a:	d023      	beq.n	80015a4 <LL_TIM_IC_SetPolarity+0x60>
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	2b10      	cmp	r3, #16
 8001560:	d01e      	beq.n	80015a0 <LL_TIM_IC_SetPolarity+0x5c>
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	2b40      	cmp	r3, #64	; 0x40
 8001566:	d019      	beq.n	800159c <LL_TIM_IC_SetPolarity+0x58>
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800156e:	d013      	beq.n	8001598 <LL_TIM_IC_SetPolarity+0x54>
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001576:	d00d      	beq.n	8001594 <LL_TIM_IC_SetPolarity+0x50>
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800157e:	d007      	beq.n	8001590 <LL_TIM_IC_SetPolarity+0x4c>
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001586:	d101      	bne.n	800158c <LL_TIM_IC_SetPolarity+0x48>
 8001588:	2307      	movs	r3, #7
 800158a:	e00e      	b.n	80015aa <LL_TIM_IC_SetPolarity+0x66>
 800158c:	2308      	movs	r3, #8
 800158e:	e00c      	b.n	80015aa <LL_TIM_IC_SetPolarity+0x66>
 8001590:	2306      	movs	r3, #6
 8001592:	e00a      	b.n	80015aa <LL_TIM_IC_SetPolarity+0x66>
 8001594:	2305      	movs	r3, #5
 8001596:	e008      	b.n	80015aa <LL_TIM_IC_SetPolarity+0x66>
 8001598:	2304      	movs	r3, #4
 800159a:	e006      	b.n	80015aa <LL_TIM_IC_SetPolarity+0x66>
 800159c:	2303      	movs	r3, #3
 800159e:	e004      	b.n	80015aa <LL_TIM_IC_SetPolarity+0x66>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e002      	b.n	80015aa <LL_TIM_IC_SetPolarity+0x66>
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <LL_TIM_IC_SetPolarity+0x66>
 80015a8:	2300      	movs	r3, #0
 80015aa:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, ((TIM_CCER_CC1NP | TIM_CCER_CC1P) << SHIFT_TAB_CCxP[iChannel]),
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6a1a      	ldr	r2, [r3, #32]
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	490b      	ldr	r1, [pc, #44]	; (80015e0 <LL_TIM_IC_SetPolarity+0x9c>)
 80015b4:	5ccb      	ldrb	r3, [r1, r3]
 80015b6:	4619      	mov	r1, r3
 80015b8:	230a      	movs	r3, #10
 80015ba:	408b      	lsls	r3, r1
 80015bc:	43db      	mvns	r3, r3
 80015be:	401a      	ands	r2, r3
 80015c0:	7dfb      	ldrb	r3, [r7, #23]
 80015c2:	4907      	ldr	r1, [pc, #28]	; (80015e0 <LL_TIM_IC_SetPolarity+0x9c>)
 80015c4:	5ccb      	ldrb	r3, [r1, r3]
 80015c6:	4619      	mov	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	408b      	lsls	r3, r1
 80015cc:	431a      	orrs	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	621a      	str	r2, [r3, #32]
}
 80015d2:	bf00      	nop
 80015d4:	371c      	adds	r7, #28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	08006220 	.word	0x08006220

080015e4 <LL_TIM_EnableIT_CC1>:
  * @rmtoll DIER         CC1IE         LL_TIM_EnableIT_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	f043 0202 	orr.w	r2, r3, #2
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	60da      	str	r2, [r3, #12]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	f043 0201 	orr.w	r2, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	615a      	str	r2, [r3, #20]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <Configure_TIMInputCapture>:
  *         commented examples - setting is default configuration from reset.
  * @param  None
  * @retval None
  */
void Configure_TIMInputCapture(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /*************************/
  /* GPIO AF configuration */
  /*************************/
  /* Enable the peripheral clock of GPIOs */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001628:	2001      	movs	r0, #1
 800162a:	f7ff fbf1 	bl	8000e10 <LL_AHB2_GRP1_EnableClock>

  /* GPIO TIM1_CH1 configuration */
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_8, LL_GPIO_MODE_ALTERNATE);
 800162e:	2202      	movs	r2, #2
 8001630:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001638:	f7ff fc32 	bl	8000ea0 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_8, LL_GPIO_PULL_DOWN);
 800163c:	2202      	movs	r2, #2
 800163e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001646:	f7ff fca5 	bl	8000f94 <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_8, LL_GPIO_SPEED_FREQ_HIGH);
 800164a:	2202      	movs	r2, #2
 800164c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001654:	f7ff fc61 	bl	8000f1a <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetAFPin_8_15(GPIOA, LL_GPIO_PIN_8, LL_GPIO_AF_1);
 8001658:	2201      	movs	r2, #1
 800165a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800165e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001662:	f7ff fd11 	bl	8001088 <LL_GPIO_SetAFPin_8_15>

  /***************************************************************/
  /* Configure the NVIC to handle TIM1 capture/compare interrupt */
  /***************************************************************/
  NVIC_SetPriority(TIM1_CC_IRQn, 0);
 8001666:	2100      	movs	r1, #0
 8001668:	201b      	movs	r0, #27
 800166a:	f7ff fba7 	bl	8000dbc <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_CC_IRQn);
 800166e:	201b      	movs	r0, #27
 8001670:	f7ff fb86 	bl	8000d80 <__NVIC_EnableIRQ>

  /******************************/
  /* Peripheral clocks enabling */
  /******************************/
  /* Enable the timer peripheral clock */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001674:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001678:	f7ff fbfa 	bl	8000e70 <LL_APB2_GRP1_EnableClock>

  /************************************/
  /* Input capture mode configuration */
  /************************************/
  /* Select the active input: IC1 = TI1FP1 */
  LL_TIM_IC_SetActiveInput(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_ACTIVEINPUT_DIRECTTI);
 800167c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001680:	2101      	movs	r1, #1
 8001682:	480f      	ldr	r0, [pc, #60]	; (80016c0 <Configure_TIMInputCapture+0x9c>)
 8001684:	f7ff fe50 	bl	8001328 <LL_TIM_IC_SetActiveInput>

  /* Configure the input filter duration: no filter needed */
  LL_TIM_IC_SetFilter(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_IC_FILTER_FDIV1);
 8001688:	2200      	movs	r2, #0
 800168a:	2101      	movs	r1, #1
 800168c:	480c      	ldr	r0, [pc, #48]	; (80016c0 <Configure_TIMInputCapture+0x9c>)
 800168e:	f7ff feff 	bl	8001490 <LL_TIM_IC_SetFilter>

  /* Set input prescaler: prescaler is disabled */
  LL_TIM_IC_SetPrescaler(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_ICPSC_DIV1);
 8001692:	2200      	movs	r2, #0
 8001694:	2101      	movs	r1, #1
 8001696:	480a      	ldr	r0, [pc, #40]	; (80016c0 <Configure_TIMInputCapture+0x9c>)
 8001698:	f7ff fea0 	bl	80013dc <LL_TIM_IC_SetPrescaler>

  /* Select the edge of the active transition on the TI1 channel: rising and falling edge */
  LL_TIM_IC_SetPolarity(TIM1, LL_TIM_CHANNEL_CH1, LL_TIM_IC_POLARITY_RISING);
 800169c:	2200      	movs	r2, #0
 800169e:	2101      	movs	r1, #1
 80016a0:	4807      	ldr	r0, [pc, #28]	; (80016c0 <Configure_TIMInputCapture+0x9c>)
 80016a2:	f7ff ff4f 	bl	8001544 <LL_TIM_IC_SetPolarity>

  /**************************/
  /* TIM1 interrupts set-up */
  /**************************/
  /* Enable the capture/compare interrupt for channel 1 */
  LL_TIM_EnableIT_CC1(TIM1);
 80016a6:	4806      	ldr	r0, [pc, #24]	; (80016c0 <Configure_TIMInputCapture+0x9c>)
 80016a8:	f7ff ff9c 	bl	80015e4 <LL_TIM_EnableIT_CC1>

  /***********************/
  /* Start input capture */
  /***********************/
  /* Enable output channel 1 */
  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 80016ac:	2101      	movs	r1, #1
 80016ae:	4804      	ldr	r0, [pc, #16]	; (80016c0 <Configure_TIMInputCapture+0x9c>)
 80016b0:	f7ff fd6f 	bl	8001192 <LL_TIM_CC_EnableChannel>

  /* Enable counter */
  LL_TIM_EnableCounter(TIM1);
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <Configure_TIMInputCapture+0x9c>)
 80016b6:	f7ff fd26 	bl	8001106 <LL_TIM_EnableCounter>
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40012c00 	.word	0x40012c00

080016c4 <Configure_TIMPWMOutput>:
  *         commented examples - setting is default configuration from reset.
  * @param  None
  * @retval None
  */
void  Configure_TIMPWMOutput(void)
{
 80016c4:	b598      	push	{r3, r4, r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /*************************/
  /* GPIO AF configuration */
  /*************************/
  /* Enable the peripheral clock of GPIOs */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80016c8:	2001      	movs	r0, #1
 80016ca:	f7ff fba1 	bl	8000e10 <LL_AHB2_GRP1_EnableClock>

  /* GPIO TIM2_CH1 configuration */
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_0, LL_GPIO_MODE_ALTERNATE);
 80016ce:	2202      	movs	r2, #2
 80016d0:	2101      	movs	r1, #1
 80016d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d6:	f7ff fbe3 	bl	8000ea0 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_0, LL_GPIO_PULL_DOWN);
 80016da:	2202      	movs	r2, #2
 80016dc:	2101      	movs	r1, #1
 80016de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e2:	f7ff fc57 	bl	8000f94 <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_0, LL_GPIO_SPEED_FREQ_HIGH);
 80016e6:	2202      	movs	r2, #2
 80016e8:	2101      	movs	r1, #1
 80016ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ee:	f7ff fc14 	bl	8000f1a <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetAFPin_0_7(GPIOA, LL_GPIO_PIN_0, LL_GPIO_AF_1);
 80016f2:	2201      	movs	r2, #1
 80016f4:	2101      	movs	r1, #1
 80016f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fa:	f7ff fc88 	bl	800100e <LL_GPIO_SetAFPin_0_7>

  /******************************/
  /* Peripheral clocks enabling */
  /******************************/
  /* Enable the timer peripheral clock */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80016fe:	2001      	movs	r0, #1
 8001700:	f7ff fb9e 	bl	8000e40 <LL_APB1_GRP1_EnableClock>

  /* Enable TIM2_ARR register preload. Writing to or reading from the         */
  /* auto-reload register accesses the preload register. The content of the   */
  /* preload register are transferred into the shadow register at each update */
  /* event (UEV).                                                             */
  LL_TIM_EnableARRPreload(TIM2);
 8001704:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001708:	f7ff fd0d 	bl	8001126 <LL_TIM_EnableARRPreload>

  /* Set the auto-reload value to have a counter frequency of 20 kHz           */
  /* TIM2CLK = SystemCoreClock / (APB prescaler & multiplier)                 */
  TimOutClock = SystemCoreClock/1;
 800170c:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <Configure_TIMPWMOutput+0xe0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a25      	ldr	r2, [pc, #148]	; (80017a8 <Configure_TIMPWMOutput+0xe4>)
 8001712:	6013      	str	r3, [r2, #0]
  /* TIM2 counter frequency = TimOutClock / (ARR + 1)                   */
  LL_TIM_SetAutoReload(TIM2, __LL_TIM_CALC_ARR(TimOutClock, LL_TIM_GetPrescaler(TIM2), PWM_FREQUENCY));
 8001714:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <Configure_TIMPWMOutput+0xe4>)
 8001716:	681c      	ldr	r4, [r3, #0]
 8001718:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800171c:	f7ff fd13 	bl	8001146 <LL_TIM_GetPrescaler>
 8001720:	4603      	mov	r3, r0
 8001722:	3301      	adds	r3, #1
 8001724:	fbb4 f3f3 	udiv	r3, r4, r3
 8001728:	2b01      	cmp	r3, #1
 800172a:	d90c      	bls.n	8001746 <Configure_TIMPWMOutput+0x82>
 800172c:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <Configure_TIMPWMOutput+0xe4>)
 800172e:	681c      	ldr	r4, [r3, #0]
 8001730:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001734:	f7ff fd07 	bl	8001146 <LL_TIM_GetPrescaler>
 8001738:	4603      	mov	r3, r0
 800173a:	3301      	adds	r3, #1
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	fbb4 f3f3 	udiv	r3, r4, r3
 8001742:	3b01      	subs	r3, #1
 8001744:	e000      	b.n	8001748 <Configure_TIMPWMOutput+0x84>
 8001746:	2300      	movs	r3, #0
 8001748:	4619      	mov	r1, r3
 800174a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800174e:	f7ff fd06 	bl	800115e <LL_TIM_SetAutoReload>

  /*********************************/
  /* Output waveform configuration */
  /*********************************/
  /* Set output mode: PWM mode 1 */
  LL_TIM_OC_SetMode(TIM2, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1);
 8001752:	2260      	movs	r2, #96	; 0x60
 8001754:	2101      	movs	r1, #1
 8001756:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800175a:	f7ff fd2b 	bl	80011b4 <LL_TIM_OC_SetMode>

  /* Set compare value to half of the counter period (20% duty cycle )*/
  LL_TIM_OC_SetCompareCH1(TIM2, (LL_TIM_GetAutoReload(TIM2) / 5));
 800175e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001762:	f7ff fd0a 	bl	800117a <LL_TIM_GetAutoReload>
 8001766:	4603      	mov	r3, r0
 8001768:	4a10      	ldr	r2, [pc, #64]	; (80017ac <Configure_TIMPWMOutput+0xe8>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	089b      	lsrs	r3, r3, #2
 8001770:	4619      	mov	r1, r3
 8001772:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001776:	f7ff fdc9 	bl	800130c <LL_TIM_OC_SetCompareCH1>

  /* Enable TIM2_CCR1 register preload. Read/Write operations access the      */
  /* preload register. TIM2_CCR1 preload value is loaded in the active        */
  /* at each update event.                                                    */
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 800177a:	2101      	movs	r1, #1
 800177c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001780:	f7ff fd74 	bl	800126c <LL_TIM_OC_EnablePreload>

  /**********************************/
  /* Start output signal generation */
  /**********************************/
  /* Enable output channel 1 */
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8001784:	2101      	movs	r1, #1
 8001786:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800178a:	f7ff fd02 	bl	8001192 <LL_TIM_CC_EnableChannel>

  /* Enable counter */
  LL_TIM_EnableCounter(TIM2);
 800178e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001792:	f7ff fcb8 	bl	8001106 <LL_TIM_EnableCounter>

  /* Force update generation */
  LL_TIM_GenerateEvent_UPDATE(TIM2);
 8001796:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800179a:	f7ff ff33 	bl	8001604 <LL_TIM_GenerateEvent_UPDATE>
}
 800179e:	bf00      	nop
 80017a0:	bd98      	pop	{r3, r4, r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000004 	.word	0x20000004
 80017ac:	cccccccd 	.word	0xcccccccd

080017b0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <MX_USART2_UART_Init+0x58>)
 80017b6:	4a15      	ldr	r2, [pc, #84]	; (800180c <MX_USART2_UART_Init+0x5c>)
 80017b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <MX_USART2_UART_Init+0x58>)
 80017bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_USART2_UART_Init+0x58>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_USART2_UART_Init+0x58>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_USART2_UART_Init+0x58>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_USART2_UART_Init+0x58>)
 80017d6:	220c      	movs	r2, #12
 80017d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <MX_USART2_UART_Init+0x58>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_USART2_UART_Init+0x58>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <MX_USART2_UART_Init+0x58>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_USART2_UART_Init+0x58>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_USART2_UART_Init+0x58>)
 80017f4:	f002 f868 	bl	80038c8 <HAL_UART_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017fe:	f7ff f965 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000898 	.word	0x20000898
 800180c:	40004400 	.word	0x40004400

08001810 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001814:	4b14      	ldr	r3, [pc, #80]	; (8001868 <MX_USART3_UART_Init+0x58>)
 8001816:	4a15      	ldr	r2, [pc, #84]	; (800186c <MX_USART3_UART_Init+0x5c>)
 8001818:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800181a:	4b13      	ldr	r3, [pc, #76]	; (8001868 <MX_USART3_UART_Init+0x58>)
 800181c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001820:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <MX_USART3_UART_Init+0x58>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <MX_USART3_UART_Init+0x58>)
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <MX_USART3_UART_Init+0x58>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <MX_USART3_UART_Init+0x58>)
 8001836:	220c      	movs	r2, #12
 8001838:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <MX_USART3_UART_Init+0x58>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001840:	4b09      	ldr	r3, [pc, #36]	; (8001868 <MX_USART3_UART_Init+0x58>)
 8001842:	2200      	movs	r2, #0
 8001844:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <MX_USART3_UART_Init+0x58>)
 8001848:	2200      	movs	r2, #0
 800184a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <MX_USART3_UART_Init+0x58>)
 800184e:	2200      	movs	r2, #0
 8001850:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <MX_USART3_UART_Init+0x58>)
 8001854:	f002 f838 	bl	80038c8 <HAL_UART_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800185e:	f7ff f935 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000920 	.word	0x20000920
 800186c:	40004800 	.word	0x40004800

08001870 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b0ae      	sub	sp, #184	; 0xb8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	2288      	movs	r2, #136	; 0x88
 800188e:	2100      	movs	r1, #0
 8001890:	4618      	mov	r0, r3
 8001892:	f003 ff6b 	bl	800576c <memset>
  if(uartHandle->Instance==USART2)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a4a      	ldr	r2, [pc, #296]	; (80019c4 <HAL_UART_MspInit+0x154>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d144      	bne.n	800192a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018a0:	2302      	movs	r3, #2
 80018a2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018a4:	2300      	movs	r3, #0
 80018a6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	4618      	mov	r0, r3
 80018ae:	f001 fb4f 	bl	8002f50 <HAL_RCCEx_PeriphCLKConfig>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018b8:	f7ff f908 	bl	8000acc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018bc:	4b42      	ldr	r3, [pc, #264]	; (80019c8 <HAL_UART_MspInit+0x158>)
 80018be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c0:	4a41      	ldr	r2, [pc, #260]	; (80019c8 <HAL_UART_MspInit+0x158>)
 80018c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c6:	6593      	str	r3, [r2, #88]	; 0x58
 80018c8:	4b3f      	ldr	r3, [pc, #252]	; (80019c8 <HAL_UART_MspInit+0x158>)
 80018ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d4:	4b3c      	ldr	r3, [pc, #240]	; (80019c8 <HAL_UART_MspInit+0x158>)
 80018d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d8:	4a3b      	ldr	r2, [pc, #236]	; (80019c8 <HAL_UART_MspInit+0x158>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e0:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <HAL_UART_MspInit+0x158>)
 80018e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018ec:	230c      	movs	r3, #12
 80018ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fe:	2303      	movs	r3, #3
 8001900:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001904:	2307      	movs	r3, #7
 8001906:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800190e:	4619      	mov	r1, r3
 8001910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001914:	f000 fab8 	bl	8001e88 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	2100      	movs	r1, #0
 800191c:	2026      	movs	r0, #38	; 0x26
 800191e:	f000 f9fe 	bl	8001d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001922:	2026      	movs	r0, #38	; 0x26
 8001924:	f000 fa17 	bl	8001d56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001928:	e047      	b.n	80019ba <HAL_UART_MspInit+0x14a>
  else if(uartHandle->Instance==USART3)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a27      	ldr	r2, [pc, #156]	; (80019cc <HAL_UART_MspInit+0x15c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d142      	bne.n	80019ba <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001934:	2304      	movs	r3, #4
 8001936:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001938:	2300      	movs	r3, #0
 800193a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800193c:	f107 031c 	add.w	r3, r7, #28
 8001940:	4618      	mov	r0, r3
 8001942:	f001 fb05 	bl	8002f50 <HAL_RCCEx_PeriphCLKConfig>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 800194c:	f7ff f8be 	bl	8000acc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001950:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <HAL_UART_MspInit+0x158>)
 8001952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001954:	4a1c      	ldr	r2, [pc, #112]	; (80019c8 <HAL_UART_MspInit+0x158>)
 8001956:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800195a:	6593      	str	r3, [r2, #88]	; 0x58
 800195c:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <HAL_UART_MspInit+0x158>)
 800195e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001960:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001968:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <HAL_UART_MspInit+0x158>)
 800196a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196c:	4a16      	ldr	r2, [pc, #88]	; (80019c8 <HAL_UART_MspInit+0x158>)
 800196e:	f043 0304 	orr.w	r3, r3, #4
 8001972:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <HAL_UART_MspInit+0x158>)
 8001976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001980:	2330      	movs	r3, #48	; 0x30
 8001982:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001992:	2303      	movs	r3, #3
 8001994:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001998:	2307      	movs	r3, #7
 800199a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019a2:	4619      	mov	r1, r3
 80019a4:	480a      	ldr	r0, [pc, #40]	; (80019d0 <HAL_UART_MspInit+0x160>)
 80019a6:	f000 fa6f 	bl	8001e88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2100      	movs	r1, #0
 80019ae:	2027      	movs	r0, #39	; 0x27
 80019b0:	f000 f9b5 	bl	8001d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019b4:	2027      	movs	r0, #39	; 0x27
 80019b6:	f000 f9ce 	bl	8001d56 <HAL_NVIC_EnableIRQ>
}
 80019ba:	bf00      	nop
 80019bc:	37b8      	adds	r7, #184	; 0xb8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40004400 	.word	0x40004400
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40004800 	.word	0x40004800
 80019d0:	48000800 	.word	0x48000800

080019d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019d8:	f7ff f9c0 	bl	8000d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019dc:	480c      	ldr	r0, [pc, #48]	; (8001a10 <LoopForever+0x6>)
  ldr r1, =_edata
 80019de:	490d      	ldr	r1, [pc, #52]	; (8001a14 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019e0:	4a0d      	ldr	r2, [pc, #52]	; (8001a18 <LoopForever+0xe>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e4:	e002      	b.n	80019ec <LoopCopyDataInit>

080019e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ea:	3304      	adds	r3, #4

080019ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f0:	d3f9      	bcc.n	80019e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <LoopForever+0x12>)
  ldr r4, =_ebss
 80019f4:	4c0a      	ldr	r4, [pc, #40]	; (8001a20 <LoopForever+0x16>)
  movs r3, #0
 80019f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f8:	e001      	b.n	80019fe <LoopFillZerobss>

080019fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019fc:	3204      	adds	r2, #4

080019fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a00:	d3fb      	bcc.n	80019fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a02:	f003 ff1d 	bl	8005840 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a06:	f7fe fe89 	bl	800071c <main>

08001a0a <LoopForever>:

LoopForever:
    b LoopForever
 8001a0a:	e7fe      	b.n	8001a0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a14:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001a18:	0800626c 	.word	0x0800626c
  ldr r2, =_sbss
 8001a1c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001a20:	20000af8 	.word	0x20000af8

08001a24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a24:	e7fe      	b.n	8001a24 <ADC1_2_IRQHandler>
	...

08001a28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a32:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <HAL_Init+0x3c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a0b      	ldr	r2, [pc, #44]	; (8001a64 <HAL_Init+0x3c>)
 8001a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a3e:	2003      	movs	r0, #3
 8001a40:	f000 f962 	bl	8001d08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a44:	2000      	movs	r0, #0
 8001a46:	f000 f80f 	bl	8001a68 <HAL_InitTick>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d002      	beq.n	8001a56 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	71fb      	strb	r3, [r7, #7]
 8001a54:	e001      	b.n	8001a5a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a56:	f7ff f83f 	bl	8000ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40022000 	.word	0x40022000

08001a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <HAL_InitTick+0x6c>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d023      	beq.n	8001ac4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a7c:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <HAL_InitTick+0x70>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <HAL_InitTick+0x6c>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	4619      	mov	r1, r3
 8001a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 f96d 	bl	8001d72 <HAL_SYSTICK_Config>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10f      	bne.n	8001abe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b0f      	cmp	r3, #15
 8001aa2:	d809      	bhi.n	8001ab8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	f000 f937 	bl	8001d1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ab0:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <HAL_InitTick+0x74>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e007      	b.n	8001ac8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
 8001abc:	e004      	b.n	8001ac8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	73fb      	strb	r3, [r7, #15]
 8001ac2:	e001      	b.n	8001ac8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2000000c 	.word	0x2000000c
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	20000008 	.word	0x20000008

08001ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_IncTick+0x20>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_IncTick+0x24>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <HAL_IncTick+0x24>)
 8001af2:	6013      	str	r3, [r2, #0]
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	2000000c 	.word	0x2000000c
 8001b04:	200009a8 	.word	0x200009a8

08001b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b0c:	4b03      	ldr	r3, [pc, #12]	; (8001b1c <HAL_GetTick+0x14>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	200009a8 	.word	0x200009a8

08001b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b28:	f7ff ffee 	bl	8001b08 <HAL_GetTick>
 8001b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b38:	d005      	beq.n	8001b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <HAL_Delay+0x44>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4413      	add	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b46:	bf00      	nop
 8001b48:	f7ff ffde 	bl	8001b08 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d8f7      	bhi.n	8001b48 <HAL_Delay+0x28>
  {
  }
}
 8001b58:	bf00      	nop
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2000000c 	.word	0x2000000c

08001b68 <__NVIC_SetPriorityGrouping>:
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <__NVIC_SetPriorityGrouping+0x44>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b84:	4013      	ands	r3, r2
 8001b86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b9a:	4a04      	ldr	r2, [pc, #16]	; (8001bac <__NVIC_SetPriorityGrouping+0x44>)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	60d3      	str	r3, [r2, #12]
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <__NVIC_GetPriorityGrouping>:
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	f003 0307 	and.w	r3, r3, #7
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_EnableIRQ>:
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	db0b      	blt.n	8001bf6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	f003 021f 	and.w	r2, r3, #31
 8001be4:	4907      	ldr	r1, [pc, #28]	; (8001c04 <__NVIC_EnableIRQ+0x38>)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	095b      	lsrs	r3, r3, #5
 8001bec:	2001      	movs	r0, #1
 8001bee:	fa00 f202 	lsl.w	r2, r0, r2
 8001bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000e100 	.word	0xe000e100

08001c08 <__NVIC_SetPriority>:
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	6039      	str	r1, [r7, #0]
 8001c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	db0a      	blt.n	8001c32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	490c      	ldr	r1, [pc, #48]	; (8001c54 <__NVIC_SetPriority+0x4c>)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	0112      	lsls	r2, r2, #4
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c30:	e00a      	b.n	8001c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	4908      	ldr	r1, [pc, #32]	; (8001c58 <__NVIC_SetPriority+0x50>)
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	3b04      	subs	r3, #4
 8001c40:	0112      	lsls	r2, r2, #4
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	440b      	add	r3, r1
 8001c46:	761a      	strb	r2, [r3, #24]
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000e100 	.word	0xe000e100
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b089      	sub	sp, #36	; 0x24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f1c3 0307 	rsb	r3, r3, #7
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	bf28      	it	cs
 8001c7a:	2304      	movcs	r3, #4
 8001c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	3304      	adds	r3, #4
 8001c82:	2b06      	cmp	r3, #6
 8001c84:	d902      	bls.n	8001c8c <NVIC_EncodePriority+0x30>
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3b03      	subs	r3, #3
 8001c8a:	e000      	b.n	8001c8e <NVIC_EncodePriority+0x32>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c90:	f04f 32ff 	mov.w	r2, #4294967295
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43da      	mvns	r2, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cae:	43d9      	mvns	r1, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	4313      	orrs	r3, r2
         );
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3724      	adds	r7, #36	; 0x24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd4:	d301      	bcc.n	8001cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e00f      	b.n	8001cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cda:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <SysTick_Config+0x40>)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce2:	210f      	movs	r1, #15
 8001ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce8:	f7ff ff8e 	bl	8001c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <SysTick_Config+0x40>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cf2:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <SysTick_Config+0x40>)
 8001cf4:	2207      	movs	r2, #7
 8001cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	e000e010 	.word	0xe000e010

08001d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff ff29 	bl	8001b68 <__NVIC_SetPriorityGrouping>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b086      	sub	sp, #24
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	4603      	mov	r3, r0
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	607a      	str	r2, [r7, #4]
 8001d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d30:	f7ff ff3e 	bl	8001bb0 <__NVIC_GetPriorityGrouping>
 8001d34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	6978      	ldr	r0, [r7, #20]
 8001d3c:	f7ff ff8e 	bl	8001c5c <NVIC_EncodePriority>
 8001d40:	4602      	mov	r2, r0
 8001d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d46:	4611      	mov	r1, r2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff5d 	bl	8001c08 <__NVIC_SetPriority>
}
 8001d4e:	bf00      	nop
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff31 	bl	8001bcc <__NVIC_EnableIRQ>
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff ffa2 	bl	8001cc4 <SysTick_Config>
 8001d80:	4603      	mov	r3, r0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b085      	sub	sp, #20
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d008      	beq.n	8001db4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2204      	movs	r2, #4
 8001da6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e022      	b.n	8001dfa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 020e 	bic.w	r2, r2, #14
 8001dc2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0201 	bic.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd8:	f003 021c 	and.w	r2, r3, #28
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	2101      	movs	r1, #1
 8001de2:	fa01 f202 	lsl.w	r2, r1, r2
 8001de6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b084      	sub	sp, #16
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d005      	beq.n	8001e2a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2204      	movs	r2, #4
 8001e22:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
 8001e28:	e029      	b.n	8001e7e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 020e 	bic.w	r2, r2, #14
 8001e38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0201 	bic.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	f003 021c 	and.w	r2, r3, #28
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	2101      	movs	r1, #1
 8001e58:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	4798      	blx	r3
    }
  }
  return status;
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e96:	e17f      	b.n	8002198 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8171 	beq.w	8002192 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d005      	beq.n	8001ec8 <HAL_GPIO_Init+0x40>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d130      	bne.n	8001f2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001efe:	2201      	movs	r2, #1
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	091b      	lsrs	r3, r3, #4
 8001f14:	f003 0201 	and.w	r2, r3, #1
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d118      	bne.n	8001f68 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	08db      	lsrs	r3, r3, #3
 8001f52:	f003 0201 	and.w	r2, r3, #1
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d017      	beq.n	8001fa4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	2203      	movs	r2, #3
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d123      	bne.n	8001ff8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	08da      	lsrs	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3208      	adds	r2, #8
 8001fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	220f      	movs	r2, #15
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	08da      	lsrs	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3208      	adds	r2, #8
 8001ff2:	6939      	ldr	r1, [r7, #16]
 8001ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	2203      	movs	r2, #3
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0203 	and.w	r2, r3, #3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80ac 	beq.w	8002192 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203a:	4b5f      	ldr	r3, [pc, #380]	; (80021b8 <HAL_GPIO_Init+0x330>)
 800203c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203e:	4a5e      	ldr	r2, [pc, #376]	; (80021b8 <HAL_GPIO_Init+0x330>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6613      	str	r3, [r2, #96]	; 0x60
 8002046:	4b5c      	ldr	r3, [pc, #368]	; (80021b8 <HAL_GPIO_Init+0x330>)
 8002048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002052:	4a5a      	ldr	r2, [pc, #360]	; (80021bc <HAL_GPIO_Init+0x334>)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	089b      	lsrs	r3, r3, #2
 8002058:	3302      	adds	r3, #2
 800205a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	220f      	movs	r2, #15
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800207c:	d025      	beq.n	80020ca <HAL_GPIO_Init+0x242>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a4f      	ldr	r2, [pc, #316]	; (80021c0 <HAL_GPIO_Init+0x338>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d01f      	beq.n	80020c6 <HAL_GPIO_Init+0x23e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4e      	ldr	r2, [pc, #312]	; (80021c4 <HAL_GPIO_Init+0x33c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d019      	beq.n	80020c2 <HAL_GPIO_Init+0x23a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4d      	ldr	r2, [pc, #308]	; (80021c8 <HAL_GPIO_Init+0x340>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d013      	beq.n	80020be <HAL_GPIO_Init+0x236>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4c      	ldr	r2, [pc, #304]	; (80021cc <HAL_GPIO_Init+0x344>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00d      	beq.n	80020ba <HAL_GPIO_Init+0x232>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4b      	ldr	r2, [pc, #300]	; (80021d0 <HAL_GPIO_Init+0x348>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d007      	beq.n	80020b6 <HAL_GPIO_Init+0x22e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4a      	ldr	r2, [pc, #296]	; (80021d4 <HAL_GPIO_Init+0x34c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d101      	bne.n	80020b2 <HAL_GPIO_Init+0x22a>
 80020ae:	2306      	movs	r3, #6
 80020b0:	e00c      	b.n	80020cc <HAL_GPIO_Init+0x244>
 80020b2:	2307      	movs	r3, #7
 80020b4:	e00a      	b.n	80020cc <HAL_GPIO_Init+0x244>
 80020b6:	2305      	movs	r3, #5
 80020b8:	e008      	b.n	80020cc <HAL_GPIO_Init+0x244>
 80020ba:	2304      	movs	r3, #4
 80020bc:	e006      	b.n	80020cc <HAL_GPIO_Init+0x244>
 80020be:	2303      	movs	r3, #3
 80020c0:	e004      	b.n	80020cc <HAL_GPIO_Init+0x244>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e002      	b.n	80020cc <HAL_GPIO_Init+0x244>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_GPIO_Init+0x244>
 80020ca:	2300      	movs	r3, #0
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	f002 0203 	and.w	r2, r2, #3
 80020d2:	0092      	lsls	r2, r2, #2
 80020d4:	4093      	lsls	r3, r2
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020dc:	4937      	ldr	r1, [pc, #220]	; (80021bc <HAL_GPIO_Init+0x334>)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	3302      	adds	r3, #2
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020ea:	4b3b      	ldr	r3, [pc, #236]	; (80021d8 <HAL_GPIO_Init+0x350>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800210e:	4a32      	ldr	r2, [pc, #200]	; (80021d8 <HAL_GPIO_Init+0x350>)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002114:	4b30      	ldr	r3, [pc, #192]	; (80021d8 <HAL_GPIO_Init+0x350>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	43db      	mvns	r3, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002138:	4a27      	ldr	r2, [pc, #156]	; (80021d8 <HAL_GPIO_Init+0x350>)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800213e:	4b26      	ldr	r3, [pc, #152]	; (80021d8 <HAL_GPIO_Init+0x350>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	43db      	mvns	r3, r3
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4013      	ands	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4313      	orrs	r3, r2
 8002160:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002162:	4a1d      	ldr	r2, [pc, #116]	; (80021d8 <HAL_GPIO_Init+0x350>)
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <HAL_GPIO_Init+0x350>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	43db      	mvns	r3, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800218c:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <HAL_GPIO_Init+0x350>)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	3301      	adds	r3, #1
 8002196:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	fa22 f303 	lsr.w	r3, r2, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f47f ae78 	bne.w	8001e98 <HAL_GPIO_Init+0x10>
  }
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	371c      	adds	r7, #28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40010000 	.word	0x40010000
 80021c0:	48000400 	.word	0x48000400
 80021c4:	48000800 	.word	0x48000800
 80021c8:	48000c00 	.word	0x48000c00
 80021cc:	48001000 	.word	0x48001000
 80021d0:	48001400 	.word	0x48001400
 80021d4:	48001800 	.word	0x48001800
 80021d8:	40010400 	.word	0x40010400

080021dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	807b      	strh	r3, [r7, #2]
 80021e8:	4613      	mov	r3, r2
 80021ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021ec:	787b      	ldrb	r3, [r7, #1]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021f2:	887a      	ldrh	r2, [r7, #2]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021f8:	e002      	b.n	8002200 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021fa:	887a      	ldrh	r2, [r7, #2]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4013      	ands	r3, r2
 8002224:	041a      	lsls	r2, r3, #16
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	43d9      	mvns	r1, r3
 800222a:	887b      	ldrh	r3, [r7, #2]
 800222c:	400b      	ands	r3, r1
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	619a      	str	r2, [r3, #24]
}
 8002234:	bf00      	nop
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800224c:	695a      	ldr	r2, [r3, #20]
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	4013      	ands	r3, r2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d006      	beq.n	8002264 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002256:	4a05      	ldr	r2, [pc, #20]	; (800226c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	4618      	mov	r0, r3
 8002260:	f000 f806 	bl	8002270 <HAL_GPIO_EXTI_Callback>
  }
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40010400 	.word	0x40010400

08002270 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40007000 	.word	0x40007000

080022a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b2:	d130      	bne.n	8002316 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022b4:	4b23      	ldr	r3, [pc, #140]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c0:	d038      	beq.n	8002334 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022ca:	4a1e      	ldr	r2, [pc, #120]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022d2:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2232      	movs	r2, #50	; 0x32
 80022d8:	fb02 f303 	mul.w	r3, r2, r3
 80022dc:	4a1b      	ldr	r2, [pc, #108]	; (800234c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	0c9b      	lsrs	r3, r3, #18
 80022e4:	3301      	adds	r3, #1
 80022e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022e8:	e002      	b.n	80022f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3b01      	subs	r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022fc:	d102      	bne.n	8002304 <HAL_PWREx_ControlVoltageScaling+0x60>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f2      	bne.n	80022ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002310:	d110      	bne.n	8002334 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e00f      	b.n	8002336 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800231e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002322:	d007      	beq.n	8002334 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002324:	4b07      	ldr	r3, [pc, #28]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800232c:	4a05      	ldr	r2, [pc, #20]	; (8002344 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800232e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002332:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40007000 	.word	0x40007000
 8002348:	20000000 	.word	0x20000000
 800234c:	431bde83 	.word	0x431bde83

08002350 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e3ca      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002362:	4b97      	ldr	r3, [pc, #604]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800236c:	4b94      	ldr	r3, [pc, #592]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 80e4 	beq.w	800254c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d007      	beq.n	800239a <HAL_RCC_OscConfig+0x4a>
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	2b0c      	cmp	r3, #12
 800238e:	f040 808b 	bne.w	80024a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2b01      	cmp	r3, #1
 8002396:	f040 8087 	bne.w	80024a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800239a:	4b89      	ldr	r3, [pc, #548]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d005      	beq.n	80023b2 <HAL_RCC_OscConfig+0x62>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e3a2      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1a      	ldr	r2, [r3, #32]
 80023b6:	4b82      	ldr	r3, [pc, #520]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d004      	beq.n	80023cc <HAL_RCC_OscConfig+0x7c>
 80023c2:	4b7f      	ldr	r3, [pc, #508]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023ca:	e005      	b.n	80023d8 <HAL_RCC_OscConfig+0x88>
 80023cc:	4b7c      	ldr	r3, [pc, #496]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80023ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d2:	091b      	lsrs	r3, r3, #4
 80023d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023d8:	4293      	cmp	r3, r2
 80023da:	d223      	bcs.n	8002424 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 fd55 	bl	8002e90 <RCC_SetFlashLatencyFromMSIRange>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e383      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023f0:	4b73      	ldr	r3, [pc, #460]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a72      	ldr	r2, [pc, #456]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80023f6:	f043 0308 	orr.w	r3, r3, #8
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	4b70      	ldr	r3, [pc, #448]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	496d      	ldr	r1, [pc, #436]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 800240a:	4313      	orrs	r3, r2
 800240c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800240e:	4b6c      	ldr	r3, [pc, #432]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	021b      	lsls	r3, r3, #8
 800241c:	4968      	ldr	r1, [pc, #416]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 800241e:	4313      	orrs	r3, r2
 8002420:	604b      	str	r3, [r1, #4]
 8002422:	e025      	b.n	8002470 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002424:	4b66      	ldr	r3, [pc, #408]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a65      	ldr	r2, [pc, #404]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 800242a:	f043 0308 	orr.w	r3, r3, #8
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	4b63      	ldr	r3, [pc, #396]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	4960      	ldr	r1, [pc, #384]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002442:	4b5f      	ldr	r3, [pc, #380]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	495b      	ldr	r1, [pc, #364]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002452:	4313      	orrs	r3, r2
 8002454:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d109      	bne.n	8002470 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	4618      	mov	r0, r3
 8002462:	f000 fd15 	bl	8002e90 <RCC_SetFlashLatencyFromMSIRange>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e343      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002470:	f000 fc4a 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8002474:	4602      	mov	r2, r0
 8002476:	4b52      	ldr	r3, [pc, #328]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	091b      	lsrs	r3, r3, #4
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	4950      	ldr	r1, [pc, #320]	; (80025c4 <HAL_RCC_OscConfig+0x274>)
 8002482:	5ccb      	ldrb	r3, [r1, r3]
 8002484:	f003 031f 	and.w	r3, r3, #31
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
 800248c:	4a4e      	ldr	r2, [pc, #312]	; (80025c8 <HAL_RCC_OscConfig+0x278>)
 800248e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002490:	4b4e      	ldr	r3, [pc, #312]	; (80025cc <HAL_RCC_OscConfig+0x27c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fae7 	bl	8001a68 <HAL_InitTick>
 800249a:	4603      	mov	r3, r0
 800249c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d052      	beq.n	800254a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	e327      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d032      	beq.n	8002516 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024b0:	4b43      	ldr	r3, [pc, #268]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a42      	ldr	r2, [pc, #264]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024bc:	f7ff fb24 	bl	8001b08 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024c4:	f7ff fb20 	bl	8001b08 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e310      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024d6:	4b3a      	ldr	r3, [pc, #232]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024e2:	4b37      	ldr	r3, [pc, #220]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a36      	ldr	r2, [pc, #216]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80024e8:	f043 0308 	orr.w	r3, r3, #8
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	4b34      	ldr	r3, [pc, #208]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	4931      	ldr	r1, [pc, #196]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002500:	4b2f      	ldr	r3, [pc, #188]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	021b      	lsls	r3, r3, #8
 800250e:	492c      	ldr	r1, [pc, #176]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
 8002514:	e01a      	b.n	800254c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002516:	4b2a      	ldr	r3, [pc, #168]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a29      	ldr	r2, [pc, #164]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002522:	f7ff faf1 	bl	8001b08 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800252a:	f7ff faed 	bl	8001b08 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e2dd      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800253c:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f0      	bne.n	800252a <HAL_RCC_OscConfig+0x1da>
 8002548:	e000      	b.n	800254c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800254a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	d074      	beq.n	8002642 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	2b08      	cmp	r3, #8
 800255c:	d005      	beq.n	800256a <HAL_RCC_OscConfig+0x21a>
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	2b0c      	cmp	r3, #12
 8002562:	d10e      	bne.n	8002582 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2b03      	cmp	r3, #3
 8002568:	d10b      	bne.n	8002582 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256a:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d064      	beq.n	8002640 <HAL_RCC_OscConfig+0x2f0>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d160      	bne.n	8002640 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e2ba      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800258a:	d106      	bne.n	800259a <HAL_RCC_OscConfig+0x24a>
 800258c:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 8002592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	e026      	b.n	80025e8 <HAL_RCC_OscConfig+0x298>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025a2:	d115      	bne.n	80025d0 <HAL_RCC_OscConfig+0x280>
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a05      	ldr	r2, [pc, #20]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80025aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b03      	ldr	r3, [pc, #12]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a02      	ldr	r2, [pc, #8]	; (80025c0 <HAL_RCC_OscConfig+0x270>)
 80025b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	e014      	b.n	80025e8 <HAL_RCC_OscConfig+0x298>
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000
 80025c4:	080061b4 	.word	0x080061b4
 80025c8:	20000000 	.word	0x20000000
 80025cc:	20000008 	.word	0x20000008
 80025d0:	4ba0      	ldr	r3, [pc, #640]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a9f      	ldr	r2, [pc, #636]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 80025d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	4b9d      	ldr	r3, [pc, #628]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a9c      	ldr	r2, [pc, #624]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 80025e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d013      	beq.n	8002618 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7ff fa8a 	bl	8001b08 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f8:	f7ff fa86 	bl	8001b08 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b64      	cmp	r3, #100	; 0x64
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e276      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800260a:	4b92      	ldr	r3, [pc, #584]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x2a8>
 8002616:	e014      	b.n	8002642 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7ff fa76 	bl	8001b08 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002620:	f7ff fa72 	bl	8001b08 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b64      	cmp	r3, #100	; 0x64
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e262      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002632:	4b88      	ldr	r3, [pc, #544]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x2d0>
 800263e:	e000      	b.n	8002642 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d060      	beq.n	8002710 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	2b04      	cmp	r3, #4
 8002652:	d005      	beq.n	8002660 <HAL_RCC_OscConfig+0x310>
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	2b0c      	cmp	r3, #12
 8002658:	d119      	bne.n	800268e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2b02      	cmp	r3, #2
 800265e:	d116      	bne.n	800268e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002660:	4b7c      	ldr	r3, [pc, #496]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002668:	2b00      	cmp	r3, #0
 800266a:	d005      	beq.n	8002678 <HAL_RCC_OscConfig+0x328>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e23f      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002678:	4b76      	ldr	r3, [pc, #472]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	061b      	lsls	r3, r3, #24
 8002686:	4973      	ldr	r1, [pc, #460]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800268c:	e040      	b.n	8002710 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d023      	beq.n	80026de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002696:	4b6f      	ldr	r3, [pc, #444]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6e      	ldr	r2, [pc, #440]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 800269c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a2:	f7ff fa31 	bl	8001b08 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026aa:	f7ff fa2d 	bl	8001b08 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e21d      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026bc:	4b65      	ldr	r3, [pc, #404]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c8:	4b62      	ldr	r3, [pc, #392]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	061b      	lsls	r3, r3, #24
 80026d6:	495f      	ldr	r1, [pc, #380]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]
 80026dc:	e018      	b.n	8002710 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026de:	4b5d      	ldr	r3, [pc, #372]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a5c      	ldr	r2, [pc, #368]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 80026e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ea:	f7ff fa0d 	bl	8001b08 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f2:	f7ff fa09 	bl	8001b08 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e1f9      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002704:	4b53      	ldr	r3, [pc, #332]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f0      	bne.n	80026f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d03c      	beq.n	8002796 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01c      	beq.n	800275e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002724:	4b4b      	ldr	r3, [pc, #300]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 8002726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800272a:	4a4a      	ldr	r2, [pc, #296]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002734:	f7ff f9e8 	bl	8001b08 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273c:	f7ff f9e4 	bl	8001b08 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e1d4      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800274e:	4b41      	ldr	r3, [pc, #260]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 8002750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0ef      	beq.n	800273c <HAL_RCC_OscConfig+0x3ec>
 800275c:	e01b      	b.n	8002796 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800275e:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 8002760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002764:	4a3b      	ldr	r2, [pc, #236]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276e:	f7ff f9cb 	bl	8001b08 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002776:	f7ff f9c7 	bl	8001b08 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e1b7      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002788:	4b32      	ldr	r3, [pc, #200]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 800278a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1ef      	bne.n	8002776 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 80a6 	beq.w	80028f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a4:	2300      	movs	r3, #0
 80027a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027a8:	4b2a      	ldr	r3, [pc, #168]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 80027aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10d      	bne.n	80027d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b4:	4b27      	ldr	r3, [pc, #156]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 80027b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b8:	4a26      	ldr	r2, [pc, #152]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 80027ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027be:	6593      	str	r3, [r2, #88]	; 0x58
 80027c0:	4b24      	ldr	r3, [pc, #144]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 80027c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027cc:	2301      	movs	r3, #1
 80027ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d0:	4b21      	ldr	r3, [pc, #132]	; (8002858 <HAL_RCC_OscConfig+0x508>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d118      	bne.n	800280e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027dc:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <HAL_RCC_OscConfig+0x508>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a1d      	ldr	r2, [pc, #116]	; (8002858 <HAL_RCC_OscConfig+0x508>)
 80027e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e8:	f7ff f98e 	bl	8001b08 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f0:	f7ff f98a 	bl	8001b08 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e17a      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <HAL_RCC_OscConfig+0x508>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d108      	bne.n	8002828 <HAL_RCC_OscConfig+0x4d8>
 8002816:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 8002818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281c:	4a0d      	ldr	r2, [pc, #52]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002826:	e029      	b.n	800287c <HAL_RCC_OscConfig+0x52c>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b05      	cmp	r3, #5
 800282e:	d115      	bne.n	800285c <HAL_RCC_OscConfig+0x50c>
 8002830:	4b08      	ldr	r3, [pc, #32]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 8002832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002836:	4a07      	ldr	r2, [pc, #28]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 8002838:	f043 0304 	orr.w	r3, r3, #4
 800283c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002846:	4a03      	ldr	r2, [pc, #12]	; (8002854 <HAL_RCC_OscConfig+0x504>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002850:	e014      	b.n	800287c <HAL_RCC_OscConfig+0x52c>
 8002852:	bf00      	nop
 8002854:	40021000 	.word	0x40021000
 8002858:	40007000 	.word	0x40007000
 800285c:	4b9c      	ldr	r3, [pc, #624]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002862:	4a9b      	ldr	r2, [pc, #620]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 8002864:	f023 0301 	bic.w	r3, r3, #1
 8002868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800286c:	4b98      	ldr	r3, [pc, #608]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 800286e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002872:	4a97      	ldr	r2, [pc, #604]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 8002874:	f023 0304 	bic.w	r3, r3, #4
 8002878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d016      	beq.n	80028b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002884:	f7ff f940 	bl	8001b08 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288c:	f7ff f93c 	bl	8001b08 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	; 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e12a      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a2:	4b8b      	ldr	r3, [pc, #556]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 80028a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0ed      	beq.n	800288c <HAL_RCC_OscConfig+0x53c>
 80028b0:	e015      	b.n	80028de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b2:	f7ff f929 	bl	8001b08 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028b8:	e00a      	b.n	80028d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ba:	f7ff f925 	bl	8001b08 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e113      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028d0:	4b7f      	ldr	r3, [pc, #508]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 80028d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1ed      	bne.n	80028ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028de:	7ffb      	ldrb	r3, [r7, #31]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d105      	bne.n	80028f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e4:	4b7a      	ldr	r3, [pc, #488]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 80028e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e8:	4a79      	ldr	r2, [pc, #484]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 80028ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 80fe 	beq.w	8002af6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fe:	2b02      	cmp	r3, #2
 8002900:	f040 80d0 	bne.w	8002aa4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002904:	4b72      	ldr	r3, [pc, #456]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f003 0203 	and.w	r2, r3, #3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	429a      	cmp	r2, r3
 8002916:	d130      	bne.n	800297a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	3b01      	subs	r3, #1
 8002924:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002926:	429a      	cmp	r2, r3
 8002928:	d127      	bne.n	800297a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002934:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002936:	429a      	cmp	r2, r3
 8002938:	d11f      	bne.n	800297a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002944:	2a07      	cmp	r2, #7
 8002946:	bf14      	ite	ne
 8002948:	2201      	movne	r2, #1
 800294a:	2200      	moveq	r2, #0
 800294c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800294e:	4293      	cmp	r3, r2
 8002950:	d113      	bne.n	800297a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295c:	085b      	lsrs	r3, r3, #1
 800295e:	3b01      	subs	r3, #1
 8002960:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002962:	429a      	cmp	r2, r3
 8002964:	d109      	bne.n	800297a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	085b      	lsrs	r3, r3, #1
 8002972:	3b01      	subs	r3, #1
 8002974:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d06e      	beq.n	8002a58 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2b0c      	cmp	r3, #12
 800297e:	d069      	beq.n	8002a54 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002980:	4b53      	ldr	r3, [pc, #332]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d105      	bne.n	8002998 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800298c:	4b50      	ldr	r3, [pc, #320]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0ad      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800299c:	4b4c      	ldr	r3, [pc, #304]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a4b      	ldr	r2, [pc, #300]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 80029a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029a8:	f7ff f8ae 	bl	8001b08 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b0:	f7ff f8aa 	bl	8001b08 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e09a      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029c2:	4b43      	ldr	r3, [pc, #268]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ce:	4b40      	ldr	r3, [pc, #256]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	4b40      	ldr	r3, [pc, #256]	; (8002ad4 <HAL_RCC_OscConfig+0x784>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80029de:	3a01      	subs	r2, #1
 80029e0:	0112      	lsls	r2, r2, #4
 80029e2:	4311      	orrs	r1, r2
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029e8:	0212      	lsls	r2, r2, #8
 80029ea:	4311      	orrs	r1, r2
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029f0:	0852      	lsrs	r2, r2, #1
 80029f2:	3a01      	subs	r2, #1
 80029f4:	0552      	lsls	r2, r2, #21
 80029f6:	4311      	orrs	r1, r2
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029fc:	0852      	lsrs	r2, r2, #1
 80029fe:	3a01      	subs	r2, #1
 8002a00:	0652      	lsls	r2, r2, #25
 8002a02:	4311      	orrs	r1, r2
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a08:	0912      	lsrs	r2, r2, #4
 8002a0a:	0452      	lsls	r2, r2, #17
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	4930      	ldr	r1, [pc, #192]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a14:	4b2e      	ldr	r3, [pc, #184]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a2d      	ldr	r2, [pc, #180]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 8002a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a20:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4a2a      	ldr	r2, [pc, #168]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 8002a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a2c:	f7ff f86c 	bl	8001b08 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a34:	f7ff f868 	bl	8001b08 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e058      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a46:	4b22      	ldr	r3, [pc, #136]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a52:	e050      	b.n	8002af6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e04f      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a58:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d148      	bne.n	8002af6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a64:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a19      	ldr	r2, [pc, #100]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 8002a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a70:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4a16      	ldr	r2, [pc, #88]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 8002a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a7c:	f7ff f844 	bl	8001b08 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a84:	f7ff f840 	bl	8001b08 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e030      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a96:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0x734>
 8002aa2:	e028      	b.n	8002af6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	2b0c      	cmp	r3, #12
 8002aa8:	d023      	beq.n	8002af2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a08      	ldr	r2, [pc, #32]	; (8002ad0 <HAL_RCC_OscConfig+0x780>)
 8002ab0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab6:	f7ff f827 	bl	8001b08 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002abc:	e00c      	b.n	8002ad8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002abe:	f7ff f823 	bl	8001b08 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d905      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e013      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad8:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <HAL_RCC_OscConfig+0x7b0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1ec      	bne.n	8002abe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_RCC_OscConfig+0x7b0>)
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	4905      	ldr	r1, [pc, #20]	; (8002b00 <HAL_RCC_OscConfig+0x7b0>)
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_RCC_OscConfig+0x7b4>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	60cb      	str	r3, [r1, #12]
 8002af0:	e001      	b.n	8002af6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3720      	adds	r7, #32
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40021000 	.word	0x40021000
 8002b04:	feeefffc 	.word	0xfeeefffc

08002b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0e7      	b.n	8002cec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b75      	ldr	r3, [pc, #468]	; (8002cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d910      	bls.n	8002b4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b72      	ldr	r3, [pc, #456]	; (8002cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 0207 	bic.w	r2, r3, #7
 8002b32:	4970      	ldr	r1, [pc, #448]	; (8002cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3a:	4b6e      	ldr	r3, [pc, #440]	; (8002cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0cf      	b.n	8002cec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d010      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	4b66      	ldr	r3, [pc, #408]	; (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d908      	bls.n	8002b7a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b68:	4b63      	ldr	r3, [pc, #396]	; (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4960      	ldr	r1, [pc, #384]	; (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d04c      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d107      	bne.n	8002b9e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b8e:	4b5a      	ldr	r3, [pc, #360]	; (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d121      	bne.n	8002bde <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e0a6      	b.n	8002cec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ba6:	4b54      	ldr	r3, [pc, #336]	; (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d115      	bne.n	8002bde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e09a      	b.n	8002cec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d107      	bne.n	8002bce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bbe:	4b4e      	ldr	r3, [pc, #312]	; (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e08e      	b.n	8002cec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bce:	4b4a      	ldr	r3, [pc, #296]	; (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e086      	b.n	8002cec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bde:	4b46      	ldr	r3, [pc, #280]	; (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f023 0203 	bic.w	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	4943      	ldr	r1, [pc, #268]	; (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf0:	f7fe ff8a 	bl	8001b08 <HAL_GetTick>
 8002bf4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf8:	f7fe ff86 	bl	8001b08 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e06e      	b.n	8002cec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0e:	4b3a      	ldr	r3, [pc, #232]	; (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 020c 	and.w	r2, r3, #12
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d1eb      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d010      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	4b31      	ldr	r3, [pc, #196]	; (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d208      	bcs.n	8002c4e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c3c:	4b2e      	ldr	r3, [pc, #184]	; (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	492b      	ldr	r1, [pc, #172]	; (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c4e:	4b29      	ldr	r3, [pc, #164]	; (8002cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d210      	bcs.n	8002c7e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5c:	4b25      	ldr	r3, [pc, #148]	; (8002cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f023 0207 	bic.w	r2, r3, #7
 8002c64:	4923      	ldr	r1, [pc, #140]	; (8002cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6c:	4b21      	ldr	r3, [pc, #132]	; (8002cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d001      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e036      	b.n	8002cec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d008      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c8a:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	4918      	ldr	r1, [pc, #96]	; (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d009      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ca8:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4910      	ldr	r1, [pc, #64]	; (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cbc:	f000 f824 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	091b      	lsrs	r3, r3, #4
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	490b      	ldr	r1, [pc, #44]	; (8002cfc <HAL_RCC_ClockConfig+0x1f4>)
 8002cce:	5ccb      	ldrb	r3, [r1, r3]
 8002cd0:	f003 031f 	and.w	r3, r3, #31
 8002cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd8:	4a09      	ldr	r2, [pc, #36]	; (8002d00 <HAL_RCC_ClockConfig+0x1f8>)
 8002cda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cdc:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <HAL_RCC_ClockConfig+0x1fc>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe fec1 	bl	8001a68 <HAL_InitTick>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002cea:	7afb      	ldrb	r3, [r7, #11]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40022000 	.word	0x40022000
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	080061b4 	.word	0x080061b4
 8002d00:	20000000 	.word	0x20000000
 8002d04:	20000008 	.word	0x20000008

08002d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b089      	sub	sp, #36	; 0x24
 8002d0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	2300      	movs	r3, #0
 8002d14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d16:	4b3e      	ldr	r3, [pc, #248]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d20:	4b3b      	ldr	r3, [pc, #236]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_GetSysClockFreq+0x34>
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	2b0c      	cmp	r3, #12
 8002d34:	d121      	bne.n	8002d7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d11e      	bne.n	8002d7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d3c:	4b34      	ldr	r3, [pc, #208]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d107      	bne.n	8002d58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d48:	4b31      	ldr	r3, [pc, #196]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d4e:	0a1b      	lsrs	r3, r3, #8
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	e005      	b.n	8002d64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d58:	4b2d      	ldr	r3, [pc, #180]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d64:	4a2b      	ldr	r2, [pc, #172]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10d      	bne.n	8002d90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d78:	e00a      	b.n	8002d90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d102      	bne.n	8002d86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d80:	4b25      	ldr	r3, [pc, #148]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d82:	61bb      	str	r3, [r7, #24]
 8002d84:	e004      	b.n	8002d90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d8c:	4b23      	ldr	r3, [pc, #140]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x114>)
 8002d8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	2b0c      	cmp	r3, #12
 8002d94:	d134      	bne.n	8002e00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d96:	4b1e      	ldr	r3, [pc, #120]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d003      	beq.n	8002dae <HAL_RCC_GetSysClockFreq+0xa6>
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d003      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0xac>
 8002dac:	e005      	b.n	8002dba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dae:	4b1a      	ldr	r3, [pc, #104]	; (8002e18 <HAL_RCC_GetSysClockFreq+0x110>)
 8002db0:	617b      	str	r3, [r7, #20]
      break;
 8002db2:	e005      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002db4:	4b19      	ldr	r3, [pc, #100]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x114>)
 8002db6:	617b      	str	r3, [r7, #20]
      break;
 8002db8:	e002      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	617b      	str	r3, [r7, #20]
      break;
 8002dbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dc0:	4b13      	ldr	r3, [pc, #76]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	091b      	lsrs	r3, r3, #4
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	3301      	adds	r3, #1
 8002dcc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002dce:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	0a1b      	lsrs	r3, r3, #8
 8002dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	fb03 f202 	mul.w	r2, r3, r2
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002de6:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	0e5b      	lsrs	r3, r3, #25
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	3301      	adds	r3, #1
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e00:	69bb      	ldr	r3, [r7, #24]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3724      	adds	r7, #36	; 0x24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40021000 	.word	0x40021000
 8002e14:	080061cc 	.word	0x080061cc
 8002e18:	00f42400 	.word	0x00f42400
 8002e1c:	007a1200 	.word	0x007a1200

08002e20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e24:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e26:	681b      	ldr	r3, [r3, #0]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20000000 	.word	0x20000000

08002e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e3c:	f7ff fff0 	bl	8002e20 <HAL_RCC_GetHCLKFreq>
 8002e40:	4602      	mov	r2, r0
 8002e42:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	0a1b      	lsrs	r3, r3, #8
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	4904      	ldr	r1, [pc, #16]	; (8002e60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e4e:	5ccb      	ldrb	r3, [r1, r3]
 8002e50:	f003 031f 	and.w	r3, r3, #31
 8002e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	080061c4 	.word	0x080061c4

08002e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e68:	f7ff ffda 	bl	8002e20 <HAL_RCC_GetHCLKFreq>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	0adb      	lsrs	r3, r3, #11
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	4904      	ldr	r1, [pc, #16]	; (8002e8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e7a:	5ccb      	ldrb	r3, [r1, r3]
 8002e7c:	f003 031f 	and.w	r3, r3, #31
 8002e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	080061c4 	.word	0x080061c4

08002e90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e98:	2300      	movs	r3, #0
 8002e9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e9c:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ea8:	f7ff f9ee 	bl	8002288 <HAL_PWREx_GetVoltageRange>
 8002eac:	6178      	str	r0, [r7, #20]
 8002eae:	e014      	b.n	8002eda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002eb0:	4b25      	ldr	r3, [pc, #148]	; (8002f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb4:	4a24      	ldr	r2, [pc, #144]	; (8002f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eba:	6593      	str	r3, [r2, #88]	; 0x58
 8002ebc:	4b22      	ldr	r3, [pc, #136]	; (8002f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ec8:	f7ff f9de 	bl	8002288 <HAL_PWREx_GetVoltageRange>
 8002ecc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ece:	4b1e      	ldr	r3, [pc, #120]	; (8002f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed2:	4a1d      	ldr	r2, [pc, #116]	; (8002f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ee0:	d10b      	bne.n	8002efa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b80      	cmp	r3, #128	; 0x80
 8002ee6:	d919      	bls.n	8002f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2ba0      	cmp	r3, #160	; 0xa0
 8002eec:	d902      	bls.n	8002ef4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002eee:	2302      	movs	r3, #2
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	e013      	b.n	8002f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	613b      	str	r3, [r7, #16]
 8002ef8:	e010      	b.n	8002f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b80      	cmp	r3, #128	; 0x80
 8002efe:	d902      	bls.n	8002f06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f00:	2303      	movs	r3, #3
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	e00a      	b.n	8002f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2b80      	cmp	r3, #128	; 0x80
 8002f0a:	d102      	bne.n	8002f12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	e004      	b.n	8002f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b70      	cmp	r3, #112	; 0x70
 8002f16:	d101      	bne.n	8002f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f18:	2301      	movs	r3, #1
 8002f1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f023 0207 	bic.w	r2, r3, #7
 8002f24:	4909      	ldr	r1, [pc, #36]	; (8002f4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f2c:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d001      	beq.n	8002f3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40022000 	.word	0x40022000

08002f50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f58:	2300      	movs	r3, #0
 8002f5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d041      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f74:	d02a      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f7a:	d824      	bhi.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f80:	d008      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f86:	d81e      	bhi.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00a      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f90:	d010      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f92:	e018      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f94:	4b86      	ldr	r3, [pc, #536]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4a85      	ldr	r2, [pc, #532]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fa0:	e015      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fabb 	bl	8003524 <RCCEx_PLLSAI1_Config>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fb2:	e00c      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3320      	adds	r3, #32
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 fba6 	bl	800370c <RCCEx_PLLSAI2_Config>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fc4:	e003      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	74fb      	strb	r3, [r7, #19]
      break;
 8002fca:	e000      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002fcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fce:	7cfb      	ldrb	r3, [r7, #19]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10b      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fd4:	4b76      	ldr	r3, [pc, #472]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fe2:	4973      	ldr	r1, [pc, #460]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002fea:	e001      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fec:	7cfb      	ldrb	r3, [r7, #19]
 8002fee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d041      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003000:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003004:	d02a      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003006:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800300a:	d824      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800300c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003010:	d008      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003012:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003016:	d81e      	bhi.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00a      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800301c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003020:	d010      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003022:	e018      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003024:	4b62      	ldr	r3, [pc, #392]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	4a61      	ldr	r2, [pc, #388]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800302a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003030:	e015      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3304      	adds	r3, #4
 8003036:	2100      	movs	r1, #0
 8003038:	4618      	mov	r0, r3
 800303a:	f000 fa73 	bl	8003524 <RCCEx_PLLSAI1_Config>
 800303e:	4603      	mov	r3, r0
 8003040:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003042:	e00c      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3320      	adds	r3, #32
 8003048:	2100      	movs	r1, #0
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fb5e 	bl	800370c <RCCEx_PLLSAI2_Config>
 8003050:	4603      	mov	r3, r0
 8003052:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003054:	e003      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	74fb      	strb	r3, [r7, #19]
      break;
 800305a:	e000      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800305c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800305e:	7cfb      	ldrb	r3, [r7, #19]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10b      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003064:	4b52      	ldr	r3, [pc, #328]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003072:	494f      	ldr	r1, [pc, #316]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800307a:	e001      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307c:	7cfb      	ldrb	r3, [r7, #19]
 800307e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80a0 	beq.w	80031ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308e:	2300      	movs	r3, #0
 8003090:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003092:	4b47      	ldr	r3, [pc, #284]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80030a2:	2300      	movs	r3, #0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00d      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a8:	4b41      	ldr	r3, [pc, #260]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ac:	4a40      	ldr	r2, [pc, #256]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b2:	6593      	str	r3, [r2, #88]	; 0x58
 80030b4:	4b3e      	ldr	r3, [pc, #248]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c0:	2301      	movs	r3, #1
 80030c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030c4:	4b3b      	ldr	r3, [pc, #236]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a3a      	ldr	r2, [pc, #232]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030d0:	f7fe fd1a 	bl	8001b08 <HAL_GetTick>
 80030d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030d6:	e009      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d8:	f7fe fd16 	bl	8001b08 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d902      	bls.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	74fb      	strb	r3, [r7, #19]
        break;
 80030ea:	e005      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030ec:	4b31      	ldr	r3, [pc, #196]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0ef      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80030f8:	7cfb      	ldrb	r3, [r7, #19]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d15c      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030fe:	4b2c      	ldr	r3, [pc, #176]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003108:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01f      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	429a      	cmp	r2, r3
 800311a:	d019      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800311c:	4b24      	ldr	r3, [pc, #144]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003126:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003128:	4b21      	ldr	r3, [pc, #132]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312e:	4a20      	ldr	r2, [pc, #128]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003138:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800313a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313e:	4a1c      	ldr	r2, [pc, #112]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003148:	4a19      	ldr	r2, [pc, #100]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d016      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315a:	f7fe fcd5 	bl	8001b08 <HAL_GetTick>
 800315e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003160:	e00b      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003162:	f7fe fcd1 	bl	8001b08 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003170:	4293      	cmp	r3, r2
 8003172:	d902      	bls.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	74fb      	strb	r3, [r7, #19]
            break;
 8003178:	e006      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800317a:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0ec      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003188:	7cfb      	ldrb	r3, [r7, #19]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10c      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800318e:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003194:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800319e:	4904      	ldr	r1, [pc, #16]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031a6:	e009      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031a8:	7cfb      	ldrb	r3, [r7, #19]
 80031aa:	74bb      	strb	r3, [r7, #18]
 80031ac:	e006      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b8:	7cfb      	ldrb	r3, [r7, #19]
 80031ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031bc:	7c7b      	ldrb	r3, [r7, #17]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d105      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c2:	4b9e      	ldr	r3, [pc, #632]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c6:	4a9d      	ldr	r2, [pc, #628]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031da:	4b98      	ldr	r3, [pc, #608]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e0:	f023 0203 	bic.w	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e8:	4994      	ldr	r1, [pc, #592]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031fc:	4b8f      	ldr	r3, [pc, #572]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003202:	f023 020c 	bic.w	r2, r3, #12
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320a:	498c      	ldr	r1, [pc, #560]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800321e:	4b87      	ldr	r3, [pc, #540]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003224:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	4983      	ldr	r1, [pc, #524]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003240:	4b7e      	ldr	r3, [pc, #504]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003246:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	497b      	ldr	r1, [pc, #492]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003262:	4b76      	ldr	r3, [pc, #472]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003268:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003270:	4972      	ldr	r1, [pc, #456]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0320 	and.w	r3, r3, #32
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003284:	4b6d      	ldr	r3, [pc, #436]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003292:	496a      	ldr	r1, [pc, #424]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032a6:	4b65      	ldr	r3, [pc, #404]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	4961      	ldr	r1, [pc, #388]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032c8:	4b5c      	ldr	r3, [pc, #368]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d6:	4959      	ldr	r1, [pc, #356]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ea:	4b54      	ldr	r3, [pc, #336]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f8:	4950      	ldr	r1, [pc, #320]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800330c:	4b4b      	ldr	r3, [pc, #300]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003312:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331a:	4948      	ldr	r1, [pc, #288]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800332e:	4b43      	ldr	r3, [pc, #268]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003334:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333c:	493f      	ldr	r1, [pc, #252]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d028      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003350:	4b3a      	ldr	r3, [pc, #232]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003356:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800335e:	4937      	ldr	r1, [pc, #220]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800336a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800336e:	d106      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003370:	4b32      	ldr	r3, [pc, #200]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	4a31      	ldr	r2, [pc, #196]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800337a:	60d3      	str	r3, [r2, #12]
 800337c:	e011      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003382:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003386:	d10c      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3304      	adds	r3, #4
 800338c:	2101      	movs	r1, #1
 800338e:	4618      	mov	r0, r3
 8003390:	f000 f8c8 	bl	8003524 <RCCEx_PLLSAI1_Config>
 8003394:	4603      	mov	r3, r0
 8003396:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003398:	7cfb      	ldrb	r3, [r7, #19]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800339e:	7cfb      	ldrb	r3, [r7, #19]
 80033a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d028      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033ae:	4b23      	ldr	r3, [pc, #140]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033bc:	491f      	ldr	r1, [pc, #124]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033cc:	d106      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033ce:	4b1b      	ldr	r3, [pc, #108]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	4a1a      	ldr	r2, [pc, #104]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033d8:	60d3      	str	r3, [r2, #12]
 80033da:	e011      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033e4:	d10c      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3304      	adds	r3, #4
 80033ea:	2101      	movs	r1, #1
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 f899 	bl	8003524 <RCCEx_PLLSAI1_Config>
 80033f2:	4603      	mov	r3, r0
 80033f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033f6:	7cfb      	ldrb	r3, [r7, #19]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80033fc:	7cfb      	ldrb	r3, [r7, #19]
 80033fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d02b      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003412:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341a:	4908      	ldr	r1, [pc, #32]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800342a:	d109      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800342c:	4b03      	ldr	r3, [pc, #12]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4a02      	ldr	r2, [pc, #8]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003436:	60d3      	str	r3, [r2, #12]
 8003438:	e014      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003444:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003448:	d10c      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3304      	adds	r3, #4
 800344e:	2101      	movs	r1, #1
 8003450:	4618      	mov	r0, r3
 8003452:	f000 f867 	bl	8003524 <RCCEx_PLLSAI1_Config>
 8003456:	4603      	mov	r3, r0
 8003458:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800345a:	7cfb      	ldrb	r3, [r7, #19]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003460:	7cfb      	ldrb	r3, [r7, #19]
 8003462:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d02f      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003470:	4b2b      	ldr	r3, [pc, #172]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003476:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800347e:	4928      	ldr	r1, [pc, #160]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800348a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800348e:	d10d      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3304      	adds	r3, #4
 8003494:	2102      	movs	r1, #2
 8003496:	4618      	mov	r0, r3
 8003498:	f000 f844 	bl	8003524 <RCCEx_PLLSAI1_Config>
 800349c:	4603      	mov	r3, r0
 800349e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034a0:	7cfb      	ldrb	r3, [r7, #19]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d014      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034a6:	7cfb      	ldrb	r3, [r7, #19]
 80034a8:	74bb      	strb	r3, [r7, #18]
 80034aa:	e011      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3320      	adds	r3, #32
 80034ba:	2102      	movs	r1, #2
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 f925 	bl	800370c <RCCEx_PLLSAI2_Config>
 80034c2:	4603      	mov	r3, r0
 80034c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034c6:	7cfb      	ldrb	r3, [r7, #19]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034cc:	7cfb      	ldrb	r3, [r7, #19]
 80034ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034dc:	4b10      	ldr	r3, [pc, #64]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034ea:	490d      	ldr	r1, [pc, #52]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00b      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034fe:	4b08      	ldr	r3, [pc, #32]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003504:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800350e:	4904      	ldr	r1, [pc, #16]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003516:	7cbb      	ldrb	r3, [r7, #18]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40021000 	.word	0x40021000

08003524 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003532:	4b75      	ldr	r3, [pc, #468]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d018      	beq.n	8003570 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800353e:	4b72      	ldr	r3, [pc, #456]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f003 0203 	and.w	r2, r3, #3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d10d      	bne.n	800356a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
       ||
 8003552:	2b00      	cmp	r3, #0
 8003554:	d009      	beq.n	800356a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003556:	4b6c      	ldr	r3, [pc, #432]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	091b      	lsrs	r3, r3, #4
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
       ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d047      	beq.n	80035fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	73fb      	strb	r3, [r7, #15]
 800356e:	e044      	b.n	80035fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b03      	cmp	r3, #3
 8003576:	d018      	beq.n	80035aa <RCCEx_PLLSAI1_Config+0x86>
 8003578:	2b03      	cmp	r3, #3
 800357a:	d825      	bhi.n	80035c8 <RCCEx_PLLSAI1_Config+0xa4>
 800357c:	2b01      	cmp	r3, #1
 800357e:	d002      	beq.n	8003586 <RCCEx_PLLSAI1_Config+0x62>
 8003580:	2b02      	cmp	r3, #2
 8003582:	d009      	beq.n	8003598 <RCCEx_PLLSAI1_Config+0x74>
 8003584:	e020      	b.n	80035c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003586:	4b60      	ldr	r3, [pc, #384]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d11d      	bne.n	80035ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003596:	e01a      	b.n	80035ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003598:	4b5b      	ldr	r3, [pc, #364]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d116      	bne.n	80035d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035a8:	e013      	b.n	80035d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035aa:	4b57      	ldr	r3, [pc, #348]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10f      	bne.n	80035d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035b6:	4b54      	ldr	r3, [pc, #336]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d109      	bne.n	80035d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035c6:	e006      	b.n	80035d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
      break;
 80035cc:	e004      	b.n	80035d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035ce:	bf00      	nop
 80035d0:	e002      	b.n	80035d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035d2:	bf00      	nop
 80035d4:	e000      	b.n	80035d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10d      	bne.n	80035fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035de:	4b4a      	ldr	r3, [pc, #296]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6819      	ldr	r1, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	430b      	orrs	r3, r1
 80035f4:	4944      	ldr	r1, [pc, #272]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d17d      	bne.n	80036fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003600:	4b41      	ldr	r3, [pc, #260]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a40      	ldr	r2, [pc, #256]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003606:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800360a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800360c:	f7fe fa7c 	bl	8001b08 <HAL_GetTick>
 8003610:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003612:	e009      	b.n	8003628 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003614:	f7fe fa78 	bl	8001b08 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d902      	bls.n	8003628 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	73fb      	strb	r3, [r7, #15]
        break;
 8003626:	e005      	b.n	8003634 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003628:	4b37      	ldr	r3, [pc, #220]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1ef      	bne.n	8003614 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d160      	bne.n	80036fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d111      	bne.n	8003664 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003640:	4b31      	ldr	r3, [pc, #196]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6892      	ldr	r2, [r2, #8]
 8003650:	0211      	lsls	r1, r2, #8
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68d2      	ldr	r2, [r2, #12]
 8003656:	0912      	lsrs	r2, r2, #4
 8003658:	0452      	lsls	r2, r2, #17
 800365a:	430a      	orrs	r2, r1
 800365c:	492a      	ldr	r1, [pc, #168]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e4>)
 800365e:	4313      	orrs	r3, r2
 8003660:	610b      	str	r3, [r1, #16]
 8003662:	e027      	b.n	80036b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d112      	bne.n	8003690 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800366a:	4b27      	ldr	r3, [pc, #156]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e4>)
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003672:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6892      	ldr	r2, [r2, #8]
 800367a:	0211      	lsls	r1, r2, #8
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6912      	ldr	r2, [r2, #16]
 8003680:	0852      	lsrs	r2, r2, #1
 8003682:	3a01      	subs	r2, #1
 8003684:	0552      	lsls	r2, r2, #21
 8003686:	430a      	orrs	r2, r1
 8003688:	491f      	ldr	r1, [pc, #124]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e4>)
 800368a:	4313      	orrs	r3, r2
 800368c:	610b      	str	r3, [r1, #16]
 800368e:	e011      	b.n	80036b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003690:	4b1d      	ldr	r3, [pc, #116]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003698:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6892      	ldr	r2, [r2, #8]
 80036a0:	0211      	lsls	r1, r2, #8
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6952      	ldr	r2, [r2, #20]
 80036a6:	0852      	lsrs	r2, r2, #1
 80036a8:	3a01      	subs	r2, #1
 80036aa:	0652      	lsls	r2, r2, #25
 80036ac:	430a      	orrs	r2, r1
 80036ae:	4916      	ldr	r1, [pc, #88]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036b4:	4b14      	ldr	r3, [pc, #80]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a13      	ldr	r2, [pc, #76]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c0:	f7fe fa22 	bl	8001b08 <HAL_GetTick>
 80036c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036c6:	e009      	b.n	80036dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036c8:	f7fe fa1e 	bl	8001b08 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d902      	bls.n	80036dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	73fb      	strb	r3, [r7, #15]
          break;
 80036da:	e005      	b.n	80036e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036dc:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0ef      	beq.n	80036c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036ee:	4b06      	ldr	r3, [pc, #24]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f0:	691a      	ldr	r2, [r3, #16]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	4904      	ldr	r1, [pc, #16]	; (8003708 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40021000 	.word	0x40021000

0800370c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003716:	2300      	movs	r3, #0
 8003718:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800371a:	4b6a      	ldr	r3, [pc, #424]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d018      	beq.n	8003758 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003726:	4b67      	ldr	r3, [pc, #412]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f003 0203 	and.w	r2, r3, #3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d10d      	bne.n	8003752 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
       ||
 800373a:	2b00      	cmp	r3, #0
 800373c:	d009      	beq.n	8003752 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800373e:	4b61      	ldr	r3, [pc, #388]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	091b      	lsrs	r3, r3, #4
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
       ||
 800374e:	429a      	cmp	r2, r3
 8003750:	d047      	beq.n	80037e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	73fb      	strb	r3, [r7, #15]
 8003756:	e044      	b.n	80037e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b03      	cmp	r3, #3
 800375e:	d018      	beq.n	8003792 <RCCEx_PLLSAI2_Config+0x86>
 8003760:	2b03      	cmp	r3, #3
 8003762:	d825      	bhi.n	80037b0 <RCCEx_PLLSAI2_Config+0xa4>
 8003764:	2b01      	cmp	r3, #1
 8003766:	d002      	beq.n	800376e <RCCEx_PLLSAI2_Config+0x62>
 8003768:	2b02      	cmp	r3, #2
 800376a:	d009      	beq.n	8003780 <RCCEx_PLLSAI2_Config+0x74>
 800376c:	e020      	b.n	80037b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800376e:	4b55      	ldr	r3, [pc, #340]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d11d      	bne.n	80037b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800377e:	e01a      	b.n	80037b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003780:	4b50      	ldr	r3, [pc, #320]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003788:	2b00      	cmp	r3, #0
 800378a:	d116      	bne.n	80037ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003790:	e013      	b.n	80037ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003792:	4b4c      	ldr	r3, [pc, #304]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10f      	bne.n	80037be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800379e:	4b49      	ldr	r3, [pc, #292]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d109      	bne.n	80037be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037ae:	e006      	b.n	80037be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	73fb      	strb	r3, [r7, #15]
      break;
 80037b4:	e004      	b.n	80037c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037b6:	bf00      	nop
 80037b8:	e002      	b.n	80037c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037ba:	bf00      	nop
 80037bc:	e000      	b.n	80037c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037be:	bf00      	nop
    }

    if(status == HAL_OK)
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10d      	bne.n	80037e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037c6:	4b3f      	ldr	r3, [pc, #252]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6819      	ldr	r1, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	430b      	orrs	r3, r1
 80037dc:	4939      	ldr	r1, [pc, #228]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d167      	bne.n	80038b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80037e8:	4b36      	ldr	r3, [pc, #216]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a35      	ldr	r2, [pc, #212]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f4:	f7fe f988 	bl	8001b08 <HAL_GetTick>
 80037f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037fa:	e009      	b.n	8003810 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037fc:	f7fe f984 	bl	8001b08 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d902      	bls.n	8003810 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	73fb      	strb	r3, [r7, #15]
        break;
 800380e:	e005      	b.n	800381c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003810:	4b2c      	ldr	r3, [pc, #176]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1ef      	bne.n	80037fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d14a      	bne.n	80038b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d111      	bne.n	800384c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003828:	4b26      	ldr	r3, [pc, #152]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6892      	ldr	r2, [r2, #8]
 8003838:	0211      	lsls	r1, r2, #8
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68d2      	ldr	r2, [r2, #12]
 800383e:	0912      	lsrs	r2, r2, #4
 8003840:	0452      	lsls	r2, r2, #17
 8003842:	430a      	orrs	r2, r1
 8003844:	491f      	ldr	r1, [pc, #124]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003846:	4313      	orrs	r3, r2
 8003848:	614b      	str	r3, [r1, #20]
 800384a:	e011      	b.n	8003870 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800384c:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003854:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6892      	ldr	r2, [r2, #8]
 800385c:	0211      	lsls	r1, r2, #8
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6912      	ldr	r2, [r2, #16]
 8003862:	0852      	lsrs	r2, r2, #1
 8003864:	3a01      	subs	r2, #1
 8003866:	0652      	lsls	r2, r2, #25
 8003868:	430a      	orrs	r2, r1
 800386a:	4916      	ldr	r1, [pc, #88]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800386c:	4313      	orrs	r3, r2
 800386e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003870:	4b14      	ldr	r3, [pc, #80]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a13      	ldr	r2, [pc, #76]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800387a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800387c:	f7fe f944 	bl	8001b08 <HAL_GetTick>
 8003880:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003882:	e009      	b.n	8003898 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003884:	f7fe f940 	bl	8001b08 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d902      	bls.n	8003898 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	73fb      	strb	r3, [r7, #15]
          break;
 8003896:	e005      	b.n	80038a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003898:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0ef      	beq.n	8003884 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038aa:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ac:	695a      	ldr	r2, [r3, #20]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	4904      	ldr	r1, [pc, #16]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40021000 	.word	0x40021000

080038c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e040      	b.n	800395c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fd ffc0 	bl	8001870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2224      	movs	r2, #36	; 0x24
 80038f4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0201 	bic.w	r2, r2, #1
 8003904:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fed0 	bl	80046b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 fc15 	bl	8004144 <UART_SetConfig>
 800391a:	4603      	mov	r3, r0
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e01b      	b.n	800395c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003932:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003942:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 ff4f 	bl	80047f8 <UART_CheckIdleState>
 800395a:	4603      	mov	r3, r0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b08a      	sub	sp, #40	; 0x28
 8003968:	af02      	add	r7, sp, #8
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	603b      	str	r3, [r7, #0]
 8003970:	4613      	mov	r3, r2
 8003972:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003978:	2b20      	cmp	r3, #32
 800397a:	d178      	bne.n	8003a6e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_UART_Transmit+0x24>
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e071      	b.n	8003a70 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2221      	movs	r2, #33	; 0x21
 8003998:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800399a:	f7fe f8b5 	bl	8001b08 <HAL_GetTick>
 800399e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	88fa      	ldrh	r2, [r7, #6]
 80039a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	88fa      	ldrh	r2, [r7, #6]
 80039ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b8:	d108      	bne.n	80039cc <HAL_UART_Transmit+0x68>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d104      	bne.n	80039cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	61bb      	str	r3, [r7, #24]
 80039ca:	e003      	b.n	80039d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039d4:	e030      	b.n	8003a38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2200      	movs	r2, #0
 80039de:	2180      	movs	r1, #128	; 0x80
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 ffb1 	bl	8004948 <UART_WaitOnFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d004      	beq.n	80039f6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e03c      	b.n	8003a70 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10b      	bne.n	8003a14 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	881a      	ldrh	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a08:	b292      	uxth	r2, r2
 8003a0a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	3302      	adds	r3, #2
 8003a10:	61bb      	str	r3, [r7, #24]
 8003a12:	e008      	b.n	8003a26 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	781a      	ldrb	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	b292      	uxth	r2, r2
 8003a1e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	3301      	adds	r3, #1
 8003a24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1c8      	bne.n	80039d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2140      	movs	r1, #64	; 0x40
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 ff7a 	bl	8004948 <UART_WaitOnFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d004      	beq.n	8003a64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e005      	b.n	8003a70 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	e000      	b.n	8003a70 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003a6e:	2302      	movs	r3, #2
  }
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3720      	adds	r7, #32
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b08b      	sub	sp, #44	; 0x2c
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	4613      	mov	r3, r2
 8003a84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a8a:	2b20      	cmp	r3, #32
 8003a8c:	d147      	bne.n	8003b1e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <HAL_UART_Transmit_IT+0x22>
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e040      	b.n	8003b20 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	88fa      	ldrh	r2, [r7, #6]
 8003aa8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	88fa      	ldrh	r2, [r7, #6]
 8003ab0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2221      	movs	r2, #33	; 0x21
 8003ac6:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad0:	d107      	bne.n	8003ae2 <HAL_UART_Transmit_IT+0x6a>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d103      	bne.n	8003ae2 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4a13      	ldr	r2, [pc, #76]	; (8003b2c <HAL_UART_Transmit_IT+0xb4>)
 8003ade:	66da      	str	r2, [r3, #108]	; 0x6c
 8003ae0:	e002      	b.n	8003ae8 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4a12      	ldr	r2, [pc, #72]	; (8003b30 <HAL_UART_Transmit_IT+0xb8>)
 8003ae6:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	e853 3f00 	ldrex	r3, [r3]
 8003af4:	613b      	str	r3, [r7, #16]
   return(result);
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	623b      	str	r3, [r7, #32]
 8003b08:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0a:	69f9      	ldr	r1, [r7, #28]
 8003b0c:	6a3a      	ldr	r2, [r7, #32]
 8003b0e:	e841 2300 	strex	r3, r2, [r1]
 8003b12:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1e6      	bne.n	8003ae8 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	e000      	b.n	8003b20 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003b1e:	2302      	movs	r3, #2
  }
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	372c      	adds	r7, #44	; 0x2c
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	08004d51 	.word	0x08004d51
 8003b30:	08004c99 	.word	0x08004c99

08003b34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b0ba      	sub	sp, #232	; 0xe8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003b5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003b62:	4013      	ands	r3, r2
 8003b64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003b68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d115      	bne.n	8003b9c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b74:	f003 0320 	and.w	r3, r3, #32
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00f      	beq.n	8003b9c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d009      	beq.n	8003b9c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 82ae 	beq.w	80040ee <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	4798      	blx	r3
      }
      return;
 8003b9a:	e2a8      	b.n	80040ee <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003b9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 8117 	beq.w	8003dd4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003bb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003bb6:	4b85      	ldr	r3, [pc, #532]	; (8003dcc <HAL_UART_IRQHandler+0x298>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 810a 	beq.w	8003dd4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d011      	beq.n	8003bf0 <HAL_UART_IRQHandler+0xbc>
 8003bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00b      	beq.n	8003bf0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003be6:	f043 0201 	orr.w	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d011      	beq.n	8003c20 <HAL_UART_IRQHandler+0xec>
 8003bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00b      	beq.n	8003c20 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c16:	f043 0204 	orr.w	r2, r3, #4
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d011      	beq.n	8003c50 <HAL_UART_IRQHandler+0x11c>
 8003c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00b      	beq.n	8003c50 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c46:	f043 0202 	orr.w	r2, r3, #2
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d017      	beq.n	8003c8c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c60:	f003 0320 	and.w	r3, r3, #32
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d105      	bne.n	8003c74 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00b      	beq.n	8003c8c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2208      	movs	r2, #8
 8003c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c82:	f043 0208 	orr.w	r2, r3, #8
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d012      	beq.n	8003cbe <HAL_UART_IRQHandler+0x18a>
 8003c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00c      	beq.n	8003cbe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cb4:	f043 0220 	orr.w	r2, r3, #32
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 8214 	beq.w	80040f2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00d      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d007      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d06:	2b40      	cmp	r3, #64	; 0x40
 8003d08:	d005      	beq.n	8003d16 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d04f      	beq.n	8003db6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 ff44 	bl	8004ba4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d26:	2b40      	cmp	r3, #64	; 0x40
 8003d28:	d141      	bne.n	8003dae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3308      	adds	r3, #8
 8003d30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d38:	e853 3f00 	ldrex	r3, [r3]
 8003d3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3308      	adds	r3, #8
 8003d52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d66:	e841 2300 	strex	r3, r2, [r1]
 8003d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1d9      	bne.n	8003d2a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d013      	beq.n	8003da6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d82:	4a13      	ldr	r2, [pc, #76]	; (8003dd0 <HAL_UART_IRQHandler+0x29c>)
 8003d84:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fe f83b 	bl	8001e06 <HAL_DMA_Abort_IT>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d017      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003da0:	4610      	mov	r0, r2
 8003da2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da4:	e00f      	b.n	8003dc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f9c2 	bl	8004130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dac:	e00b      	b.n	8003dc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f9be 	bl	8004130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db4:	e007      	b.n	8003dc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f9ba 	bl	8004130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003dc4:	e195      	b.n	80040f2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc6:	bf00      	nop
    return;
 8003dc8:	e193      	b.n	80040f2 <HAL_UART_IRQHandler+0x5be>
 8003dca:	bf00      	nop
 8003dcc:	04000120 	.word	0x04000120
 8003dd0:	08004c6d 	.word	0x08004c6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	f040 814e 	bne.w	800407a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 8147 	beq.w	800407a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8140 	beq.w	800407a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2210      	movs	r2, #16
 8003e00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0c:	2b40      	cmp	r3, #64	; 0x40
 8003e0e:	f040 80b8 	bne.w	8003f82 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e1e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 8167 	beq.w	80040f6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e32:	429a      	cmp	r2, r3
 8003e34:	f080 815f 	bcs.w	80040f6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f040 8086 	bne.w	8003f60 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e60:	e853 3f00 	ldrex	r3, [r3]
 8003e64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e82:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e8e:	e841 2300 	strex	r3, r2, [r1]
 8003e92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1da      	bne.n	8003e54 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea8:	e853 3f00 	ldrex	r3, [r3]
 8003eac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003eae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eb0:	f023 0301 	bic.w	r3, r3, #1
 8003eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3308      	adds	r3, #8
 8003ebe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ec2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ec6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003eca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ece:	e841 2300 	strex	r3, r2, [r1]
 8003ed2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e1      	bne.n	8003e9e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3308      	adds	r3, #8
 8003ee0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ee4:	e853 3f00 	ldrex	r3, [r3]
 8003ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3308      	adds	r3, #8
 8003efa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003efe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f06:	e841 2300 	strex	r3, r2, [r1]
 8003f0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1e3      	bne.n	8003eda <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f30:	f023 0310 	bic.w	r3, r3, #16
 8003f34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f42:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f44:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f4a:	e841 2300 	strex	r3, r2, [r1]
 8003f4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1e4      	bne.n	8003f20 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fd ff15 	bl	8001d8a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	4619      	mov	r1, r3
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fc fcf8 	bl	8000970 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f80:	e0b9      	b.n	80040f6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 80ab 	beq.w	80040fa <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003fa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 80a6 	beq.w	80040fa <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb6:	e853 3f00 	ldrex	r3, [r3]
 8003fba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fd8:	e841 2300 	strex	r3, r2, [r1]
 8003fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1e4      	bne.n	8003fae <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3308      	adds	r3, #8
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	623b      	str	r3, [r7, #32]
   return(result);
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	f023 0301 	bic.w	r3, r3, #1
 8003ffa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3308      	adds	r3, #8
 8004004:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004008:	633a      	str	r2, [r7, #48]	; 0x30
 800400a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800400e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e3      	bne.n	8003fe4 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	e853 3f00 	ldrex	r3, [r3]
 800403c:	60fb      	str	r3, [r7, #12]
   return(result);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f023 0310 	bic.w	r3, r3, #16
 8004044:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	461a      	mov	r2, r3
 800404e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004052:	61fb      	str	r3, [r7, #28]
 8004054:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004056:	69b9      	ldr	r1, [r7, #24]
 8004058:	69fa      	ldr	r2, [r7, #28]
 800405a:	e841 2300 	strex	r3, r2, [r1]
 800405e:	617b      	str	r3, [r7, #20]
   return(result);
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1e4      	bne.n	8004030 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2202      	movs	r2, #2
 800406a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800406c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004070:	4619      	mov	r1, r3
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7fc fc7c 	bl	8000970 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004078:	e03f      	b.n	80040fa <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800407a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00e      	beq.n	80040a4 <HAL_UART_IRQHandler+0x570>
 8004086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800408a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d008      	beq.n	80040a4 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800409a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f001 f89d 	bl	80051dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040a2:	e02d      	b.n	8004100 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00e      	beq.n	80040ce <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80040b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01c      	beq.n	80040fe <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	4798      	blx	r3
    }
    return;
 80040cc:	e017      	b.n	80040fe <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d012      	beq.n	8004100 <HAL_UART_IRQHandler+0x5cc>
 80040da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00c      	beq.n	8004100 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fe92 	bl	8004e10 <UART_EndTransmit_IT>
    return;
 80040ec:	e008      	b.n	8004100 <HAL_UART_IRQHandler+0x5cc>
      return;
 80040ee:	bf00      	nop
 80040f0:	e006      	b.n	8004100 <HAL_UART_IRQHandler+0x5cc>
    return;
 80040f2:	bf00      	nop
 80040f4:	e004      	b.n	8004100 <HAL_UART_IRQHandler+0x5cc>
      return;
 80040f6:	bf00      	nop
 80040f8:	e002      	b.n	8004100 <HAL_UART_IRQHandler+0x5cc>
      return;
 80040fa:	bf00      	nop
 80040fc:	e000      	b.n	8004100 <HAL_UART_IRQHandler+0x5cc>
    return;
 80040fe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004100:	37e8      	adds	r7, #232	; 0xe8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop

08004108 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004148:	b08a      	sub	sp, #40	; 0x28
 800414a:	af00      	add	r7, sp, #0
 800414c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	431a      	orrs	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	431a      	orrs	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	4313      	orrs	r3, r2
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	4ba4      	ldr	r3, [pc, #656]	; (8004404 <UART_SetConfig+0x2c0>)
 8004174:	4013      	ands	r3, r2
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	6812      	ldr	r2, [r2, #0]
 800417a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800417c:	430b      	orrs	r3, r1
 800417e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a99      	ldr	r2, [pc, #612]	; (8004408 <UART_SetConfig+0x2c4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d004      	beq.n	80041b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ac:	4313      	orrs	r3, r2
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c0:	430a      	orrs	r2, r1
 80041c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a90      	ldr	r2, [pc, #576]	; (800440c <UART_SetConfig+0x2c8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d126      	bne.n	800421c <UART_SetConfig+0xd8>
 80041ce:	4b90      	ldr	r3, [pc, #576]	; (8004410 <UART_SetConfig+0x2cc>)
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d4:	f003 0303 	and.w	r3, r3, #3
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d81b      	bhi.n	8004214 <UART_SetConfig+0xd0>
 80041dc:	a201      	add	r2, pc, #4	; (adr r2, 80041e4 <UART_SetConfig+0xa0>)
 80041de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e2:	bf00      	nop
 80041e4:	080041f5 	.word	0x080041f5
 80041e8:	08004205 	.word	0x08004205
 80041ec:	080041fd 	.word	0x080041fd
 80041f0:	0800420d 	.word	0x0800420d
 80041f4:	2301      	movs	r3, #1
 80041f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041fa:	e116      	b.n	800442a <UART_SetConfig+0x2e6>
 80041fc:	2302      	movs	r3, #2
 80041fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004202:	e112      	b.n	800442a <UART_SetConfig+0x2e6>
 8004204:	2304      	movs	r3, #4
 8004206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800420a:	e10e      	b.n	800442a <UART_SetConfig+0x2e6>
 800420c:	2308      	movs	r3, #8
 800420e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004212:	e10a      	b.n	800442a <UART_SetConfig+0x2e6>
 8004214:	2310      	movs	r3, #16
 8004216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800421a:	e106      	b.n	800442a <UART_SetConfig+0x2e6>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a7c      	ldr	r2, [pc, #496]	; (8004414 <UART_SetConfig+0x2d0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d138      	bne.n	8004298 <UART_SetConfig+0x154>
 8004226:	4b7a      	ldr	r3, [pc, #488]	; (8004410 <UART_SetConfig+0x2cc>)
 8004228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422c:	f003 030c 	and.w	r3, r3, #12
 8004230:	2b0c      	cmp	r3, #12
 8004232:	d82d      	bhi.n	8004290 <UART_SetConfig+0x14c>
 8004234:	a201      	add	r2, pc, #4	; (adr r2, 800423c <UART_SetConfig+0xf8>)
 8004236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423a:	bf00      	nop
 800423c:	08004271 	.word	0x08004271
 8004240:	08004291 	.word	0x08004291
 8004244:	08004291 	.word	0x08004291
 8004248:	08004291 	.word	0x08004291
 800424c:	08004281 	.word	0x08004281
 8004250:	08004291 	.word	0x08004291
 8004254:	08004291 	.word	0x08004291
 8004258:	08004291 	.word	0x08004291
 800425c:	08004279 	.word	0x08004279
 8004260:	08004291 	.word	0x08004291
 8004264:	08004291 	.word	0x08004291
 8004268:	08004291 	.word	0x08004291
 800426c:	08004289 	.word	0x08004289
 8004270:	2300      	movs	r3, #0
 8004272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004276:	e0d8      	b.n	800442a <UART_SetConfig+0x2e6>
 8004278:	2302      	movs	r3, #2
 800427a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800427e:	e0d4      	b.n	800442a <UART_SetConfig+0x2e6>
 8004280:	2304      	movs	r3, #4
 8004282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004286:	e0d0      	b.n	800442a <UART_SetConfig+0x2e6>
 8004288:	2308      	movs	r3, #8
 800428a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428e:	e0cc      	b.n	800442a <UART_SetConfig+0x2e6>
 8004290:	2310      	movs	r3, #16
 8004292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004296:	e0c8      	b.n	800442a <UART_SetConfig+0x2e6>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a5e      	ldr	r2, [pc, #376]	; (8004418 <UART_SetConfig+0x2d4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d125      	bne.n	80042ee <UART_SetConfig+0x1aa>
 80042a2:	4b5b      	ldr	r3, [pc, #364]	; (8004410 <UART_SetConfig+0x2cc>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042ac:	2b30      	cmp	r3, #48	; 0x30
 80042ae:	d016      	beq.n	80042de <UART_SetConfig+0x19a>
 80042b0:	2b30      	cmp	r3, #48	; 0x30
 80042b2:	d818      	bhi.n	80042e6 <UART_SetConfig+0x1a2>
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d00a      	beq.n	80042ce <UART_SetConfig+0x18a>
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d814      	bhi.n	80042e6 <UART_SetConfig+0x1a2>
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <UART_SetConfig+0x182>
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	d008      	beq.n	80042d6 <UART_SetConfig+0x192>
 80042c4:	e00f      	b.n	80042e6 <UART_SetConfig+0x1a2>
 80042c6:	2300      	movs	r3, #0
 80042c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042cc:	e0ad      	b.n	800442a <UART_SetConfig+0x2e6>
 80042ce:	2302      	movs	r3, #2
 80042d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d4:	e0a9      	b.n	800442a <UART_SetConfig+0x2e6>
 80042d6:	2304      	movs	r3, #4
 80042d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042dc:	e0a5      	b.n	800442a <UART_SetConfig+0x2e6>
 80042de:	2308      	movs	r3, #8
 80042e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e4:	e0a1      	b.n	800442a <UART_SetConfig+0x2e6>
 80042e6:	2310      	movs	r3, #16
 80042e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ec:	e09d      	b.n	800442a <UART_SetConfig+0x2e6>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a4a      	ldr	r2, [pc, #296]	; (800441c <UART_SetConfig+0x2d8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d125      	bne.n	8004344 <UART_SetConfig+0x200>
 80042f8:	4b45      	ldr	r3, [pc, #276]	; (8004410 <UART_SetConfig+0x2cc>)
 80042fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004302:	2bc0      	cmp	r3, #192	; 0xc0
 8004304:	d016      	beq.n	8004334 <UART_SetConfig+0x1f0>
 8004306:	2bc0      	cmp	r3, #192	; 0xc0
 8004308:	d818      	bhi.n	800433c <UART_SetConfig+0x1f8>
 800430a:	2b80      	cmp	r3, #128	; 0x80
 800430c:	d00a      	beq.n	8004324 <UART_SetConfig+0x1e0>
 800430e:	2b80      	cmp	r3, #128	; 0x80
 8004310:	d814      	bhi.n	800433c <UART_SetConfig+0x1f8>
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <UART_SetConfig+0x1d8>
 8004316:	2b40      	cmp	r3, #64	; 0x40
 8004318:	d008      	beq.n	800432c <UART_SetConfig+0x1e8>
 800431a:	e00f      	b.n	800433c <UART_SetConfig+0x1f8>
 800431c:	2300      	movs	r3, #0
 800431e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004322:	e082      	b.n	800442a <UART_SetConfig+0x2e6>
 8004324:	2302      	movs	r3, #2
 8004326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800432a:	e07e      	b.n	800442a <UART_SetConfig+0x2e6>
 800432c:	2304      	movs	r3, #4
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004332:	e07a      	b.n	800442a <UART_SetConfig+0x2e6>
 8004334:	2308      	movs	r3, #8
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800433a:	e076      	b.n	800442a <UART_SetConfig+0x2e6>
 800433c:	2310      	movs	r3, #16
 800433e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004342:	e072      	b.n	800442a <UART_SetConfig+0x2e6>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a35      	ldr	r2, [pc, #212]	; (8004420 <UART_SetConfig+0x2dc>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d12a      	bne.n	80043a4 <UART_SetConfig+0x260>
 800434e:	4b30      	ldr	r3, [pc, #192]	; (8004410 <UART_SetConfig+0x2cc>)
 8004350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004354:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004358:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800435c:	d01a      	beq.n	8004394 <UART_SetConfig+0x250>
 800435e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004362:	d81b      	bhi.n	800439c <UART_SetConfig+0x258>
 8004364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004368:	d00c      	beq.n	8004384 <UART_SetConfig+0x240>
 800436a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800436e:	d815      	bhi.n	800439c <UART_SetConfig+0x258>
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <UART_SetConfig+0x238>
 8004374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004378:	d008      	beq.n	800438c <UART_SetConfig+0x248>
 800437a:	e00f      	b.n	800439c <UART_SetConfig+0x258>
 800437c:	2300      	movs	r3, #0
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004382:	e052      	b.n	800442a <UART_SetConfig+0x2e6>
 8004384:	2302      	movs	r3, #2
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438a:	e04e      	b.n	800442a <UART_SetConfig+0x2e6>
 800438c:	2304      	movs	r3, #4
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004392:	e04a      	b.n	800442a <UART_SetConfig+0x2e6>
 8004394:	2308      	movs	r3, #8
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439a:	e046      	b.n	800442a <UART_SetConfig+0x2e6>
 800439c:	2310      	movs	r3, #16
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a2:	e042      	b.n	800442a <UART_SetConfig+0x2e6>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a17      	ldr	r2, [pc, #92]	; (8004408 <UART_SetConfig+0x2c4>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d13a      	bne.n	8004424 <UART_SetConfig+0x2e0>
 80043ae:	4b18      	ldr	r3, [pc, #96]	; (8004410 <UART_SetConfig+0x2cc>)
 80043b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043bc:	d01a      	beq.n	80043f4 <UART_SetConfig+0x2b0>
 80043be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043c2:	d81b      	bhi.n	80043fc <UART_SetConfig+0x2b8>
 80043c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043c8:	d00c      	beq.n	80043e4 <UART_SetConfig+0x2a0>
 80043ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ce:	d815      	bhi.n	80043fc <UART_SetConfig+0x2b8>
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <UART_SetConfig+0x298>
 80043d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d8:	d008      	beq.n	80043ec <UART_SetConfig+0x2a8>
 80043da:	e00f      	b.n	80043fc <UART_SetConfig+0x2b8>
 80043dc:	2300      	movs	r3, #0
 80043de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e2:	e022      	b.n	800442a <UART_SetConfig+0x2e6>
 80043e4:	2302      	movs	r3, #2
 80043e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ea:	e01e      	b.n	800442a <UART_SetConfig+0x2e6>
 80043ec:	2304      	movs	r3, #4
 80043ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f2:	e01a      	b.n	800442a <UART_SetConfig+0x2e6>
 80043f4:	2308      	movs	r3, #8
 80043f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043fa:	e016      	b.n	800442a <UART_SetConfig+0x2e6>
 80043fc:	2310      	movs	r3, #16
 80043fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004402:	e012      	b.n	800442a <UART_SetConfig+0x2e6>
 8004404:	efff69f3 	.word	0xefff69f3
 8004408:	40008000 	.word	0x40008000
 800440c:	40013800 	.word	0x40013800
 8004410:	40021000 	.word	0x40021000
 8004414:	40004400 	.word	0x40004400
 8004418:	40004800 	.word	0x40004800
 800441c:	40004c00 	.word	0x40004c00
 8004420:	40005000 	.word	0x40005000
 8004424:	2310      	movs	r3, #16
 8004426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a9f      	ldr	r2, [pc, #636]	; (80046ac <UART_SetConfig+0x568>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d17a      	bne.n	800452a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004434:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004438:	2b08      	cmp	r3, #8
 800443a:	d824      	bhi.n	8004486 <UART_SetConfig+0x342>
 800443c:	a201      	add	r2, pc, #4	; (adr r2, 8004444 <UART_SetConfig+0x300>)
 800443e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004442:	bf00      	nop
 8004444:	08004469 	.word	0x08004469
 8004448:	08004487 	.word	0x08004487
 800444c:	08004471 	.word	0x08004471
 8004450:	08004487 	.word	0x08004487
 8004454:	08004477 	.word	0x08004477
 8004458:	08004487 	.word	0x08004487
 800445c:	08004487 	.word	0x08004487
 8004460:	08004487 	.word	0x08004487
 8004464:	0800447f 	.word	0x0800447f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004468:	f7fe fce6 	bl	8002e38 <HAL_RCC_GetPCLK1Freq>
 800446c:	61f8      	str	r0, [r7, #28]
        break;
 800446e:	e010      	b.n	8004492 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004470:	4b8f      	ldr	r3, [pc, #572]	; (80046b0 <UART_SetConfig+0x56c>)
 8004472:	61fb      	str	r3, [r7, #28]
        break;
 8004474:	e00d      	b.n	8004492 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004476:	f7fe fc47 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 800447a:	61f8      	str	r0, [r7, #28]
        break;
 800447c:	e009      	b.n	8004492 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800447e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004482:	61fb      	str	r3, [r7, #28]
        break;
 8004484:	e005      	b.n	8004492 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004490:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 80fb 	beq.w	8004690 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	4613      	mov	r3, r2
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	4413      	add	r3, r2
 80044a4:	69fa      	ldr	r2, [r7, #28]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d305      	bcc.n	80044b6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044b0:	69fa      	ldr	r2, [r7, #28]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d903      	bls.n	80044be <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044bc:	e0e8      	b.n	8004690 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	2200      	movs	r2, #0
 80044c2:	461c      	mov	r4, r3
 80044c4:	4615      	mov	r5, r2
 80044c6:	f04f 0200 	mov.w	r2, #0
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	022b      	lsls	r3, r5, #8
 80044d0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80044d4:	0222      	lsls	r2, r4, #8
 80044d6:	68f9      	ldr	r1, [r7, #12]
 80044d8:	6849      	ldr	r1, [r1, #4]
 80044da:	0849      	lsrs	r1, r1, #1
 80044dc:	2000      	movs	r0, #0
 80044de:	4688      	mov	r8, r1
 80044e0:	4681      	mov	r9, r0
 80044e2:	eb12 0a08 	adds.w	sl, r2, r8
 80044e6:	eb43 0b09 	adc.w	fp, r3, r9
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	603b      	str	r3, [r7, #0]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044f8:	4650      	mov	r0, sl
 80044fa:	4659      	mov	r1, fp
 80044fc:	f7fb feb8 	bl	8000270 <__aeabi_uldivmod>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4613      	mov	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800450e:	d308      	bcc.n	8004522 <UART_SetConfig+0x3de>
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004516:	d204      	bcs.n	8004522 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	60da      	str	r2, [r3, #12]
 8004520:	e0b6      	b.n	8004690 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004528:	e0b2      	b.n	8004690 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004532:	d15e      	bne.n	80045f2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004534:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004538:	2b08      	cmp	r3, #8
 800453a:	d828      	bhi.n	800458e <UART_SetConfig+0x44a>
 800453c:	a201      	add	r2, pc, #4	; (adr r2, 8004544 <UART_SetConfig+0x400>)
 800453e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004542:	bf00      	nop
 8004544:	08004569 	.word	0x08004569
 8004548:	08004571 	.word	0x08004571
 800454c:	08004579 	.word	0x08004579
 8004550:	0800458f 	.word	0x0800458f
 8004554:	0800457f 	.word	0x0800457f
 8004558:	0800458f 	.word	0x0800458f
 800455c:	0800458f 	.word	0x0800458f
 8004560:	0800458f 	.word	0x0800458f
 8004564:	08004587 	.word	0x08004587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004568:	f7fe fc66 	bl	8002e38 <HAL_RCC_GetPCLK1Freq>
 800456c:	61f8      	str	r0, [r7, #28]
        break;
 800456e:	e014      	b.n	800459a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004570:	f7fe fc78 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 8004574:	61f8      	str	r0, [r7, #28]
        break;
 8004576:	e010      	b.n	800459a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004578:	4b4d      	ldr	r3, [pc, #308]	; (80046b0 <UART_SetConfig+0x56c>)
 800457a:	61fb      	str	r3, [r7, #28]
        break;
 800457c:	e00d      	b.n	800459a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800457e:	f7fe fbc3 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 8004582:	61f8      	str	r0, [r7, #28]
        break;
 8004584:	e009      	b.n	800459a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800458a:	61fb      	str	r3, [r7, #28]
        break;
 800458c:	e005      	b.n	800459a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004598:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d077      	beq.n	8004690 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	005a      	lsls	r2, r3, #1
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	085b      	lsrs	r3, r3, #1
 80045aa:	441a      	add	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b0f      	cmp	r3, #15
 80045ba:	d916      	bls.n	80045ea <UART_SetConfig+0x4a6>
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c2:	d212      	bcs.n	80045ea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	f023 030f 	bic.w	r3, r3, #15
 80045cc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	085b      	lsrs	r3, r3, #1
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	b29a      	uxth	r2, r3
 80045da:	8afb      	ldrh	r3, [r7, #22]
 80045dc:	4313      	orrs	r3, r2
 80045de:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	8afa      	ldrh	r2, [r7, #22]
 80045e6:	60da      	str	r2, [r3, #12]
 80045e8:	e052      	b.n	8004690 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045f0:	e04e      	b.n	8004690 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d827      	bhi.n	800464a <UART_SetConfig+0x506>
 80045fa:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <UART_SetConfig+0x4bc>)
 80045fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004600:	08004625 	.word	0x08004625
 8004604:	0800462d 	.word	0x0800462d
 8004608:	08004635 	.word	0x08004635
 800460c:	0800464b 	.word	0x0800464b
 8004610:	0800463b 	.word	0x0800463b
 8004614:	0800464b 	.word	0x0800464b
 8004618:	0800464b 	.word	0x0800464b
 800461c:	0800464b 	.word	0x0800464b
 8004620:	08004643 	.word	0x08004643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004624:	f7fe fc08 	bl	8002e38 <HAL_RCC_GetPCLK1Freq>
 8004628:	61f8      	str	r0, [r7, #28]
        break;
 800462a:	e014      	b.n	8004656 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800462c:	f7fe fc1a 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 8004630:	61f8      	str	r0, [r7, #28]
        break;
 8004632:	e010      	b.n	8004656 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004634:	4b1e      	ldr	r3, [pc, #120]	; (80046b0 <UART_SetConfig+0x56c>)
 8004636:	61fb      	str	r3, [r7, #28]
        break;
 8004638:	e00d      	b.n	8004656 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800463a:	f7fe fb65 	bl	8002d08 <HAL_RCC_GetSysClockFreq>
 800463e:	61f8      	str	r0, [r7, #28]
        break;
 8004640:	e009      	b.n	8004656 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004646:	61fb      	str	r3, [r7, #28]
        break;
 8004648:	e005      	b.n	8004656 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004654:	bf00      	nop
    }

    if (pclk != 0U)
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d019      	beq.n	8004690 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	085a      	lsrs	r2, r3, #1
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	441a      	add	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	fbb2 f3f3 	udiv	r3, r2, r3
 800466e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	2b0f      	cmp	r3, #15
 8004674:	d909      	bls.n	800468a <UART_SetConfig+0x546>
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800467c:	d205      	bcs.n	800468a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	60da      	str	r2, [r3, #12]
 8004688:	e002      	b.n	8004690 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800469c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3728      	adds	r7, #40	; 0x28
 80046a4:	46bd      	mov	sp, r7
 80046a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046aa:	bf00      	nop
 80046ac:	40008000 	.word	0x40008000
 80046b0:	00f42400 	.word	0x00f42400

080046b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	f003 0304 	and.w	r3, r3, #4
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	f003 0310 	and.w	r3, r3, #16
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	f003 0320 	and.w	r3, r3, #32
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004790:	2b00      	cmp	r3, #0
 8004792:	d01a      	beq.n	80047ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047b2:	d10a      	bne.n	80047ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	605a      	str	r2, [r3, #4]
  }
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b098      	sub	sp, #96	; 0x60
 80047fc:	af02      	add	r7, sp, #8
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004808:	f7fd f97e 	bl	8001b08 <HAL_GetTick>
 800480c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b08      	cmp	r3, #8
 800481a:	d12e      	bne.n	800487a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800481c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004824:	2200      	movs	r2, #0
 8004826:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f88c 	bl	8004948 <UART_WaitOnFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d021      	beq.n	800487a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483e:	e853 3f00 	ldrex	r3, [r3]
 8004842:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004846:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800484a:	653b      	str	r3, [r7, #80]	; 0x50
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	461a      	mov	r2, r3
 8004852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004854:	647b      	str	r3, [r7, #68]	; 0x44
 8004856:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004858:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800485a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800485c:	e841 2300 	strex	r3, r2, [r1]
 8004860:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1e6      	bne.n	8004836 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2220      	movs	r2, #32
 800486c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e062      	b.n	8004940 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b04      	cmp	r3, #4
 8004886:	d149      	bne.n	800491c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004888:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004890:	2200      	movs	r2, #0
 8004892:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f856 	bl	8004948 <UART_WaitOnFlagUntilTimeout>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d03c      	beq.n	800491c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	e853 3f00 	ldrex	r3, [r3]
 80048ae:	623b      	str	r3, [r7, #32]
   return(result);
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	461a      	mov	r2, r3
 80048be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c0:	633b      	str	r3, [r7, #48]	; 0x30
 80048c2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048c8:	e841 2300 	strex	r3, r2, [r1]
 80048cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1e6      	bne.n	80048a2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3308      	adds	r3, #8
 80048da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	e853 3f00 	ldrex	r3, [r3]
 80048e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0301 	bic.w	r3, r3, #1
 80048ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3308      	adds	r3, #8
 80048f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048f4:	61fa      	str	r2, [r7, #28]
 80048f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	69b9      	ldr	r1, [r7, #24]
 80048fa:	69fa      	ldr	r2, [r7, #28]
 80048fc:	e841 2300 	strex	r3, r2, [r1]
 8004900:	617b      	str	r3, [r7, #20]
   return(result);
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e5      	bne.n	80048d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2220      	movs	r2, #32
 800490c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e011      	b.n	8004940 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2220      	movs	r2, #32
 8004926:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3758      	adds	r7, #88	; 0x58
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	4613      	mov	r3, r2
 8004956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004958:	e049      	b.n	80049ee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004960:	d045      	beq.n	80049ee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004962:	f7fd f8d1 	bl	8001b08 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	429a      	cmp	r2, r3
 8004970:	d302      	bcc.n	8004978 <UART_WaitOnFlagUntilTimeout+0x30>
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e048      	b.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	2b00      	cmp	r3, #0
 8004988:	d031      	beq.n	80049ee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	f003 0308 	and.w	r3, r3, #8
 8004994:	2b08      	cmp	r3, #8
 8004996:	d110      	bne.n	80049ba <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2208      	movs	r2, #8
 800499e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 f8ff 	bl	8004ba4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2208      	movs	r2, #8
 80049aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e029      	b.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049c8:	d111      	bne.n	80049ee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 f8e5 	bl	8004ba4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2220      	movs	r2, #32
 80049de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e00f      	b.n	8004a0e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69da      	ldr	r2, [r3, #28]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	4013      	ands	r3, r2
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	bf0c      	ite	eq
 80049fe:	2301      	moveq	r3, #1
 8004a00:	2300      	movne	r3, #0
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	461a      	mov	r2, r3
 8004a06:	79fb      	ldrb	r3, [r7, #7]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d0a6      	beq.n	800495a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b097      	sub	sp, #92	; 0x5c
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	4613      	mov	r3, r2
 8004a24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	88fa      	ldrh	r2, [r7, #6]
 8004a30:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	88fa      	ldrh	r2, [r7, #6]
 8004a38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4a:	d10e      	bne.n	8004a6a <UART_Start_Receive_IT+0x52>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d105      	bne.n	8004a60 <UART_Start_Receive_IT+0x48>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004a5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a5e:	e02d      	b.n	8004abc <UART_Start_Receive_IT+0xa4>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	22ff      	movs	r2, #255	; 0xff
 8004a64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a68:	e028      	b.n	8004abc <UART_Start_Receive_IT+0xa4>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10d      	bne.n	8004a8e <UART_Start_Receive_IT+0x76>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d104      	bne.n	8004a84 <UART_Start_Receive_IT+0x6c>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	22ff      	movs	r2, #255	; 0xff
 8004a7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a82:	e01b      	b.n	8004abc <UART_Start_Receive_IT+0xa4>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	227f      	movs	r2, #127	; 0x7f
 8004a88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004a8c:	e016      	b.n	8004abc <UART_Start_Receive_IT+0xa4>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a96:	d10d      	bne.n	8004ab4 <UART_Start_Receive_IT+0x9c>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d104      	bne.n	8004aaa <UART_Start_Receive_IT+0x92>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	227f      	movs	r2, #127	; 0x7f
 8004aa4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004aa8:	e008      	b.n	8004abc <UART_Start_Receive_IT+0xa4>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	223f      	movs	r2, #63	; 0x3f
 8004aae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ab2:	e003      	b.n	8004abc <UART_Start_Receive_IT+0xa4>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2222      	movs	r2, #34	; 0x22
 8004ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3308      	adds	r3, #8
 8004ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ade:	f043 0301 	orr.w	r3, r3, #1
 8004ae2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3308      	adds	r3, #8
 8004aea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004aec:	64ba      	str	r2, [r7, #72]	; 0x48
 8004aee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004af2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e5      	bne.n	8004acc <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b08:	d107      	bne.n	8004b1a <UART_Start_Receive_IT+0x102>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d103      	bne.n	8004b1a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4a21      	ldr	r2, [pc, #132]	; (8004b9c <UART_Start_Receive_IT+0x184>)
 8004b16:	669a      	str	r2, [r3, #104]	; 0x68
 8004b18:	e002      	b.n	8004b20 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4a20      	ldr	r2, [pc, #128]	; (8004ba0 <UART_Start_Receive_IT+0x188>)
 8004b1e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d019      	beq.n	8004b5c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b46:	637b      	str	r3, [r7, #52]	; 0x34
 8004b48:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e6      	bne.n	8004b28 <UART_Start_Receive_IT+0x110>
 8004b5a:	e018      	b.n	8004b8e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	e853 3f00 	ldrex	r3, [r3]
 8004b68:	613b      	str	r3, [r7, #16]
   return(result);
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f043 0320 	orr.w	r3, r3, #32
 8004b70:	653b      	str	r3, [r7, #80]	; 0x50
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b7a:	623b      	str	r3, [r7, #32]
 8004b7c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7e:	69f9      	ldr	r1, [r7, #28]
 8004b80:	6a3a      	ldr	r2, [r7, #32]
 8004b82:	e841 2300 	strex	r3, r2, [r1]
 8004b86:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e6      	bne.n	8004b5c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	375c      	adds	r7, #92	; 0x5c
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	08005021 	.word	0x08005021
 8004ba0:	08004e65 	.word	0x08004e65

08004ba4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b095      	sub	sp, #84	; 0x54
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb4:	e853 3f00 	ldrex	r3, [r3]
 8004bb8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bca:	643b      	str	r3, [r7, #64]	; 0x40
 8004bcc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bd2:	e841 2300 	strex	r3, r2, [r1]
 8004bd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1e6      	bne.n	8004bac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3308      	adds	r3, #8
 8004be4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	e853 3f00 	ldrex	r3, [r3]
 8004bec:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	f023 0301 	bic.w	r3, r3, #1
 8004bf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3308      	adds	r3, #8
 8004bfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c06:	e841 2300 	strex	r3, r2, [r1]
 8004c0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1e5      	bne.n	8004bde <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d118      	bne.n	8004c4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	e853 3f00 	ldrex	r3, [r3]
 8004c26:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f023 0310 	bic.w	r3, r3, #16
 8004c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c38:	61bb      	str	r3, [r7, #24]
 8004c3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3c:	6979      	ldr	r1, [r7, #20]
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	e841 2300 	strex	r3, r2, [r1]
 8004c44:	613b      	str	r3, [r7, #16]
   return(result);
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e6      	bne.n	8004c1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c60:	bf00      	nop
 8004c62:	3754      	adds	r7, #84	; 0x54
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f7ff fa50 	bl	8004130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c90:	bf00      	nop
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b08f      	sub	sp, #60	; 0x3c
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ca4:	2b21      	cmp	r3, #33	; 0x21
 8004ca6:	d14d      	bne.n	8004d44 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d132      	bne.n	8004d1a <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	e853 3f00 	ldrex	r3, [r3]
 8004cc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cd4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cda:	e841 2300 	strex	r3, r2, [r1]
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1e6      	bne.n	8004cb4 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	e853 3f00 	ldrex	r3, [r3]
 8004cf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cfa:	633b      	str	r3, [r7, #48]	; 0x30
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	461a      	mov	r2, r3
 8004d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d04:	61bb      	str	r3, [r7, #24]
 8004d06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d08:	6979      	ldr	r1, [r7, #20]
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	e841 2300 	strex	r3, r2, [r1]
 8004d10:	613b      	str	r3, [r7, #16]
   return(result);
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1e6      	bne.n	8004ce6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004d18:	e014      	b.n	8004d44 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1e:	781a      	ldrb	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	b292      	uxth	r2, r2
 8004d26:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004d44:	bf00      	nop
 8004d46:	373c      	adds	r7, #60	; 0x3c
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b091      	sub	sp, #68	; 0x44
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d5c:	2b21      	cmp	r3, #33	; 0x21
 8004d5e:	d151      	bne.n	8004e04 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d132      	bne.n	8004dd2 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	e853 3f00 	ldrex	r3, [r3]
 8004d78:	623b      	str	r3, [r7, #32]
   return(result);
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d80:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d8c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e6      	bne.n	8004d6c <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	e853 3f00 	ldrex	r3, [r3]
 8004daa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004db2:	637b      	str	r3, [r7, #52]	; 0x34
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	461a      	mov	r2, r3
 8004dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dbc:	61fb      	str	r3, [r7, #28]
 8004dbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc0:	69b9      	ldr	r1, [r7, #24]
 8004dc2:	69fa      	ldr	r2, [r7, #28]
 8004dc4:	e841 2300 	strex	r3, r2, [r1]
 8004dc8:	617b      	str	r3, [r7, #20]
   return(result);
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1e6      	bne.n	8004d9e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004dd0:	e018      	b.n	8004e04 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dda:	881a      	ldrh	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004de4:	b292      	uxth	r2, r2
 8004de6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dec:	1c9a      	adds	r2, r3, #2
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004e04:	bf00      	nop
 8004e06:	3744      	adds	r7, #68	; 0x44
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b088      	sub	sp, #32
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e2c:	61fb      	str	r3, [r7, #28]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	61bb      	str	r3, [r7, #24]
 8004e38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6979      	ldr	r1, [r7, #20]
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	613b      	str	r3, [r7, #16]
   return(result);
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e6      	bne.n	8004e18 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7ff f956 	bl	8004108 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e5c:	bf00      	nop
 8004e5e:	3720      	adds	r7, #32
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b09c      	sub	sp, #112	; 0x70
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e72:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e7c:	2b22      	cmp	r3, #34	; 0x22
 8004e7e:	f040 80be 	bne.w	8004ffe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e88:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004e90:	b2d9      	uxtb	r1, r3
 8004e92:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9c:	400a      	ands	r2, r1
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f040 80a3 	bne.w	8005012 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed4:	e853 3f00 	ldrex	r3, [r3]
 8004ed8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004edc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ee0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004eea:	65bb      	str	r3, [r7, #88]	; 0x58
 8004eec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ef0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e6      	bne.n	8004ecc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3308      	adds	r3, #8
 8004f04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f08:	e853 3f00 	ldrex	r3, [r3]
 8004f0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f10:	f023 0301 	bic.w	r3, r3, #1
 8004f14:	667b      	str	r3, [r7, #100]	; 0x64
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3308      	adds	r3, #8
 8004f1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f1e:	647a      	str	r2, [r7, #68]	; 0x44
 8004f20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f26:	e841 2300 	strex	r3, r2, [r1]
 8004f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1e5      	bne.n	8004efe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2220      	movs	r2, #32
 8004f36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a34      	ldr	r2, [pc, #208]	; (800501c <UART_RxISR_8BIT+0x1b8>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d01f      	beq.n	8004f90 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d018      	beq.n	8004f90 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	623b      	str	r3, [r7, #32]
   return(result);
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f72:	663b      	str	r3, [r7, #96]	; 0x60
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f7c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f7e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e6      	bne.n	8004f5e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d12e      	bne.n	8004ff6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0310 	bic.w	r3, r3, #16
 8004fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fbc:	61fb      	str	r3, [r7, #28]
 8004fbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	69b9      	ldr	r1, [r7, #24]
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	e841 2300 	strex	r3, r2, [r1]
 8004fc8:	617b      	str	r3, [r7, #20]
   return(result);
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e6      	bne.n	8004f9e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	f003 0310 	and.w	r3, r3, #16
 8004fda:	2b10      	cmp	r3, #16
 8004fdc:	d103      	bne.n	8004fe6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2210      	movs	r2, #16
 8004fe4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004fec:	4619      	mov	r1, r3
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7fb fcbe 	bl	8000970 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ff4:	e00d      	b.n	8005012 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7ff f890 	bl	800411c <HAL_UART_RxCpltCallback>
}
 8004ffc:	e009      	b.n	8005012 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	8b1b      	ldrh	r3, [r3, #24]
 8005004:	b29a      	uxth	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0208 	orr.w	r2, r2, #8
 800500e:	b292      	uxth	r2, r2
 8005010:	831a      	strh	r2, [r3, #24]
}
 8005012:	bf00      	nop
 8005014:	3770      	adds	r7, #112	; 0x70
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	40008000 	.word	0x40008000

08005020 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b09c      	sub	sp, #112	; 0x70
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800502e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005038:	2b22      	cmp	r3, #34	; 0x22
 800503a:	f040 80be 	bne.w	80051ba <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005044:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800504e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005052:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005056:	4013      	ands	r3, r2
 8005058:	b29a      	uxth	r2, r3
 800505a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800505c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005062:	1c9a      	adds	r2, r3, #2
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800506e:	b29b      	uxth	r3, r3
 8005070:	3b01      	subs	r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005080:	b29b      	uxth	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	f040 80a3 	bne.w	80051ce <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005090:	e853 3f00 	ldrex	r3, [r3]
 8005094:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005098:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800509c:	667b      	str	r3, [r7, #100]	; 0x64
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050a6:	657b      	str	r3, [r7, #84]	; 0x54
 80050a8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80050ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050ae:	e841 2300 	strex	r3, r2, [r1]
 80050b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1e6      	bne.n	8005088 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3308      	adds	r3, #8
 80050c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c4:	e853 3f00 	ldrex	r3, [r3]
 80050c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050cc:	f023 0301 	bic.w	r3, r3, #1
 80050d0:	663b      	str	r3, [r7, #96]	; 0x60
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3308      	adds	r3, #8
 80050d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050da:	643a      	str	r2, [r7, #64]	; 0x40
 80050dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050e2:	e841 2300 	strex	r3, r2, [r1]
 80050e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1e5      	bne.n	80050ba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a34      	ldr	r2, [pc, #208]	; (80051d8 <UART_RxISR_16BIT+0x1b8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d01f      	beq.n	800514c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d018      	beq.n	800514c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	e853 3f00 	ldrex	r3, [r3]
 8005126:	61fb      	str	r3, [r7, #28]
   return(result);
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800512e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	461a      	mov	r2, r3
 8005136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800513a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800513e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005140:	e841 2300 	strex	r3, r2, [r1]
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e6      	bne.n	800511a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005150:	2b01      	cmp	r3, #1
 8005152:	d12e      	bne.n	80051b2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	e853 3f00 	ldrex	r3, [r3]
 8005166:	60bb      	str	r3, [r7, #8]
   return(result);
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f023 0310 	bic.w	r3, r3, #16
 800516e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	461a      	mov	r2, r3
 8005176:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005178:	61bb      	str	r3, [r7, #24]
 800517a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	6979      	ldr	r1, [r7, #20]
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	e841 2300 	strex	r3, r2, [r1]
 8005184:	613b      	str	r3, [r7, #16]
   return(result);
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e6      	bne.n	800515a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f003 0310 	and.w	r3, r3, #16
 8005196:	2b10      	cmp	r3, #16
 8005198:	d103      	bne.n	80051a2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2210      	movs	r2, #16
 80051a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80051a8:	4619      	mov	r1, r3
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7fb fbe0 	bl	8000970 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051b0:	e00d      	b.n	80051ce <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7fe ffb2 	bl	800411c <HAL_UART_RxCpltCallback>
}
 80051b8:	e009      	b.n	80051ce <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	8b1b      	ldrh	r3, [r3, #24]
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0208 	orr.w	r2, r2, #8
 80051ca:	b292      	uxth	r2, r2
 80051cc:	831a      	strh	r2, [r3, #24]
}
 80051ce:	bf00      	nop
 80051d0:	3770      	adds	r7, #112	; 0x70
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	40008000 	.word	0x40008000

080051dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08c      	sub	sp, #48	; 0x30
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	4613      	mov	r3, r2
 80051fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800520a:	2b20      	cmp	r3, #32
 800520c:	d13b      	bne.n	8005286 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8005214:	88fb      	ldrh	r3, [r7, #6]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e034      	b.n	8005288 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	665a      	str	r2, [r3, #100]	; 0x64

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800522a:	88fb      	ldrh	r3, [r7, #6]
 800522c:	461a      	mov	r2, r3
 800522e:	68b9      	ldr	r1, [r7, #8]
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f7ff fbf1 	bl	8004a18 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800523a:	2b01      	cmp	r3, #1
 800523c:	d11d      	bne.n	800527a <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2210      	movs	r2, #16
 8005244:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	e853 3f00 	ldrex	r3, [r3]
 8005252:	617b      	str	r3, [r7, #20]
   return(result);
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f043 0310 	orr.w	r3, r3, #16
 800525a:	62bb      	str	r3, [r7, #40]	; 0x28
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	461a      	mov	r2, r3
 8005262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005264:	627b      	str	r3, [r7, #36]	; 0x24
 8005266:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005268:	6a39      	ldr	r1, [r7, #32]
 800526a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800526c:	e841 2300 	strex	r3, r2, [r1]
 8005270:	61fb      	str	r3, [r7, #28]
   return(result);
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1e6      	bne.n	8005246 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8005278:	e002      	b.n	8005280 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 8005280:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005284:	e000      	b.n	8005288 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8005286:	2302      	movs	r3, #2
  }
}
 8005288:	4618      	mov	r0, r3
 800528a:	3730      	adds	r7, #48	; 0x30
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <__sflush_r>:
 8005290:	898a      	ldrh	r2, [r1, #12]
 8005292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005296:	4605      	mov	r5, r0
 8005298:	0710      	lsls	r0, r2, #28
 800529a:	460c      	mov	r4, r1
 800529c:	d458      	bmi.n	8005350 <__sflush_r+0xc0>
 800529e:	684b      	ldr	r3, [r1, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	dc05      	bgt.n	80052b0 <__sflush_r+0x20>
 80052a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	dc02      	bgt.n	80052b0 <__sflush_r+0x20>
 80052aa:	2000      	movs	r0, #0
 80052ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052b2:	2e00      	cmp	r6, #0
 80052b4:	d0f9      	beq.n	80052aa <__sflush_r+0x1a>
 80052b6:	2300      	movs	r3, #0
 80052b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052bc:	682f      	ldr	r7, [r5, #0]
 80052be:	6a21      	ldr	r1, [r4, #32]
 80052c0:	602b      	str	r3, [r5, #0]
 80052c2:	d032      	beq.n	800532a <__sflush_r+0x9a>
 80052c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052c6:	89a3      	ldrh	r3, [r4, #12]
 80052c8:	075a      	lsls	r2, r3, #29
 80052ca:	d505      	bpl.n	80052d8 <__sflush_r+0x48>
 80052cc:	6863      	ldr	r3, [r4, #4]
 80052ce:	1ac0      	subs	r0, r0, r3
 80052d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052d2:	b10b      	cbz	r3, 80052d8 <__sflush_r+0x48>
 80052d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052d6:	1ac0      	subs	r0, r0, r3
 80052d8:	2300      	movs	r3, #0
 80052da:	4602      	mov	r2, r0
 80052dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052de:	6a21      	ldr	r1, [r4, #32]
 80052e0:	4628      	mov	r0, r5
 80052e2:	47b0      	blx	r6
 80052e4:	1c43      	adds	r3, r0, #1
 80052e6:	89a3      	ldrh	r3, [r4, #12]
 80052e8:	d106      	bne.n	80052f8 <__sflush_r+0x68>
 80052ea:	6829      	ldr	r1, [r5, #0]
 80052ec:	291d      	cmp	r1, #29
 80052ee:	d82b      	bhi.n	8005348 <__sflush_r+0xb8>
 80052f0:	4a29      	ldr	r2, [pc, #164]	; (8005398 <__sflush_r+0x108>)
 80052f2:	410a      	asrs	r2, r1
 80052f4:	07d6      	lsls	r6, r2, #31
 80052f6:	d427      	bmi.n	8005348 <__sflush_r+0xb8>
 80052f8:	2200      	movs	r2, #0
 80052fa:	6062      	str	r2, [r4, #4]
 80052fc:	04d9      	lsls	r1, r3, #19
 80052fe:	6922      	ldr	r2, [r4, #16]
 8005300:	6022      	str	r2, [r4, #0]
 8005302:	d504      	bpl.n	800530e <__sflush_r+0x7e>
 8005304:	1c42      	adds	r2, r0, #1
 8005306:	d101      	bne.n	800530c <__sflush_r+0x7c>
 8005308:	682b      	ldr	r3, [r5, #0]
 800530a:	b903      	cbnz	r3, 800530e <__sflush_r+0x7e>
 800530c:	6560      	str	r0, [r4, #84]	; 0x54
 800530e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005310:	602f      	str	r7, [r5, #0]
 8005312:	2900      	cmp	r1, #0
 8005314:	d0c9      	beq.n	80052aa <__sflush_r+0x1a>
 8005316:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800531a:	4299      	cmp	r1, r3
 800531c:	d002      	beq.n	8005324 <__sflush_r+0x94>
 800531e:	4628      	mov	r0, r5
 8005320:	f000 fab6 	bl	8005890 <_free_r>
 8005324:	2000      	movs	r0, #0
 8005326:	6360      	str	r0, [r4, #52]	; 0x34
 8005328:	e7c0      	b.n	80052ac <__sflush_r+0x1c>
 800532a:	2301      	movs	r3, #1
 800532c:	4628      	mov	r0, r5
 800532e:	47b0      	blx	r6
 8005330:	1c41      	adds	r1, r0, #1
 8005332:	d1c8      	bne.n	80052c6 <__sflush_r+0x36>
 8005334:	682b      	ldr	r3, [r5, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0c5      	beq.n	80052c6 <__sflush_r+0x36>
 800533a:	2b1d      	cmp	r3, #29
 800533c:	d001      	beq.n	8005342 <__sflush_r+0xb2>
 800533e:	2b16      	cmp	r3, #22
 8005340:	d101      	bne.n	8005346 <__sflush_r+0xb6>
 8005342:	602f      	str	r7, [r5, #0]
 8005344:	e7b1      	b.n	80052aa <__sflush_r+0x1a>
 8005346:	89a3      	ldrh	r3, [r4, #12]
 8005348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800534c:	81a3      	strh	r3, [r4, #12]
 800534e:	e7ad      	b.n	80052ac <__sflush_r+0x1c>
 8005350:	690f      	ldr	r7, [r1, #16]
 8005352:	2f00      	cmp	r7, #0
 8005354:	d0a9      	beq.n	80052aa <__sflush_r+0x1a>
 8005356:	0793      	lsls	r3, r2, #30
 8005358:	680e      	ldr	r6, [r1, #0]
 800535a:	bf08      	it	eq
 800535c:	694b      	ldreq	r3, [r1, #20]
 800535e:	600f      	str	r7, [r1, #0]
 8005360:	bf18      	it	ne
 8005362:	2300      	movne	r3, #0
 8005364:	eba6 0807 	sub.w	r8, r6, r7
 8005368:	608b      	str	r3, [r1, #8]
 800536a:	f1b8 0f00 	cmp.w	r8, #0
 800536e:	dd9c      	ble.n	80052aa <__sflush_r+0x1a>
 8005370:	6a21      	ldr	r1, [r4, #32]
 8005372:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005374:	4643      	mov	r3, r8
 8005376:	463a      	mov	r2, r7
 8005378:	4628      	mov	r0, r5
 800537a:	47b0      	blx	r6
 800537c:	2800      	cmp	r0, #0
 800537e:	dc06      	bgt.n	800538e <__sflush_r+0xfe>
 8005380:	89a3      	ldrh	r3, [r4, #12]
 8005382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005386:	81a3      	strh	r3, [r4, #12]
 8005388:	f04f 30ff 	mov.w	r0, #4294967295
 800538c:	e78e      	b.n	80052ac <__sflush_r+0x1c>
 800538e:	4407      	add	r7, r0
 8005390:	eba8 0800 	sub.w	r8, r8, r0
 8005394:	e7e9      	b.n	800536a <__sflush_r+0xda>
 8005396:	bf00      	nop
 8005398:	dfbffffe 	.word	0xdfbffffe

0800539c <_fflush_r>:
 800539c:	b538      	push	{r3, r4, r5, lr}
 800539e:	690b      	ldr	r3, [r1, #16]
 80053a0:	4605      	mov	r5, r0
 80053a2:	460c      	mov	r4, r1
 80053a4:	b913      	cbnz	r3, 80053ac <_fflush_r+0x10>
 80053a6:	2500      	movs	r5, #0
 80053a8:	4628      	mov	r0, r5
 80053aa:	bd38      	pop	{r3, r4, r5, pc}
 80053ac:	b118      	cbz	r0, 80053b6 <_fflush_r+0x1a>
 80053ae:	6a03      	ldr	r3, [r0, #32]
 80053b0:	b90b      	cbnz	r3, 80053b6 <_fflush_r+0x1a>
 80053b2:	f000 f8bb 	bl	800552c <__sinit>
 80053b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d0f3      	beq.n	80053a6 <_fflush_r+0xa>
 80053be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053c0:	07d0      	lsls	r0, r2, #31
 80053c2:	d404      	bmi.n	80053ce <_fflush_r+0x32>
 80053c4:	0599      	lsls	r1, r3, #22
 80053c6:	d402      	bmi.n	80053ce <_fflush_r+0x32>
 80053c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053ca:	f000 fa5e 	bl	800588a <__retarget_lock_acquire_recursive>
 80053ce:	4628      	mov	r0, r5
 80053d0:	4621      	mov	r1, r4
 80053d2:	f7ff ff5d 	bl	8005290 <__sflush_r>
 80053d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053d8:	07da      	lsls	r2, r3, #31
 80053da:	4605      	mov	r5, r0
 80053dc:	d4e4      	bmi.n	80053a8 <_fflush_r+0xc>
 80053de:	89a3      	ldrh	r3, [r4, #12]
 80053e0:	059b      	lsls	r3, r3, #22
 80053e2:	d4e1      	bmi.n	80053a8 <_fflush_r+0xc>
 80053e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053e6:	f000 fa51 	bl	800588c <__retarget_lock_release_recursive>
 80053ea:	e7dd      	b.n	80053a8 <_fflush_r+0xc>

080053ec <fflush>:
 80053ec:	4601      	mov	r1, r0
 80053ee:	b920      	cbnz	r0, 80053fa <fflush+0xe>
 80053f0:	4a04      	ldr	r2, [pc, #16]	; (8005404 <fflush+0x18>)
 80053f2:	4905      	ldr	r1, [pc, #20]	; (8005408 <fflush+0x1c>)
 80053f4:	4805      	ldr	r0, [pc, #20]	; (800540c <fflush+0x20>)
 80053f6:	f000 b8b1 	b.w	800555c <_fwalk_sglue>
 80053fa:	4b05      	ldr	r3, [pc, #20]	; (8005410 <fflush+0x24>)
 80053fc:	6818      	ldr	r0, [r3, #0]
 80053fe:	f7ff bfcd 	b.w	800539c <_fflush_r>
 8005402:	bf00      	nop
 8005404:	20000010 	.word	0x20000010
 8005408:	0800539d 	.word	0x0800539d
 800540c:	2000001c 	.word	0x2000001c
 8005410:	20000068 	.word	0x20000068

08005414 <std>:
 8005414:	2300      	movs	r3, #0
 8005416:	b510      	push	{r4, lr}
 8005418:	4604      	mov	r4, r0
 800541a:	e9c0 3300 	strd	r3, r3, [r0]
 800541e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005422:	6083      	str	r3, [r0, #8]
 8005424:	8181      	strh	r1, [r0, #12]
 8005426:	6643      	str	r3, [r0, #100]	; 0x64
 8005428:	81c2      	strh	r2, [r0, #14]
 800542a:	6183      	str	r3, [r0, #24]
 800542c:	4619      	mov	r1, r3
 800542e:	2208      	movs	r2, #8
 8005430:	305c      	adds	r0, #92	; 0x5c
 8005432:	f000 f99b 	bl	800576c <memset>
 8005436:	4b0d      	ldr	r3, [pc, #52]	; (800546c <std+0x58>)
 8005438:	6263      	str	r3, [r4, #36]	; 0x24
 800543a:	4b0d      	ldr	r3, [pc, #52]	; (8005470 <std+0x5c>)
 800543c:	62a3      	str	r3, [r4, #40]	; 0x28
 800543e:	4b0d      	ldr	r3, [pc, #52]	; (8005474 <std+0x60>)
 8005440:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005442:	4b0d      	ldr	r3, [pc, #52]	; (8005478 <std+0x64>)
 8005444:	6323      	str	r3, [r4, #48]	; 0x30
 8005446:	4b0d      	ldr	r3, [pc, #52]	; (800547c <std+0x68>)
 8005448:	6224      	str	r4, [r4, #32]
 800544a:	429c      	cmp	r4, r3
 800544c:	d006      	beq.n	800545c <std+0x48>
 800544e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005452:	4294      	cmp	r4, r2
 8005454:	d002      	beq.n	800545c <std+0x48>
 8005456:	33d0      	adds	r3, #208	; 0xd0
 8005458:	429c      	cmp	r4, r3
 800545a:	d105      	bne.n	8005468 <std+0x54>
 800545c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005464:	f000 ba10 	b.w	8005888 <__retarget_lock_init_recursive>
 8005468:	bd10      	pop	{r4, pc}
 800546a:	bf00      	nop
 800546c:	080055bd 	.word	0x080055bd
 8005470:	080055df 	.word	0x080055df
 8005474:	08005617 	.word	0x08005617
 8005478:	0800563b 	.word	0x0800563b
 800547c:	200009ac 	.word	0x200009ac

08005480 <stdio_exit_handler>:
 8005480:	4a02      	ldr	r2, [pc, #8]	; (800548c <stdio_exit_handler+0xc>)
 8005482:	4903      	ldr	r1, [pc, #12]	; (8005490 <stdio_exit_handler+0x10>)
 8005484:	4803      	ldr	r0, [pc, #12]	; (8005494 <stdio_exit_handler+0x14>)
 8005486:	f000 b869 	b.w	800555c <_fwalk_sglue>
 800548a:	bf00      	nop
 800548c:	20000010 	.word	0x20000010
 8005490:	0800539d 	.word	0x0800539d
 8005494:	2000001c 	.word	0x2000001c

08005498 <cleanup_stdio>:
 8005498:	6841      	ldr	r1, [r0, #4]
 800549a:	4b0c      	ldr	r3, [pc, #48]	; (80054cc <cleanup_stdio+0x34>)
 800549c:	4299      	cmp	r1, r3
 800549e:	b510      	push	{r4, lr}
 80054a0:	4604      	mov	r4, r0
 80054a2:	d001      	beq.n	80054a8 <cleanup_stdio+0x10>
 80054a4:	f7ff ff7a 	bl	800539c <_fflush_r>
 80054a8:	68a1      	ldr	r1, [r4, #8]
 80054aa:	4b09      	ldr	r3, [pc, #36]	; (80054d0 <cleanup_stdio+0x38>)
 80054ac:	4299      	cmp	r1, r3
 80054ae:	d002      	beq.n	80054b6 <cleanup_stdio+0x1e>
 80054b0:	4620      	mov	r0, r4
 80054b2:	f7ff ff73 	bl	800539c <_fflush_r>
 80054b6:	68e1      	ldr	r1, [r4, #12]
 80054b8:	4b06      	ldr	r3, [pc, #24]	; (80054d4 <cleanup_stdio+0x3c>)
 80054ba:	4299      	cmp	r1, r3
 80054bc:	d004      	beq.n	80054c8 <cleanup_stdio+0x30>
 80054be:	4620      	mov	r0, r4
 80054c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054c4:	f7ff bf6a 	b.w	800539c <_fflush_r>
 80054c8:	bd10      	pop	{r4, pc}
 80054ca:	bf00      	nop
 80054cc:	200009ac 	.word	0x200009ac
 80054d0:	20000a14 	.word	0x20000a14
 80054d4:	20000a7c 	.word	0x20000a7c

080054d8 <global_stdio_init.part.0>:
 80054d8:	b510      	push	{r4, lr}
 80054da:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <global_stdio_init.part.0+0x30>)
 80054dc:	4c0b      	ldr	r4, [pc, #44]	; (800550c <global_stdio_init.part.0+0x34>)
 80054de:	4a0c      	ldr	r2, [pc, #48]	; (8005510 <global_stdio_init.part.0+0x38>)
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	4620      	mov	r0, r4
 80054e4:	2200      	movs	r2, #0
 80054e6:	2104      	movs	r1, #4
 80054e8:	f7ff ff94 	bl	8005414 <std>
 80054ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80054f0:	2201      	movs	r2, #1
 80054f2:	2109      	movs	r1, #9
 80054f4:	f7ff ff8e 	bl	8005414 <std>
 80054f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80054fc:	2202      	movs	r2, #2
 80054fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005502:	2112      	movs	r1, #18
 8005504:	f7ff bf86 	b.w	8005414 <std>
 8005508:	20000ae4 	.word	0x20000ae4
 800550c:	200009ac 	.word	0x200009ac
 8005510:	08005481 	.word	0x08005481

08005514 <__sfp_lock_acquire>:
 8005514:	4801      	ldr	r0, [pc, #4]	; (800551c <__sfp_lock_acquire+0x8>)
 8005516:	f000 b9b8 	b.w	800588a <__retarget_lock_acquire_recursive>
 800551a:	bf00      	nop
 800551c:	20000aed 	.word	0x20000aed

08005520 <__sfp_lock_release>:
 8005520:	4801      	ldr	r0, [pc, #4]	; (8005528 <__sfp_lock_release+0x8>)
 8005522:	f000 b9b3 	b.w	800588c <__retarget_lock_release_recursive>
 8005526:	bf00      	nop
 8005528:	20000aed 	.word	0x20000aed

0800552c <__sinit>:
 800552c:	b510      	push	{r4, lr}
 800552e:	4604      	mov	r4, r0
 8005530:	f7ff fff0 	bl	8005514 <__sfp_lock_acquire>
 8005534:	6a23      	ldr	r3, [r4, #32]
 8005536:	b11b      	cbz	r3, 8005540 <__sinit+0x14>
 8005538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800553c:	f7ff bff0 	b.w	8005520 <__sfp_lock_release>
 8005540:	4b04      	ldr	r3, [pc, #16]	; (8005554 <__sinit+0x28>)
 8005542:	6223      	str	r3, [r4, #32]
 8005544:	4b04      	ldr	r3, [pc, #16]	; (8005558 <__sinit+0x2c>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1f5      	bne.n	8005538 <__sinit+0xc>
 800554c:	f7ff ffc4 	bl	80054d8 <global_stdio_init.part.0>
 8005550:	e7f2      	b.n	8005538 <__sinit+0xc>
 8005552:	bf00      	nop
 8005554:	08005499 	.word	0x08005499
 8005558:	20000ae4 	.word	0x20000ae4

0800555c <_fwalk_sglue>:
 800555c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005560:	4607      	mov	r7, r0
 8005562:	4688      	mov	r8, r1
 8005564:	4614      	mov	r4, r2
 8005566:	2600      	movs	r6, #0
 8005568:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800556c:	f1b9 0901 	subs.w	r9, r9, #1
 8005570:	d505      	bpl.n	800557e <_fwalk_sglue+0x22>
 8005572:	6824      	ldr	r4, [r4, #0]
 8005574:	2c00      	cmp	r4, #0
 8005576:	d1f7      	bne.n	8005568 <_fwalk_sglue+0xc>
 8005578:	4630      	mov	r0, r6
 800557a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800557e:	89ab      	ldrh	r3, [r5, #12]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d907      	bls.n	8005594 <_fwalk_sglue+0x38>
 8005584:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005588:	3301      	adds	r3, #1
 800558a:	d003      	beq.n	8005594 <_fwalk_sglue+0x38>
 800558c:	4629      	mov	r1, r5
 800558e:	4638      	mov	r0, r7
 8005590:	47c0      	blx	r8
 8005592:	4306      	orrs	r6, r0
 8005594:	3568      	adds	r5, #104	; 0x68
 8005596:	e7e9      	b.n	800556c <_fwalk_sglue+0x10>

08005598 <iprintf>:
 8005598:	b40f      	push	{r0, r1, r2, r3}
 800559a:	b507      	push	{r0, r1, r2, lr}
 800559c:	4906      	ldr	r1, [pc, #24]	; (80055b8 <iprintf+0x20>)
 800559e:	ab04      	add	r3, sp, #16
 80055a0:	6808      	ldr	r0, [r1, #0]
 80055a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80055a6:	6881      	ldr	r1, [r0, #8]
 80055a8:	9301      	str	r3, [sp, #4]
 80055aa:	f000 fa93 	bl	8005ad4 <_vfiprintf_r>
 80055ae:	b003      	add	sp, #12
 80055b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80055b4:	b004      	add	sp, #16
 80055b6:	4770      	bx	lr
 80055b8:	20000068 	.word	0x20000068

080055bc <__sread>:
 80055bc:	b510      	push	{r4, lr}
 80055be:	460c      	mov	r4, r1
 80055c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055c4:	f000 f912 	bl	80057ec <_read_r>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	bfab      	itete	ge
 80055cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055ce:	89a3      	ldrhlt	r3, [r4, #12]
 80055d0:	181b      	addge	r3, r3, r0
 80055d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055d6:	bfac      	ite	ge
 80055d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80055da:	81a3      	strhlt	r3, [r4, #12]
 80055dc:	bd10      	pop	{r4, pc}

080055de <__swrite>:
 80055de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055e2:	461f      	mov	r7, r3
 80055e4:	898b      	ldrh	r3, [r1, #12]
 80055e6:	05db      	lsls	r3, r3, #23
 80055e8:	4605      	mov	r5, r0
 80055ea:	460c      	mov	r4, r1
 80055ec:	4616      	mov	r6, r2
 80055ee:	d505      	bpl.n	80055fc <__swrite+0x1e>
 80055f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055f4:	2302      	movs	r3, #2
 80055f6:	2200      	movs	r2, #0
 80055f8:	f000 f8e6 	bl	80057c8 <_lseek_r>
 80055fc:	89a3      	ldrh	r3, [r4, #12]
 80055fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005602:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005606:	81a3      	strh	r3, [r4, #12]
 8005608:	4632      	mov	r2, r6
 800560a:	463b      	mov	r3, r7
 800560c:	4628      	mov	r0, r5
 800560e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005612:	f000 b8fd 	b.w	8005810 <_write_r>

08005616 <__sseek>:
 8005616:	b510      	push	{r4, lr}
 8005618:	460c      	mov	r4, r1
 800561a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800561e:	f000 f8d3 	bl	80057c8 <_lseek_r>
 8005622:	1c43      	adds	r3, r0, #1
 8005624:	89a3      	ldrh	r3, [r4, #12]
 8005626:	bf15      	itete	ne
 8005628:	6560      	strne	r0, [r4, #84]	; 0x54
 800562a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800562e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005632:	81a3      	strheq	r3, [r4, #12]
 8005634:	bf18      	it	ne
 8005636:	81a3      	strhne	r3, [r4, #12]
 8005638:	bd10      	pop	{r4, pc}

0800563a <__sclose>:
 800563a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800563e:	f000 b8b3 	b.w	80057a8 <_close_r>

08005642 <__swbuf_r>:
 8005642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005644:	460e      	mov	r6, r1
 8005646:	4614      	mov	r4, r2
 8005648:	4605      	mov	r5, r0
 800564a:	b118      	cbz	r0, 8005654 <__swbuf_r+0x12>
 800564c:	6a03      	ldr	r3, [r0, #32]
 800564e:	b90b      	cbnz	r3, 8005654 <__swbuf_r+0x12>
 8005650:	f7ff ff6c 	bl	800552c <__sinit>
 8005654:	69a3      	ldr	r3, [r4, #24]
 8005656:	60a3      	str	r3, [r4, #8]
 8005658:	89a3      	ldrh	r3, [r4, #12]
 800565a:	071a      	lsls	r2, r3, #28
 800565c:	d525      	bpl.n	80056aa <__swbuf_r+0x68>
 800565e:	6923      	ldr	r3, [r4, #16]
 8005660:	b31b      	cbz	r3, 80056aa <__swbuf_r+0x68>
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	6922      	ldr	r2, [r4, #16]
 8005666:	1a98      	subs	r0, r3, r2
 8005668:	6963      	ldr	r3, [r4, #20]
 800566a:	b2f6      	uxtb	r6, r6
 800566c:	4283      	cmp	r3, r0
 800566e:	4637      	mov	r7, r6
 8005670:	dc04      	bgt.n	800567c <__swbuf_r+0x3a>
 8005672:	4621      	mov	r1, r4
 8005674:	4628      	mov	r0, r5
 8005676:	f7ff fe91 	bl	800539c <_fflush_r>
 800567a:	b9e0      	cbnz	r0, 80056b6 <__swbuf_r+0x74>
 800567c:	68a3      	ldr	r3, [r4, #8]
 800567e:	3b01      	subs	r3, #1
 8005680:	60a3      	str	r3, [r4, #8]
 8005682:	6823      	ldr	r3, [r4, #0]
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	6022      	str	r2, [r4, #0]
 8005688:	701e      	strb	r6, [r3, #0]
 800568a:	6962      	ldr	r2, [r4, #20]
 800568c:	1c43      	adds	r3, r0, #1
 800568e:	429a      	cmp	r2, r3
 8005690:	d004      	beq.n	800569c <__swbuf_r+0x5a>
 8005692:	89a3      	ldrh	r3, [r4, #12]
 8005694:	07db      	lsls	r3, r3, #31
 8005696:	d506      	bpl.n	80056a6 <__swbuf_r+0x64>
 8005698:	2e0a      	cmp	r6, #10
 800569a:	d104      	bne.n	80056a6 <__swbuf_r+0x64>
 800569c:	4621      	mov	r1, r4
 800569e:	4628      	mov	r0, r5
 80056a0:	f7ff fe7c 	bl	800539c <_fflush_r>
 80056a4:	b938      	cbnz	r0, 80056b6 <__swbuf_r+0x74>
 80056a6:	4638      	mov	r0, r7
 80056a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056aa:	4621      	mov	r1, r4
 80056ac:	4628      	mov	r0, r5
 80056ae:	f000 f805 	bl	80056bc <__swsetup_r>
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d0d5      	beq.n	8005662 <__swbuf_r+0x20>
 80056b6:	f04f 37ff 	mov.w	r7, #4294967295
 80056ba:	e7f4      	b.n	80056a6 <__swbuf_r+0x64>

080056bc <__swsetup_r>:
 80056bc:	b538      	push	{r3, r4, r5, lr}
 80056be:	4b2a      	ldr	r3, [pc, #168]	; (8005768 <__swsetup_r+0xac>)
 80056c0:	4605      	mov	r5, r0
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	460c      	mov	r4, r1
 80056c6:	b118      	cbz	r0, 80056d0 <__swsetup_r+0x14>
 80056c8:	6a03      	ldr	r3, [r0, #32]
 80056ca:	b90b      	cbnz	r3, 80056d0 <__swsetup_r+0x14>
 80056cc:	f7ff ff2e 	bl	800552c <__sinit>
 80056d0:	89a3      	ldrh	r3, [r4, #12]
 80056d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056d6:	0718      	lsls	r0, r3, #28
 80056d8:	d422      	bmi.n	8005720 <__swsetup_r+0x64>
 80056da:	06d9      	lsls	r1, r3, #27
 80056dc:	d407      	bmi.n	80056ee <__swsetup_r+0x32>
 80056de:	2309      	movs	r3, #9
 80056e0:	602b      	str	r3, [r5, #0]
 80056e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80056e6:	81a3      	strh	r3, [r4, #12]
 80056e8:	f04f 30ff 	mov.w	r0, #4294967295
 80056ec:	e034      	b.n	8005758 <__swsetup_r+0x9c>
 80056ee:	0758      	lsls	r0, r3, #29
 80056f0:	d512      	bpl.n	8005718 <__swsetup_r+0x5c>
 80056f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056f4:	b141      	cbz	r1, 8005708 <__swsetup_r+0x4c>
 80056f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056fa:	4299      	cmp	r1, r3
 80056fc:	d002      	beq.n	8005704 <__swsetup_r+0x48>
 80056fe:	4628      	mov	r0, r5
 8005700:	f000 f8c6 	bl	8005890 <_free_r>
 8005704:	2300      	movs	r3, #0
 8005706:	6363      	str	r3, [r4, #52]	; 0x34
 8005708:	89a3      	ldrh	r3, [r4, #12]
 800570a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800570e:	81a3      	strh	r3, [r4, #12]
 8005710:	2300      	movs	r3, #0
 8005712:	6063      	str	r3, [r4, #4]
 8005714:	6923      	ldr	r3, [r4, #16]
 8005716:	6023      	str	r3, [r4, #0]
 8005718:	89a3      	ldrh	r3, [r4, #12]
 800571a:	f043 0308 	orr.w	r3, r3, #8
 800571e:	81a3      	strh	r3, [r4, #12]
 8005720:	6923      	ldr	r3, [r4, #16]
 8005722:	b94b      	cbnz	r3, 8005738 <__swsetup_r+0x7c>
 8005724:	89a3      	ldrh	r3, [r4, #12]
 8005726:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800572a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800572e:	d003      	beq.n	8005738 <__swsetup_r+0x7c>
 8005730:	4621      	mov	r1, r4
 8005732:	4628      	mov	r0, r5
 8005734:	f000 fc9e 	bl	8006074 <__smakebuf_r>
 8005738:	89a0      	ldrh	r0, [r4, #12]
 800573a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800573e:	f010 0301 	ands.w	r3, r0, #1
 8005742:	d00a      	beq.n	800575a <__swsetup_r+0x9e>
 8005744:	2300      	movs	r3, #0
 8005746:	60a3      	str	r3, [r4, #8]
 8005748:	6963      	ldr	r3, [r4, #20]
 800574a:	425b      	negs	r3, r3
 800574c:	61a3      	str	r3, [r4, #24]
 800574e:	6923      	ldr	r3, [r4, #16]
 8005750:	b943      	cbnz	r3, 8005764 <__swsetup_r+0xa8>
 8005752:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005756:	d1c4      	bne.n	80056e2 <__swsetup_r+0x26>
 8005758:	bd38      	pop	{r3, r4, r5, pc}
 800575a:	0781      	lsls	r1, r0, #30
 800575c:	bf58      	it	pl
 800575e:	6963      	ldrpl	r3, [r4, #20]
 8005760:	60a3      	str	r3, [r4, #8]
 8005762:	e7f4      	b.n	800574e <__swsetup_r+0x92>
 8005764:	2000      	movs	r0, #0
 8005766:	e7f7      	b.n	8005758 <__swsetup_r+0x9c>
 8005768:	20000068 	.word	0x20000068

0800576c <memset>:
 800576c:	4402      	add	r2, r0
 800576e:	4603      	mov	r3, r0
 8005770:	4293      	cmp	r3, r2
 8005772:	d100      	bne.n	8005776 <memset+0xa>
 8005774:	4770      	bx	lr
 8005776:	f803 1b01 	strb.w	r1, [r3], #1
 800577a:	e7f9      	b.n	8005770 <memset+0x4>

0800577c <strstr>:
 800577c:	780a      	ldrb	r2, [r1, #0]
 800577e:	b570      	push	{r4, r5, r6, lr}
 8005780:	b96a      	cbnz	r2, 800579e <strstr+0x22>
 8005782:	bd70      	pop	{r4, r5, r6, pc}
 8005784:	429a      	cmp	r2, r3
 8005786:	d109      	bne.n	800579c <strstr+0x20>
 8005788:	460c      	mov	r4, r1
 800578a:	4605      	mov	r5, r0
 800578c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005790:	2b00      	cmp	r3, #0
 8005792:	d0f6      	beq.n	8005782 <strstr+0x6>
 8005794:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005798:	429e      	cmp	r6, r3
 800579a:	d0f7      	beq.n	800578c <strstr+0x10>
 800579c:	3001      	adds	r0, #1
 800579e:	7803      	ldrb	r3, [r0, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1ef      	bne.n	8005784 <strstr+0x8>
 80057a4:	4618      	mov	r0, r3
 80057a6:	e7ec      	b.n	8005782 <strstr+0x6>

080057a8 <_close_r>:
 80057a8:	b538      	push	{r3, r4, r5, lr}
 80057aa:	4d06      	ldr	r5, [pc, #24]	; (80057c4 <_close_r+0x1c>)
 80057ac:	2300      	movs	r3, #0
 80057ae:	4604      	mov	r4, r0
 80057b0:	4608      	mov	r0, r1
 80057b2:	602b      	str	r3, [r5, #0]
 80057b4:	f7fb fa67 	bl	8000c86 <_close>
 80057b8:	1c43      	adds	r3, r0, #1
 80057ba:	d102      	bne.n	80057c2 <_close_r+0x1a>
 80057bc:	682b      	ldr	r3, [r5, #0]
 80057be:	b103      	cbz	r3, 80057c2 <_close_r+0x1a>
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	bd38      	pop	{r3, r4, r5, pc}
 80057c4:	20000ae8 	.word	0x20000ae8

080057c8 <_lseek_r>:
 80057c8:	b538      	push	{r3, r4, r5, lr}
 80057ca:	4d07      	ldr	r5, [pc, #28]	; (80057e8 <_lseek_r+0x20>)
 80057cc:	4604      	mov	r4, r0
 80057ce:	4608      	mov	r0, r1
 80057d0:	4611      	mov	r1, r2
 80057d2:	2200      	movs	r2, #0
 80057d4:	602a      	str	r2, [r5, #0]
 80057d6:	461a      	mov	r2, r3
 80057d8:	f7fb fa7c 	bl	8000cd4 <_lseek>
 80057dc:	1c43      	adds	r3, r0, #1
 80057de:	d102      	bne.n	80057e6 <_lseek_r+0x1e>
 80057e0:	682b      	ldr	r3, [r5, #0]
 80057e2:	b103      	cbz	r3, 80057e6 <_lseek_r+0x1e>
 80057e4:	6023      	str	r3, [r4, #0]
 80057e6:	bd38      	pop	{r3, r4, r5, pc}
 80057e8:	20000ae8 	.word	0x20000ae8

080057ec <_read_r>:
 80057ec:	b538      	push	{r3, r4, r5, lr}
 80057ee:	4d07      	ldr	r5, [pc, #28]	; (800580c <_read_r+0x20>)
 80057f0:	4604      	mov	r4, r0
 80057f2:	4608      	mov	r0, r1
 80057f4:	4611      	mov	r1, r2
 80057f6:	2200      	movs	r2, #0
 80057f8:	602a      	str	r2, [r5, #0]
 80057fa:	461a      	mov	r2, r3
 80057fc:	f7fb fa0a 	bl	8000c14 <_read>
 8005800:	1c43      	adds	r3, r0, #1
 8005802:	d102      	bne.n	800580a <_read_r+0x1e>
 8005804:	682b      	ldr	r3, [r5, #0]
 8005806:	b103      	cbz	r3, 800580a <_read_r+0x1e>
 8005808:	6023      	str	r3, [r4, #0]
 800580a:	bd38      	pop	{r3, r4, r5, pc}
 800580c:	20000ae8 	.word	0x20000ae8

08005810 <_write_r>:
 8005810:	b538      	push	{r3, r4, r5, lr}
 8005812:	4d07      	ldr	r5, [pc, #28]	; (8005830 <_write_r+0x20>)
 8005814:	4604      	mov	r4, r0
 8005816:	4608      	mov	r0, r1
 8005818:	4611      	mov	r1, r2
 800581a:	2200      	movs	r2, #0
 800581c:	602a      	str	r2, [r5, #0]
 800581e:	461a      	mov	r2, r3
 8005820:	f7fb fa15 	bl	8000c4e <_write>
 8005824:	1c43      	adds	r3, r0, #1
 8005826:	d102      	bne.n	800582e <_write_r+0x1e>
 8005828:	682b      	ldr	r3, [r5, #0]
 800582a:	b103      	cbz	r3, 800582e <_write_r+0x1e>
 800582c:	6023      	str	r3, [r4, #0]
 800582e:	bd38      	pop	{r3, r4, r5, pc}
 8005830:	20000ae8 	.word	0x20000ae8

08005834 <__errno>:
 8005834:	4b01      	ldr	r3, [pc, #4]	; (800583c <__errno+0x8>)
 8005836:	6818      	ldr	r0, [r3, #0]
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	20000068 	.word	0x20000068

08005840 <__libc_init_array>:
 8005840:	b570      	push	{r4, r5, r6, lr}
 8005842:	4d0d      	ldr	r5, [pc, #52]	; (8005878 <__libc_init_array+0x38>)
 8005844:	4c0d      	ldr	r4, [pc, #52]	; (800587c <__libc_init_array+0x3c>)
 8005846:	1b64      	subs	r4, r4, r5
 8005848:	10a4      	asrs	r4, r4, #2
 800584a:	2600      	movs	r6, #0
 800584c:	42a6      	cmp	r6, r4
 800584e:	d109      	bne.n	8005864 <__libc_init_array+0x24>
 8005850:	4d0b      	ldr	r5, [pc, #44]	; (8005880 <__libc_init_array+0x40>)
 8005852:	4c0c      	ldr	r4, [pc, #48]	; (8005884 <__libc_init_array+0x44>)
 8005854:	f000 fc7c 	bl	8006150 <_init>
 8005858:	1b64      	subs	r4, r4, r5
 800585a:	10a4      	asrs	r4, r4, #2
 800585c:	2600      	movs	r6, #0
 800585e:	42a6      	cmp	r6, r4
 8005860:	d105      	bne.n	800586e <__libc_init_array+0x2e>
 8005862:	bd70      	pop	{r4, r5, r6, pc}
 8005864:	f855 3b04 	ldr.w	r3, [r5], #4
 8005868:	4798      	blx	r3
 800586a:	3601      	adds	r6, #1
 800586c:	e7ee      	b.n	800584c <__libc_init_array+0xc>
 800586e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005872:	4798      	blx	r3
 8005874:	3601      	adds	r6, #1
 8005876:	e7f2      	b.n	800585e <__libc_init_array+0x1e>
 8005878:	08006264 	.word	0x08006264
 800587c:	08006264 	.word	0x08006264
 8005880:	08006264 	.word	0x08006264
 8005884:	08006268 	.word	0x08006268

08005888 <__retarget_lock_init_recursive>:
 8005888:	4770      	bx	lr

0800588a <__retarget_lock_acquire_recursive>:
 800588a:	4770      	bx	lr

0800588c <__retarget_lock_release_recursive>:
 800588c:	4770      	bx	lr
	...

08005890 <_free_r>:
 8005890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005892:	2900      	cmp	r1, #0
 8005894:	d044      	beq.n	8005920 <_free_r+0x90>
 8005896:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800589a:	9001      	str	r0, [sp, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	f1a1 0404 	sub.w	r4, r1, #4
 80058a2:	bfb8      	it	lt
 80058a4:	18e4      	addlt	r4, r4, r3
 80058a6:	f000 f8df 	bl	8005a68 <__malloc_lock>
 80058aa:	4a1e      	ldr	r2, [pc, #120]	; (8005924 <_free_r+0x94>)
 80058ac:	9801      	ldr	r0, [sp, #4]
 80058ae:	6813      	ldr	r3, [r2, #0]
 80058b0:	b933      	cbnz	r3, 80058c0 <_free_r+0x30>
 80058b2:	6063      	str	r3, [r4, #4]
 80058b4:	6014      	str	r4, [r2, #0]
 80058b6:	b003      	add	sp, #12
 80058b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058bc:	f000 b8da 	b.w	8005a74 <__malloc_unlock>
 80058c0:	42a3      	cmp	r3, r4
 80058c2:	d908      	bls.n	80058d6 <_free_r+0x46>
 80058c4:	6825      	ldr	r5, [r4, #0]
 80058c6:	1961      	adds	r1, r4, r5
 80058c8:	428b      	cmp	r3, r1
 80058ca:	bf01      	itttt	eq
 80058cc:	6819      	ldreq	r1, [r3, #0]
 80058ce:	685b      	ldreq	r3, [r3, #4]
 80058d0:	1949      	addeq	r1, r1, r5
 80058d2:	6021      	streq	r1, [r4, #0]
 80058d4:	e7ed      	b.n	80058b2 <_free_r+0x22>
 80058d6:	461a      	mov	r2, r3
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	b10b      	cbz	r3, 80058e0 <_free_r+0x50>
 80058dc:	42a3      	cmp	r3, r4
 80058de:	d9fa      	bls.n	80058d6 <_free_r+0x46>
 80058e0:	6811      	ldr	r1, [r2, #0]
 80058e2:	1855      	adds	r5, r2, r1
 80058e4:	42a5      	cmp	r5, r4
 80058e6:	d10b      	bne.n	8005900 <_free_r+0x70>
 80058e8:	6824      	ldr	r4, [r4, #0]
 80058ea:	4421      	add	r1, r4
 80058ec:	1854      	adds	r4, r2, r1
 80058ee:	42a3      	cmp	r3, r4
 80058f0:	6011      	str	r1, [r2, #0]
 80058f2:	d1e0      	bne.n	80058b6 <_free_r+0x26>
 80058f4:	681c      	ldr	r4, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	6053      	str	r3, [r2, #4]
 80058fa:	440c      	add	r4, r1
 80058fc:	6014      	str	r4, [r2, #0]
 80058fe:	e7da      	b.n	80058b6 <_free_r+0x26>
 8005900:	d902      	bls.n	8005908 <_free_r+0x78>
 8005902:	230c      	movs	r3, #12
 8005904:	6003      	str	r3, [r0, #0]
 8005906:	e7d6      	b.n	80058b6 <_free_r+0x26>
 8005908:	6825      	ldr	r5, [r4, #0]
 800590a:	1961      	adds	r1, r4, r5
 800590c:	428b      	cmp	r3, r1
 800590e:	bf04      	itt	eq
 8005910:	6819      	ldreq	r1, [r3, #0]
 8005912:	685b      	ldreq	r3, [r3, #4]
 8005914:	6063      	str	r3, [r4, #4]
 8005916:	bf04      	itt	eq
 8005918:	1949      	addeq	r1, r1, r5
 800591a:	6021      	streq	r1, [r4, #0]
 800591c:	6054      	str	r4, [r2, #4]
 800591e:	e7ca      	b.n	80058b6 <_free_r+0x26>
 8005920:	b003      	add	sp, #12
 8005922:	bd30      	pop	{r4, r5, pc}
 8005924:	20000af0 	.word	0x20000af0

08005928 <sbrk_aligned>:
 8005928:	b570      	push	{r4, r5, r6, lr}
 800592a:	4e0e      	ldr	r6, [pc, #56]	; (8005964 <sbrk_aligned+0x3c>)
 800592c:	460c      	mov	r4, r1
 800592e:	6831      	ldr	r1, [r6, #0]
 8005930:	4605      	mov	r5, r0
 8005932:	b911      	cbnz	r1, 800593a <sbrk_aligned+0x12>
 8005934:	f000 fbfc 	bl	8006130 <_sbrk_r>
 8005938:	6030      	str	r0, [r6, #0]
 800593a:	4621      	mov	r1, r4
 800593c:	4628      	mov	r0, r5
 800593e:	f000 fbf7 	bl	8006130 <_sbrk_r>
 8005942:	1c43      	adds	r3, r0, #1
 8005944:	d00a      	beq.n	800595c <sbrk_aligned+0x34>
 8005946:	1cc4      	adds	r4, r0, #3
 8005948:	f024 0403 	bic.w	r4, r4, #3
 800594c:	42a0      	cmp	r0, r4
 800594e:	d007      	beq.n	8005960 <sbrk_aligned+0x38>
 8005950:	1a21      	subs	r1, r4, r0
 8005952:	4628      	mov	r0, r5
 8005954:	f000 fbec 	bl	8006130 <_sbrk_r>
 8005958:	3001      	adds	r0, #1
 800595a:	d101      	bne.n	8005960 <sbrk_aligned+0x38>
 800595c:	f04f 34ff 	mov.w	r4, #4294967295
 8005960:	4620      	mov	r0, r4
 8005962:	bd70      	pop	{r4, r5, r6, pc}
 8005964:	20000af4 	.word	0x20000af4

08005968 <_malloc_r>:
 8005968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800596c:	1ccd      	adds	r5, r1, #3
 800596e:	f025 0503 	bic.w	r5, r5, #3
 8005972:	3508      	adds	r5, #8
 8005974:	2d0c      	cmp	r5, #12
 8005976:	bf38      	it	cc
 8005978:	250c      	movcc	r5, #12
 800597a:	2d00      	cmp	r5, #0
 800597c:	4607      	mov	r7, r0
 800597e:	db01      	blt.n	8005984 <_malloc_r+0x1c>
 8005980:	42a9      	cmp	r1, r5
 8005982:	d905      	bls.n	8005990 <_malloc_r+0x28>
 8005984:	230c      	movs	r3, #12
 8005986:	603b      	str	r3, [r7, #0]
 8005988:	2600      	movs	r6, #0
 800598a:	4630      	mov	r0, r6
 800598c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005990:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005a64 <_malloc_r+0xfc>
 8005994:	f000 f868 	bl	8005a68 <__malloc_lock>
 8005998:	f8d8 3000 	ldr.w	r3, [r8]
 800599c:	461c      	mov	r4, r3
 800599e:	bb5c      	cbnz	r4, 80059f8 <_malloc_r+0x90>
 80059a0:	4629      	mov	r1, r5
 80059a2:	4638      	mov	r0, r7
 80059a4:	f7ff ffc0 	bl	8005928 <sbrk_aligned>
 80059a8:	1c43      	adds	r3, r0, #1
 80059aa:	4604      	mov	r4, r0
 80059ac:	d155      	bne.n	8005a5a <_malloc_r+0xf2>
 80059ae:	f8d8 4000 	ldr.w	r4, [r8]
 80059b2:	4626      	mov	r6, r4
 80059b4:	2e00      	cmp	r6, #0
 80059b6:	d145      	bne.n	8005a44 <_malloc_r+0xdc>
 80059b8:	2c00      	cmp	r4, #0
 80059ba:	d048      	beq.n	8005a4e <_malloc_r+0xe6>
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	4631      	mov	r1, r6
 80059c0:	4638      	mov	r0, r7
 80059c2:	eb04 0903 	add.w	r9, r4, r3
 80059c6:	f000 fbb3 	bl	8006130 <_sbrk_r>
 80059ca:	4581      	cmp	r9, r0
 80059cc:	d13f      	bne.n	8005a4e <_malloc_r+0xe6>
 80059ce:	6821      	ldr	r1, [r4, #0]
 80059d0:	1a6d      	subs	r5, r5, r1
 80059d2:	4629      	mov	r1, r5
 80059d4:	4638      	mov	r0, r7
 80059d6:	f7ff ffa7 	bl	8005928 <sbrk_aligned>
 80059da:	3001      	adds	r0, #1
 80059dc:	d037      	beq.n	8005a4e <_malloc_r+0xe6>
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	442b      	add	r3, r5
 80059e2:	6023      	str	r3, [r4, #0]
 80059e4:	f8d8 3000 	ldr.w	r3, [r8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d038      	beq.n	8005a5e <_malloc_r+0xf6>
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	42a2      	cmp	r2, r4
 80059f0:	d12b      	bne.n	8005a4a <_malloc_r+0xe2>
 80059f2:	2200      	movs	r2, #0
 80059f4:	605a      	str	r2, [r3, #4]
 80059f6:	e00f      	b.n	8005a18 <_malloc_r+0xb0>
 80059f8:	6822      	ldr	r2, [r4, #0]
 80059fa:	1b52      	subs	r2, r2, r5
 80059fc:	d41f      	bmi.n	8005a3e <_malloc_r+0xd6>
 80059fe:	2a0b      	cmp	r2, #11
 8005a00:	d917      	bls.n	8005a32 <_malloc_r+0xca>
 8005a02:	1961      	adds	r1, r4, r5
 8005a04:	42a3      	cmp	r3, r4
 8005a06:	6025      	str	r5, [r4, #0]
 8005a08:	bf18      	it	ne
 8005a0a:	6059      	strne	r1, [r3, #4]
 8005a0c:	6863      	ldr	r3, [r4, #4]
 8005a0e:	bf08      	it	eq
 8005a10:	f8c8 1000 	streq.w	r1, [r8]
 8005a14:	5162      	str	r2, [r4, r5]
 8005a16:	604b      	str	r3, [r1, #4]
 8005a18:	4638      	mov	r0, r7
 8005a1a:	f104 060b 	add.w	r6, r4, #11
 8005a1e:	f000 f829 	bl	8005a74 <__malloc_unlock>
 8005a22:	f026 0607 	bic.w	r6, r6, #7
 8005a26:	1d23      	adds	r3, r4, #4
 8005a28:	1af2      	subs	r2, r6, r3
 8005a2a:	d0ae      	beq.n	800598a <_malloc_r+0x22>
 8005a2c:	1b9b      	subs	r3, r3, r6
 8005a2e:	50a3      	str	r3, [r4, r2]
 8005a30:	e7ab      	b.n	800598a <_malloc_r+0x22>
 8005a32:	42a3      	cmp	r3, r4
 8005a34:	6862      	ldr	r2, [r4, #4]
 8005a36:	d1dd      	bne.n	80059f4 <_malloc_r+0x8c>
 8005a38:	f8c8 2000 	str.w	r2, [r8]
 8005a3c:	e7ec      	b.n	8005a18 <_malloc_r+0xb0>
 8005a3e:	4623      	mov	r3, r4
 8005a40:	6864      	ldr	r4, [r4, #4]
 8005a42:	e7ac      	b.n	800599e <_malloc_r+0x36>
 8005a44:	4634      	mov	r4, r6
 8005a46:	6876      	ldr	r6, [r6, #4]
 8005a48:	e7b4      	b.n	80059b4 <_malloc_r+0x4c>
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	e7cc      	b.n	80059e8 <_malloc_r+0x80>
 8005a4e:	230c      	movs	r3, #12
 8005a50:	603b      	str	r3, [r7, #0]
 8005a52:	4638      	mov	r0, r7
 8005a54:	f000 f80e 	bl	8005a74 <__malloc_unlock>
 8005a58:	e797      	b.n	800598a <_malloc_r+0x22>
 8005a5a:	6025      	str	r5, [r4, #0]
 8005a5c:	e7dc      	b.n	8005a18 <_malloc_r+0xb0>
 8005a5e:	605b      	str	r3, [r3, #4]
 8005a60:	deff      	udf	#255	; 0xff
 8005a62:	bf00      	nop
 8005a64:	20000af0 	.word	0x20000af0

08005a68 <__malloc_lock>:
 8005a68:	4801      	ldr	r0, [pc, #4]	; (8005a70 <__malloc_lock+0x8>)
 8005a6a:	f7ff bf0e 	b.w	800588a <__retarget_lock_acquire_recursive>
 8005a6e:	bf00      	nop
 8005a70:	20000aec 	.word	0x20000aec

08005a74 <__malloc_unlock>:
 8005a74:	4801      	ldr	r0, [pc, #4]	; (8005a7c <__malloc_unlock+0x8>)
 8005a76:	f7ff bf09 	b.w	800588c <__retarget_lock_release_recursive>
 8005a7a:	bf00      	nop
 8005a7c:	20000aec 	.word	0x20000aec

08005a80 <__sfputc_r>:
 8005a80:	6893      	ldr	r3, [r2, #8]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	b410      	push	{r4}
 8005a88:	6093      	str	r3, [r2, #8]
 8005a8a:	da08      	bge.n	8005a9e <__sfputc_r+0x1e>
 8005a8c:	6994      	ldr	r4, [r2, #24]
 8005a8e:	42a3      	cmp	r3, r4
 8005a90:	db01      	blt.n	8005a96 <__sfputc_r+0x16>
 8005a92:	290a      	cmp	r1, #10
 8005a94:	d103      	bne.n	8005a9e <__sfputc_r+0x1e>
 8005a96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a9a:	f7ff bdd2 	b.w	8005642 <__swbuf_r>
 8005a9e:	6813      	ldr	r3, [r2, #0]
 8005aa0:	1c58      	adds	r0, r3, #1
 8005aa2:	6010      	str	r0, [r2, #0]
 8005aa4:	7019      	strb	r1, [r3, #0]
 8005aa6:	4608      	mov	r0, r1
 8005aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <__sfputs_r>:
 8005aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab0:	4606      	mov	r6, r0
 8005ab2:	460f      	mov	r7, r1
 8005ab4:	4614      	mov	r4, r2
 8005ab6:	18d5      	adds	r5, r2, r3
 8005ab8:	42ac      	cmp	r4, r5
 8005aba:	d101      	bne.n	8005ac0 <__sfputs_r+0x12>
 8005abc:	2000      	movs	r0, #0
 8005abe:	e007      	b.n	8005ad0 <__sfputs_r+0x22>
 8005ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ac4:	463a      	mov	r2, r7
 8005ac6:	4630      	mov	r0, r6
 8005ac8:	f7ff ffda 	bl	8005a80 <__sfputc_r>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d1f3      	bne.n	8005ab8 <__sfputs_r+0xa>
 8005ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ad4 <_vfiprintf_r>:
 8005ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad8:	460d      	mov	r5, r1
 8005ada:	b09d      	sub	sp, #116	; 0x74
 8005adc:	4614      	mov	r4, r2
 8005ade:	4698      	mov	r8, r3
 8005ae0:	4606      	mov	r6, r0
 8005ae2:	b118      	cbz	r0, 8005aec <_vfiprintf_r+0x18>
 8005ae4:	6a03      	ldr	r3, [r0, #32]
 8005ae6:	b90b      	cbnz	r3, 8005aec <_vfiprintf_r+0x18>
 8005ae8:	f7ff fd20 	bl	800552c <__sinit>
 8005aec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005aee:	07d9      	lsls	r1, r3, #31
 8005af0:	d405      	bmi.n	8005afe <_vfiprintf_r+0x2a>
 8005af2:	89ab      	ldrh	r3, [r5, #12]
 8005af4:	059a      	lsls	r2, r3, #22
 8005af6:	d402      	bmi.n	8005afe <_vfiprintf_r+0x2a>
 8005af8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005afa:	f7ff fec6 	bl	800588a <__retarget_lock_acquire_recursive>
 8005afe:	89ab      	ldrh	r3, [r5, #12]
 8005b00:	071b      	lsls	r3, r3, #28
 8005b02:	d501      	bpl.n	8005b08 <_vfiprintf_r+0x34>
 8005b04:	692b      	ldr	r3, [r5, #16]
 8005b06:	b99b      	cbnz	r3, 8005b30 <_vfiprintf_r+0x5c>
 8005b08:	4629      	mov	r1, r5
 8005b0a:	4630      	mov	r0, r6
 8005b0c:	f7ff fdd6 	bl	80056bc <__swsetup_r>
 8005b10:	b170      	cbz	r0, 8005b30 <_vfiprintf_r+0x5c>
 8005b12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b14:	07dc      	lsls	r4, r3, #31
 8005b16:	d504      	bpl.n	8005b22 <_vfiprintf_r+0x4e>
 8005b18:	f04f 30ff 	mov.w	r0, #4294967295
 8005b1c:	b01d      	add	sp, #116	; 0x74
 8005b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b22:	89ab      	ldrh	r3, [r5, #12]
 8005b24:	0598      	lsls	r0, r3, #22
 8005b26:	d4f7      	bmi.n	8005b18 <_vfiprintf_r+0x44>
 8005b28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b2a:	f7ff feaf 	bl	800588c <__retarget_lock_release_recursive>
 8005b2e:	e7f3      	b.n	8005b18 <_vfiprintf_r+0x44>
 8005b30:	2300      	movs	r3, #0
 8005b32:	9309      	str	r3, [sp, #36]	; 0x24
 8005b34:	2320      	movs	r3, #32
 8005b36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b3e:	2330      	movs	r3, #48	; 0x30
 8005b40:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005cf4 <_vfiprintf_r+0x220>
 8005b44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b48:	f04f 0901 	mov.w	r9, #1
 8005b4c:	4623      	mov	r3, r4
 8005b4e:	469a      	mov	sl, r3
 8005b50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b54:	b10a      	cbz	r2, 8005b5a <_vfiprintf_r+0x86>
 8005b56:	2a25      	cmp	r2, #37	; 0x25
 8005b58:	d1f9      	bne.n	8005b4e <_vfiprintf_r+0x7a>
 8005b5a:	ebba 0b04 	subs.w	fp, sl, r4
 8005b5e:	d00b      	beq.n	8005b78 <_vfiprintf_r+0xa4>
 8005b60:	465b      	mov	r3, fp
 8005b62:	4622      	mov	r2, r4
 8005b64:	4629      	mov	r1, r5
 8005b66:	4630      	mov	r0, r6
 8005b68:	f7ff ffa1 	bl	8005aae <__sfputs_r>
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	f000 80a9 	beq.w	8005cc4 <_vfiprintf_r+0x1f0>
 8005b72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b74:	445a      	add	r2, fp
 8005b76:	9209      	str	r2, [sp, #36]	; 0x24
 8005b78:	f89a 3000 	ldrb.w	r3, [sl]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 80a1 	beq.w	8005cc4 <_vfiprintf_r+0x1f0>
 8005b82:	2300      	movs	r3, #0
 8005b84:	f04f 32ff 	mov.w	r2, #4294967295
 8005b88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b8c:	f10a 0a01 	add.w	sl, sl, #1
 8005b90:	9304      	str	r3, [sp, #16]
 8005b92:	9307      	str	r3, [sp, #28]
 8005b94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b98:	931a      	str	r3, [sp, #104]	; 0x68
 8005b9a:	4654      	mov	r4, sl
 8005b9c:	2205      	movs	r2, #5
 8005b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ba2:	4854      	ldr	r0, [pc, #336]	; (8005cf4 <_vfiprintf_r+0x220>)
 8005ba4:	f7fa fb14 	bl	80001d0 <memchr>
 8005ba8:	9a04      	ldr	r2, [sp, #16]
 8005baa:	b9d8      	cbnz	r0, 8005be4 <_vfiprintf_r+0x110>
 8005bac:	06d1      	lsls	r1, r2, #27
 8005bae:	bf44      	itt	mi
 8005bb0:	2320      	movmi	r3, #32
 8005bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bb6:	0713      	lsls	r3, r2, #28
 8005bb8:	bf44      	itt	mi
 8005bba:	232b      	movmi	r3, #43	; 0x2b
 8005bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8005bc4:	2b2a      	cmp	r3, #42	; 0x2a
 8005bc6:	d015      	beq.n	8005bf4 <_vfiprintf_r+0x120>
 8005bc8:	9a07      	ldr	r2, [sp, #28]
 8005bca:	4654      	mov	r4, sl
 8005bcc:	2000      	movs	r0, #0
 8005bce:	f04f 0c0a 	mov.w	ip, #10
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bd8:	3b30      	subs	r3, #48	; 0x30
 8005bda:	2b09      	cmp	r3, #9
 8005bdc:	d94d      	bls.n	8005c7a <_vfiprintf_r+0x1a6>
 8005bde:	b1b0      	cbz	r0, 8005c0e <_vfiprintf_r+0x13a>
 8005be0:	9207      	str	r2, [sp, #28]
 8005be2:	e014      	b.n	8005c0e <_vfiprintf_r+0x13a>
 8005be4:	eba0 0308 	sub.w	r3, r0, r8
 8005be8:	fa09 f303 	lsl.w	r3, r9, r3
 8005bec:	4313      	orrs	r3, r2
 8005bee:	9304      	str	r3, [sp, #16]
 8005bf0:	46a2      	mov	sl, r4
 8005bf2:	e7d2      	b.n	8005b9a <_vfiprintf_r+0xc6>
 8005bf4:	9b03      	ldr	r3, [sp, #12]
 8005bf6:	1d19      	adds	r1, r3, #4
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	9103      	str	r1, [sp, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	bfbb      	ittet	lt
 8005c00:	425b      	neglt	r3, r3
 8005c02:	f042 0202 	orrlt.w	r2, r2, #2
 8005c06:	9307      	strge	r3, [sp, #28]
 8005c08:	9307      	strlt	r3, [sp, #28]
 8005c0a:	bfb8      	it	lt
 8005c0c:	9204      	strlt	r2, [sp, #16]
 8005c0e:	7823      	ldrb	r3, [r4, #0]
 8005c10:	2b2e      	cmp	r3, #46	; 0x2e
 8005c12:	d10c      	bne.n	8005c2e <_vfiprintf_r+0x15a>
 8005c14:	7863      	ldrb	r3, [r4, #1]
 8005c16:	2b2a      	cmp	r3, #42	; 0x2a
 8005c18:	d134      	bne.n	8005c84 <_vfiprintf_r+0x1b0>
 8005c1a:	9b03      	ldr	r3, [sp, #12]
 8005c1c:	1d1a      	adds	r2, r3, #4
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	9203      	str	r2, [sp, #12]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	bfb8      	it	lt
 8005c26:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c2a:	3402      	adds	r4, #2
 8005c2c:	9305      	str	r3, [sp, #20]
 8005c2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005d04 <_vfiprintf_r+0x230>
 8005c32:	7821      	ldrb	r1, [r4, #0]
 8005c34:	2203      	movs	r2, #3
 8005c36:	4650      	mov	r0, sl
 8005c38:	f7fa faca 	bl	80001d0 <memchr>
 8005c3c:	b138      	cbz	r0, 8005c4e <_vfiprintf_r+0x17a>
 8005c3e:	9b04      	ldr	r3, [sp, #16]
 8005c40:	eba0 000a 	sub.w	r0, r0, sl
 8005c44:	2240      	movs	r2, #64	; 0x40
 8005c46:	4082      	lsls	r2, r0
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	3401      	adds	r4, #1
 8005c4c:	9304      	str	r3, [sp, #16]
 8005c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c52:	4829      	ldr	r0, [pc, #164]	; (8005cf8 <_vfiprintf_r+0x224>)
 8005c54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c58:	2206      	movs	r2, #6
 8005c5a:	f7fa fab9 	bl	80001d0 <memchr>
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	d03f      	beq.n	8005ce2 <_vfiprintf_r+0x20e>
 8005c62:	4b26      	ldr	r3, [pc, #152]	; (8005cfc <_vfiprintf_r+0x228>)
 8005c64:	bb1b      	cbnz	r3, 8005cae <_vfiprintf_r+0x1da>
 8005c66:	9b03      	ldr	r3, [sp, #12]
 8005c68:	3307      	adds	r3, #7
 8005c6a:	f023 0307 	bic.w	r3, r3, #7
 8005c6e:	3308      	adds	r3, #8
 8005c70:	9303      	str	r3, [sp, #12]
 8005c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c74:	443b      	add	r3, r7
 8005c76:	9309      	str	r3, [sp, #36]	; 0x24
 8005c78:	e768      	b.n	8005b4c <_vfiprintf_r+0x78>
 8005c7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c7e:	460c      	mov	r4, r1
 8005c80:	2001      	movs	r0, #1
 8005c82:	e7a6      	b.n	8005bd2 <_vfiprintf_r+0xfe>
 8005c84:	2300      	movs	r3, #0
 8005c86:	3401      	adds	r4, #1
 8005c88:	9305      	str	r3, [sp, #20]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	f04f 0c0a 	mov.w	ip, #10
 8005c90:	4620      	mov	r0, r4
 8005c92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c96:	3a30      	subs	r2, #48	; 0x30
 8005c98:	2a09      	cmp	r2, #9
 8005c9a:	d903      	bls.n	8005ca4 <_vfiprintf_r+0x1d0>
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0c6      	beq.n	8005c2e <_vfiprintf_r+0x15a>
 8005ca0:	9105      	str	r1, [sp, #20]
 8005ca2:	e7c4      	b.n	8005c2e <_vfiprintf_r+0x15a>
 8005ca4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ca8:	4604      	mov	r4, r0
 8005caa:	2301      	movs	r3, #1
 8005cac:	e7f0      	b.n	8005c90 <_vfiprintf_r+0x1bc>
 8005cae:	ab03      	add	r3, sp, #12
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	462a      	mov	r2, r5
 8005cb4:	4b12      	ldr	r3, [pc, #72]	; (8005d00 <_vfiprintf_r+0x22c>)
 8005cb6:	a904      	add	r1, sp, #16
 8005cb8:	4630      	mov	r0, r6
 8005cba:	f3af 8000 	nop.w
 8005cbe:	4607      	mov	r7, r0
 8005cc0:	1c78      	adds	r0, r7, #1
 8005cc2:	d1d6      	bne.n	8005c72 <_vfiprintf_r+0x19e>
 8005cc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cc6:	07d9      	lsls	r1, r3, #31
 8005cc8:	d405      	bmi.n	8005cd6 <_vfiprintf_r+0x202>
 8005cca:	89ab      	ldrh	r3, [r5, #12]
 8005ccc:	059a      	lsls	r2, r3, #22
 8005cce:	d402      	bmi.n	8005cd6 <_vfiprintf_r+0x202>
 8005cd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cd2:	f7ff fddb 	bl	800588c <__retarget_lock_release_recursive>
 8005cd6:	89ab      	ldrh	r3, [r5, #12]
 8005cd8:	065b      	lsls	r3, r3, #25
 8005cda:	f53f af1d 	bmi.w	8005b18 <_vfiprintf_r+0x44>
 8005cde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ce0:	e71c      	b.n	8005b1c <_vfiprintf_r+0x48>
 8005ce2:	ab03      	add	r3, sp, #12
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	462a      	mov	r2, r5
 8005ce8:	4b05      	ldr	r3, [pc, #20]	; (8005d00 <_vfiprintf_r+0x22c>)
 8005cea:	a904      	add	r1, sp, #16
 8005cec:	4630      	mov	r0, r6
 8005cee:	f000 f879 	bl	8005de4 <_printf_i>
 8005cf2:	e7e4      	b.n	8005cbe <_vfiprintf_r+0x1ea>
 8005cf4:	08006229 	.word	0x08006229
 8005cf8:	08006233 	.word	0x08006233
 8005cfc:	00000000 	.word	0x00000000
 8005d00:	08005aaf 	.word	0x08005aaf
 8005d04:	0800622f 	.word	0x0800622f

08005d08 <_printf_common>:
 8005d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d0c:	4616      	mov	r6, r2
 8005d0e:	4699      	mov	r9, r3
 8005d10:	688a      	ldr	r2, [r1, #8]
 8005d12:	690b      	ldr	r3, [r1, #16]
 8005d14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	bfb8      	it	lt
 8005d1c:	4613      	movlt	r3, r2
 8005d1e:	6033      	str	r3, [r6, #0]
 8005d20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d24:	4607      	mov	r7, r0
 8005d26:	460c      	mov	r4, r1
 8005d28:	b10a      	cbz	r2, 8005d2e <_printf_common+0x26>
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	6033      	str	r3, [r6, #0]
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	0699      	lsls	r1, r3, #26
 8005d32:	bf42      	ittt	mi
 8005d34:	6833      	ldrmi	r3, [r6, #0]
 8005d36:	3302      	addmi	r3, #2
 8005d38:	6033      	strmi	r3, [r6, #0]
 8005d3a:	6825      	ldr	r5, [r4, #0]
 8005d3c:	f015 0506 	ands.w	r5, r5, #6
 8005d40:	d106      	bne.n	8005d50 <_printf_common+0x48>
 8005d42:	f104 0a19 	add.w	sl, r4, #25
 8005d46:	68e3      	ldr	r3, [r4, #12]
 8005d48:	6832      	ldr	r2, [r6, #0]
 8005d4a:	1a9b      	subs	r3, r3, r2
 8005d4c:	42ab      	cmp	r3, r5
 8005d4e:	dc26      	bgt.n	8005d9e <_printf_common+0x96>
 8005d50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d54:	1e13      	subs	r3, r2, #0
 8005d56:	6822      	ldr	r2, [r4, #0]
 8005d58:	bf18      	it	ne
 8005d5a:	2301      	movne	r3, #1
 8005d5c:	0692      	lsls	r2, r2, #26
 8005d5e:	d42b      	bmi.n	8005db8 <_printf_common+0xb0>
 8005d60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d64:	4649      	mov	r1, r9
 8005d66:	4638      	mov	r0, r7
 8005d68:	47c0      	blx	r8
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	d01e      	beq.n	8005dac <_printf_common+0xa4>
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	6922      	ldr	r2, [r4, #16]
 8005d72:	f003 0306 	and.w	r3, r3, #6
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	bf02      	ittt	eq
 8005d7a:	68e5      	ldreq	r5, [r4, #12]
 8005d7c:	6833      	ldreq	r3, [r6, #0]
 8005d7e:	1aed      	subeq	r5, r5, r3
 8005d80:	68a3      	ldr	r3, [r4, #8]
 8005d82:	bf0c      	ite	eq
 8005d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d88:	2500      	movne	r5, #0
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	bfc4      	itt	gt
 8005d8e:	1a9b      	subgt	r3, r3, r2
 8005d90:	18ed      	addgt	r5, r5, r3
 8005d92:	2600      	movs	r6, #0
 8005d94:	341a      	adds	r4, #26
 8005d96:	42b5      	cmp	r5, r6
 8005d98:	d11a      	bne.n	8005dd0 <_printf_common+0xc8>
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	e008      	b.n	8005db0 <_printf_common+0xa8>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	4652      	mov	r2, sl
 8005da2:	4649      	mov	r1, r9
 8005da4:	4638      	mov	r0, r7
 8005da6:	47c0      	blx	r8
 8005da8:	3001      	adds	r0, #1
 8005daa:	d103      	bne.n	8005db4 <_printf_common+0xac>
 8005dac:	f04f 30ff 	mov.w	r0, #4294967295
 8005db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db4:	3501      	adds	r5, #1
 8005db6:	e7c6      	b.n	8005d46 <_printf_common+0x3e>
 8005db8:	18e1      	adds	r1, r4, r3
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	2030      	movs	r0, #48	; 0x30
 8005dbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dc2:	4422      	add	r2, r4
 8005dc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dcc:	3302      	adds	r3, #2
 8005dce:	e7c7      	b.n	8005d60 <_printf_common+0x58>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	4622      	mov	r2, r4
 8005dd4:	4649      	mov	r1, r9
 8005dd6:	4638      	mov	r0, r7
 8005dd8:	47c0      	blx	r8
 8005dda:	3001      	adds	r0, #1
 8005ddc:	d0e6      	beq.n	8005dac <_printf_common+0xa4>
 8005dde:	3601      	adds	r6, #1
 8005de0:	e7d9      	b.n	8005d96 <_printf_common+0x8e>
	...

08005de4 <_printf_i>:
 8005de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005de8:	7e0f      	ldrb	r7, [r1, #24]
 8005dea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005dec:	2f78      	cmp	r7, #120	; 0x78
 8005dee:	4691      	mov	r9, r2
 8005df0:	4680      	mov	r8, r0
 8005df2:	460c      	mov	r4, r1
 8005df4:	469a      	mov	sl, r3
 8005df6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005dfa:	d807      	bhi.n	8005e0c <_printf_i+0x28>
 8005dfc:	2f62      	cmp	r7, #98	; 0x62
 8005dfe:	d80a      	bhi.n	8005e16 <_printf_i+0x32>
 8005e00:	2f00      	cmp	r7, #0
 8005e02:	f000 80d4 	beq.w	8005fae <_printf_i+0x1ca>
 8005e06:	2f58      	cmp	r7, #88	; 0x58
 8005e08:	f000 80c0 	beq.w	8005f8c <_printf_i+0x1a8>
 8005e0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e14:	e03a      	b.n	8005e8c <_printf_i+0xa8>
 8005e16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e1a:	2b15      	cmp	r3, #21
 8005e1c:	d8f6      	bhi.n	8005e0c <_printf_i+0x28>
 8005e1e:	a101      	add	r1, pc, #4	; (adr r1, 8005e24 <_printf_i+0x40>)
 8005e20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e24:	08005e7d 	.word	0x08005e7d
 8005e28:	08005e91 	.word	0x08005e91
 8005e2c:	08005e0d 	.word	0x08005e0d
 8005e30:	08005e0d 	.word	0x08005e0d
 8005e34:	08005e0d 	.word	0x08005e0d
 8005e38:	08005e0d 	.word	0x08005e0d
 8005e3c:	08005e91 	.word	0x08005e91
 8005e40:	08005e0d 	.word	0x08005e0d
 8005e44:	08005e0d 	.word	0x08005e0d
 8005e48:	08005e0d 	.word	0x08005e0d
 8005e4c:	08005e0d 	.word	0x08005e0d
 8005e50:	08005f95 	.word	0x08005f95
 8005e54:	08005ebd 	.word	0x08005ebd
 8005e58:	08005f4f 	.word	0x08005f4f
 8005e5c:	08005e0d 	.word	0x08005e0d
 8005e60:	08005e0d 	.word	0x08005e0d
 8005e64:	08005fb7 	.word	0x08005fb7
 8005e68:	08005e0d 	.word	0x08005e0d
 8005e6c:	08005ebd 	.word	0x08005ebd
 8005e70:	08005e0d 	.word	0x08005e0d
 8005e74:	08005e0d 	.word	0x08005e0d
 8005e78:	08005f57 	.word	0x08005f57
 8005e7c:	682b      	ldr	r3, [r5, #0]
 8005e7e:	1d1a      	adds	r2, r3, #4
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	602a      	str	r2, [r5, #0]
 8005e84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e09f      	b.n	8005fd0 <_printf_i+0x1ec>
 8005e90:	6820      	ldr	r0, [r4, #0]
 8005e92:	682b      	ldr	r3, [r5, #0]
 8005e94:	0607      	lsls	r7, r0, #24
 8005e96:	f103 0104 	add.w	r1, r3, #4
 8005e9a:	6029      	str	r1, [r5, #0]
 8005e9c:	d501      	bpl.n	8005ea2 <_printf_i+0xbe>
 8005e9e:	681e      	ldr	r6, [r3, #0]
 8005ea0:	e003      	b.n	8005eaa <_printf_i+0xc6>
 8005ea2:	0646      	lsls	r6, r0, #25
 8005ea4:	d5fb      	bpl.n	8005e9e <_printf_i+0xba>
 8005ea6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005eaa:	2e00      	cmp	r6, #0
 8005eac:	da03      	bge.n	8005eb6 <_printf_i+0xd2>
 8005eae:	232d      	movs	r3, #45	; 0x2d
 8005eb0:	4276      	negs	r6, r6
 8005eb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eb6:	485a      	ldr	r0, [pc, #360]	; (8006020 <_printf_i+0x23c>)
 8005eb8:	230a      	movs	r3, #10
 8005eba:	e012      	b.n	8005ee2 <_printf_i+0xfe>
 8005ebc:	682b      	ldr	r3, [r5, #0]
 8005ebe:	6820      	ldr	r0, [r4, #0]
 8005ec0:	1d19      	adds	r1, r3, #4
 8005ec2:	6029      	str	r1, [r5, #0]
 8005ec4:	0605      	lsls	r5, r0, #24
 8005ec6:	d501      	bpl.n	8005ecc <_printf_i+0xe8>
 8005ec8:	681e      	ldr	r6, [r3, #0]
 8005eca:	e002      	b.n	8005ed2 <_printf_i+0xee>
 8005ecc:	0641      	lsls	r1, r0, #25
 8005ece:	d5fb      	bpl.n	8005ec8 <_printf_i+0xe4>
 8005ed0:	881e      	ldrh	r6, [r3, #0]
 8005ed2:	4853      	ldr	r0, [pc, #332]	; (8006020 <_printf_i+0x23c>)
 8005ed4:	2f6f      	cmp	r7, #111	; 0x6f
 8005ed6:	bf0c      	ite	eq
 8005ed8:	2308      	moveq	r3, #8
 8005eda:	230a      	movne	r3, #10
 8005edc:	2100      	movs	r1, #0
 8005ede:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ee2:	6865      	ldr	r5, [r4, #4]
 8005ee4:	60a5      	str	r5, [r4, #8]
 8005ee6:	2d00      	cmp	r5, #0
 8005ee8:	bfa2      	ittt	ge
 8005eea:	6821      	ldrge	r1, [r4, #0]
 8005eec:	f021 0104 	bicge.w	r1, r1, #4
 8005ef0:	6021      	strge	r1, [r4, #0]
 8005ef2:	b90e      	cbnz	r6, 8005ef8 <_printf_i+0x114>
 8005ef4:	2d00      	cmp	r5, #0
 8005ef6:	d04b      	beq.n	8005f90 <_printf_i+0x1ac>
 8005ef8:	4615      	mov	r5, r2
 8005efa:	fbb6 f1f3 	udiv	r1, r6, r3
 8005efe:	fb03 6711 	mls	r7, r3, r1, r6
 8005f02:	5dc7      	ldrb	r7, [r0, r7]
 8005f04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f08:	4637      	mov	r7, r6
 8005f0a:	42bb      	cmp	r3, r7
 8005f0c:	460e      	mov	r6, r1
 8005f0e:	d9f4      	bls.n	8005efa <_printf_i+0x116>
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d10b      	bne.n	8005f2c <_printf_i+0x148>
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	07de      	lsls	r6, r3, #31
 8005f18:	d508      	bpl.n	8005f2c <_printf_i+0x148>
 8005f1a:	6923      	ldr	r3, [r4, #16]
 8005f1c:	6861      	ldr	r1, [r4, #4]
 8005f1e:	4299      	cmp	r1, r3
 8005f20:	bfde      	ittt	le
 8005f22:	2330      	movle	r3, #48	; 0x30
 8005f24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f2c:	1b52      	subs	r2, r2, r5
 8005f2e:	6122      	str	r2, [r4, #16]
 8005f30:	f8cd a000 	str.w	sl, [sp]
 8005f34:	464b      	mov	r3, r9
 8005f36:	aa03      	add	r2, sp, #12
 8005f38:	4621      	mov	r1, r4
 8005f3a:	4640      	mov	r0, r8
 8005f3c:	f7ff fee4 	bl	8005d08 <_printf_common>
 8005f40:	3001      	adds	r0, #1
 8005f42:	d14a      	bne.n	8005fda <_printf_i+0x1f6>
 8005f44:	f04f 30ff 	mov.w	r0, #4294967295
 8005f48:	b004      	add	sp, #16
 8005f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	f043 0320 	orr.w	r3, r3, #32
 8005f54:	6023      	str	r3, [r4, #0]
 8005f56:	4833      	ldr	r0, [pc, #204]	; (8006024 <_printf_i+0x240>)
 8005f58:	2778      	movs	r7, #120	; 0x78
 8005f5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	6829      	ldr	r1, [r5, #0]
 8005f62:	061f      	lsls	r7, r3, #24
 8005f64:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f68:	d402      	bmi.n	8005f70 <_printf_i+0x18c>
 8005f6a:	065f      	lsls	r7, r3, #25
 8005f6c:	bf48      	it	mi
 8005f6e:	b2b6      	uxthmi	r6, r6
 8005f70:	07df      	lsls	r7, r3, #31
 8005f72:	bf48      	it	mi
 8005f74:	f043 0320 	orrmi.w	r3, r3, #32
 8005f78:	6029      	str	r1, [r5, #0]
 8005f7a:	bf48      	it	mi
 8005f7c:	6023      	strmi	r3, [r4, #0]
 8005f7e:	b91e      	cbnz	r6, 8005f88 <_printf_i+0x1a4>
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	f023 0320 	bic.w	r3, r3, #32
 8005f86:	6023      	str	r3, [r4, #0]
 8005f88:	2310      	movs	r3, #16
 8005f8a:	e7a7      	b.n	8005edc <_printf_i+0xf8>
 8005f8c:	4824      	ldr	r0, [pc, #144]	; (8006020 <_printf_i+0x23c>)
 8005f8e:	e7e4      	b.n	8005f5a <_printf_i+0x176>
 8005f90:	4615      	mov	r5, r2
 8005f92:	e7bd      	b.n	8005f10 <_printf_i+0x12c>
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	6826      	ldr	r6, [r4, #0]
 8005f98:	6961      	ldr	r1, [r4, #20]
 8005f9a:	1d18      	adds	r0, r3, #4
 8005f9c:	6028      	str	r0, [r5, #0]
 8005f9e:	0635      	lsls	r5, r6, #24
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	d501      	bpl.n	8005fa8 <_printf_i+0x1c4>
 8005fa4:	6019      	str	r1, [r3, #0]
 8005fa6:	e002      	b.n	8005fae <_printf_i+0x1ca>
 8005fa8:	0670      	lsls	r0, r6, #25
 8005faa:	d5fb      	bpl.n	8005fa4 <_printf_i+0x1c0>
 8005fac:	8019      	strh	r1, [r3, #0]
 8005fae:	2300      	movs	r3, #0
 8005fb0:	6123      	str	r3, [r4, #16]
 8005fb2:	4615      	mov	r5, r2
 8005fb4:	e7bc      	b.n	8005f30 <_printf_i+0x14c>
 8005fb6:	682b      	ldr	r3, [r5, #0]
 8005fb8:	1d1a      	adds	r2, r3, #4
 8005fba:	602a      	str	r2, [r5, #0]
 8005fbc:	681d      	ldr	r5, [r3, #0]
 8005fbe:	6862      	ldr	r2, [r4, #4]
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	f7fa f904 	bl	80001d0 <memchr>
 8005fc8:	b108      	cbz	r0, 8005fce <_printf_i+0x1ea>
 8005fca:	1b40      	subs	r0, r0, r5
 8005fcc:	6060      	str	r0, [r4, #4]
 8005fce:	6863      	ldr	r3, [r4, #4]
 8005fd0:	6123      	str	r3, [r4, #16]
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fd8:	e7aa      	b.n	8005f30 <_printf_i+0x14c>
 8005fda:	6923      	ldr	r3, [r4, #16]
 8005fdc:	462a      	mov	r2, r5
 8005fde:	4649      	mov	r1, r9
 8005fe0:	4640      	mov	r0, r8
 8005fe2:	47d0      	blx	sl
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d0ad      	beq.n	8005f44 <_printf_i+0x160>
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	079b      	lsls	r3, r3, #30
 8005fec:	d413      	bmi.n	8006016 <_printf_i+0x232>
 8005fee:	68e0      	ldr	r0, [r4, #12]
 8005ff0:	9b03      	ldr	r3, [sp, #12]
 8005ff2:	4298      	cmp	r0, r3
 8005ff4:	bfb8      	it	lt
 8005ff6:	4618      	movlt	r0, r3
 8005ff8:	e7a6      	b.n	8005f48 <_printf_i+0x164>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	4632      	mov	r2, r6
 8005ffe:	4649      	mov	r1, r9
 8006000:	4640      	mov	r0, r8
 8006002:	47d0      	blx	sl
 8006004:	3001      	adds	r0, #1
 8006006:	d09d      	beq.n	8005f44 <_printf_i+0x160>
 8006008:	3501      	adds	r5, #1
 800600a:	68e3      	ldr	r3, [r4, #12]
 800600c:	9903      	ldr	r1, [sp, #12]
 800600e:	1a5b      	subs	r3, r3, r1
 8006010:	42ab      	cmp	r3, r5
 8006012:	dcf2      	bgt.n	8005ffa <_printf_i+0x216>
 8006014:	e7eb      	b.n	8005fee <_printf_i+0x20a>
 8006016:	2500      	movs	r5, #0
 8006018:	f104 0619 	add.w	r6, r4, #25
 800601c:	e7f5      	b.n	800600a <_printf_i+0x226>
 800601e:	bf00      	nop
 8006020:	0800623a 	.word	0x0800623a
 8006024:	0800624b 	.word	0x0800624b

08006028 <__swhatbuf_r>:
 8006028:	b570      	push	{r4, r5, r6, lr}
 800602a:	460c      	mov	r4, r1
 800602c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006030:	2900      	cmp	r1, #0
 8006032:	b096      	sub	sp, #88	; 0x58
 8006034:	4615      	mov	r5, r2
 8006036:	461e      	mov	r6, r3
 8006038:	da0d      	bge.n	8006056 <__swhatbuf_r+0x2e>
 800603a:	89a3      	ldrh	r3, [r4, #12]
 800603c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006040:	f04f 0100 	mov.w	r1, #0
 8006044:	bf0c      	ite	eq
 8006046:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800604a:	2340      	movne	r3, #64	; 0x40
 800604c:	2000      	movs	r0, #0
 800604e:	6031      	str	r1, [r6, #0]
 8006050:	602b      	str	r3, [r5, #0]
 8006052:	b016      	add	sp, #88	; 0x58
 8006054:	bd70      	pop	{r4, r5, r6, pc}
 8006056:	466a      	mov	r2, sp
 8006058:	f000 f848 	bl	80060ec <_fstat_r>
 800605c:	2800      	cmp	r0, #0
 800605e:	dbec      	blt.n	800603a <__swhatbuf_r+0x12>
 8006060:	9901      	ldr	r1, [sp, #4]
 8006062:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006066:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800606a:	4259      	negs	r1, r3
 800606c:	4159      	adcs	r1, r3
 800606e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006072:	e7eb      	b.n	800604c <__swhatbuf_r+0x24>

08006074 <__smakebuf_r>:
 8006074:	898b      	ldrh	r3, [r1, #12]
 8006076:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006078:	079d      	lsls	r5, r3, #30
 800607a:	4606      	mov	r6, r0
 800607c:	460c      	mov	r4, r1
 800607e:	d507      	bpl.n	8006090 <__smakebuf_r+0x1c>
 8006080:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006084:	6023      	str	r3, [r4, #0]
 8006086:	6123      	str	r3, [r4, #16]
 8006088:	2301      	movs	r3, #1
 800608a:	6163      	str	r3, [r4, #20]
 800608c:	b002      	add	sp, #8
 800608e:	bd70      	pop	{r4, r5, r6, pc}
 8006090:	ab01      	add	r3, sp, #4
 8006092:	466a      	mov	r2, sp
 8006094:	f7ff ffc8 	bl	8006028 <__swhatbuf_r>
 8006098:	9900      	ldr	r1, [sp, #0]
 800609a:	4605      	mov	r5, r0
 800609c:	4630      	mov	r0, r6
 800609e:	f7ff fc63 	bl	8005968 <_malloc_r>
 80060a2:	b948      	cbnz	r0, 80060b8 <__smakebuf_r+0x44>
 80060a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060a8:	059a      	lsls	r2, r3, #22
 80060aa:	d4ef      	bmi.n	800608c <__smakebuf_r+0x18>
 80060ac:	f023 0303 	bic.w	r3, r3, #3
 80060b0:	f043 0302 	orr.w	r3, r3, #2
 80060b4:	81a3      	strh	r3, [r4, #12]
 80060b6:	e7e3      	b.n	8006080 <__smakebuf_r+0xc>
 80060b8:	89a3      	ldrh	r3, [r4, #12]
 80060ba:	6020      	str	r0, [r4, #0]
 80060bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c0:	81a3      	strh	r3, [r4, #12]
 80060c2:	9b00      	ldr	r3, [sp, #0]
 80060c4:	6163      	str	r3, [r4, #20]
 80060c6:	9b01      	ldr	r3, [sp, #4]
 80060c8:	6120      	str	r0, [r4, #16]
 80060ca:	b15b      	cbz	r3, 80060e4 <__smakebuf_r+0x70>
 80060cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060d0:	4630      	mov	r0, r6
 80060d2:	f000 f81d 	bl	8006110 <_isatty_r>
 80060d6:	b128      	cbz	r0, 80060e4 <__smakebuf_r+0x70>
 80060d8:	89a3      	ldrh	r3, [r4, #12]
 80060da:	f023 0303 	bic.w	r3, r3, #3
 80060de:	f043 0301 	orr.w	r3, r3, #1
 80060e2:	81a3      	strh	r3, [r4, #12]
 80060e4:	89a3      	ldrh	r3, [r4, #12]
 80060e6:	431d      	orrs	r5, r3
 80060e8:	81a5      	strh	r5, [r4, #12]
 80060ea:	e7cf      	b.n	800608c <__smakebuf_r+0x18>

080060ec <_fstat_r>:
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	4d07      	ldr	r5, [pc, #28]	; (800610c <_fstat_r+0x20>)
 80060f0:	2300      	movs	r3, #0
 80060f2:	4604      	mov	r4, r0
 80060f4:	4608      	mov	r0, r1
 80060f6:	4611      	mov	r1, r2
 80060f8:	602b      	str	r3, [r5, #0]
 80060fa:	f7fa fdd0 	bl	8000c9e <_fstat>
 80060fe:	1c43      	adds	r3, r0, #1
 8006100:	d102      	bne.n	8006108 <_fstat_r+0x1c>
 8006102:	682b      	ldr	r3, [r5, #0]
 8006104:	b103      	cbz	r3, 8006108 <_fstat_r+0x1c>
 8006106:	6023      	str	r3, [r4, #0]
 8006108:	bd38      	pop	{r3, r4, r5, pc}
 800610a:	bf00      	nop
 800610c:	20000ae8 	.word	0x20000ae8

08006110 <_isatty_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4d06      	ldr	r5, [pc, #24]	; (800612c <_isatty_r+0x1c>)
 8006114:	2300      	movs	r3, #0
 8006116:	4604      	mov	r4, r0
 8006118:	4608      	mov	r0, r1
 800611a:	602b      	str	r3, [r5, #0]
 800611c:	f7fa fdcf 	bl	8000cbe <_isatty>
 8006120:	1c43      	adds	r3, r0, #1
 8006122:	d102      	bne.n	800612a <_isatty_r+0x1a>
 8006124:	682b      	ldr	r3, [r5, #0]
 8006126:	b103      	cbz	r3, 800612a <_isatty_r+0x1a>
 8006128:	6023      	str	r3, [r4, #0]
 800612a:	bd38      	pop	{r3, r4, r5, pc}
 800612c:	20000ae8 	.word	0x20000ae8

08006130 <_sbrk_r>:
 8006130:	b538      	push	{r3, r4, r5, lr}
 8006132:	4d06      	ldr	r5, [pc, #24]	; (800614c <_sbrk_r+0x1c>)
 8006134:	2300      	movs	r3, #0
 8006136:	4604      	mov	r4, r0
 8006138:	4608      	mov	r0, r1
 800613a:	602b      	str	r3, [r5, #0]
 800613c:	f7fa fdd8 	bl	8000cf0 <_sbrk>
 8006140:	1c43      	adds	r3, r0, #1
 8006142:	d102      	bne.n	800614a <_sbrk_r+0x1a>
 8006144:	682b      	ldr	r3, [r5, #0]
 8006146:	b103      	cbz	r3, 800614a <_sbrk_r+0x1a>
 8006148:	6023      	str	r3, [r4, #0]
 800614a:	bd38      	pop	{r3, r4, r5, pc}
 800614c:	20000ae8 	.word	0x20000ae8

08006150 <_init>:
 8006150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006152:	bf00      	nop
 8006154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006156:	bc08      	pop	{r3}
 8006158:	469e      	mov	lr, r3
 800615a:	4770      	bx	lr

0800615c <_fini>:
 800615c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615e:	bf00      	nop
 8006160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006162:	bc08      	pop	{r3}
 8006164:	469e      	mov	lr, r3
 8006166:	4770      	bx	lr
